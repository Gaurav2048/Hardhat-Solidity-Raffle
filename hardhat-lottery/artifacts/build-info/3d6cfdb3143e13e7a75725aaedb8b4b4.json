{"id":"3d6cfdb3143e13e7a75725aaedb8b4b4","_format":"hh-sol-build-info-1","solcVersion":"0.8.7","solcLongVersion":"0.8.7+commit.e28d00a7","input":{"language":"Solidity","sources":{"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"},"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol":{"content":"// SPDX-License-Identifier: MIT\n/**\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\n */\npragma solidity ^0.8.0;\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \"./AutomationCompatibleInterface.sol\";\n"},"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool success);\n}\n"},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"},"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/LinkTokenInterface.sol\";\nimport \"../VRFConsumerBase.sol\";\n\ncontract VRFCoordinatorMock {\n  LinkTokenInterface public LINK;\n\n  event RandomnessRequest(address indexed sender, bytes32 indexed keyHash, uint256 indexed seed);\n\n  constructor(address linkAddress) public {\n    LINK = LinkTokenInterface(linkAddress);\n  }\n\n  function onTokenTransfer(\n    address sender,\n    uint256 fee,\n    bytes memory _data\n  ) public onlyLINK {\n    (bytes32 keyHash, uint256 seed) = abi.decode(_data, (bytes32, uint256));\n    emit RandomnessRequest(sender, keyHash, seed);\n  }\n\n  function callBackWithRandomness(\n    bytes32 requestId,\n    uint256 randomness,\n    address consumerContract\n  ) public {\n    VRFConsumerBase v;\n    bytes memory resp = abi.encodeWithSelector(v.rawFulfillRandomness.selector, requestId, randomness);\n    uint256 b = 206000;\n    require(gasleft() >= b, \"not enough gas for consumer\");\n    (bool success, ) = consumerContract.call(resp);\n  }\n\n  modifier onlyLINK() {\n    require(msg.sender == address(LINK), \"Must use LINK token\");\n    _;\n  }\n}\n"},"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/LinkTokenInterface.sol\";\n\nimport \"./VRFRequestIDBase.sol\";\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n * @dev want to generate randomness from.\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomness method.\n *\n * @dev The randomness argument to fulfillRandomness is the actual random value\n * @dev generated from your seed.\n *\n * @dev The requestId argument is generated from the keyHash and the seed by\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\n * @dev requests open, you can use the requestId to track which seed is\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.)\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ. (Which is critical to making unpredictable randomness! See the\n * @dev next section.)\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\n * @dev block in which the request is made, user-provided seeds have no impact\n * @dev on its economic security properties. They are only included for API\n * @dev compatability with previous versions of this contract.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request.\n */\nabstract contract VRFConsumerBase is VRFRequestIDBase {\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomness the VRF output\n   */\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\n\n  /**\n   * @dev In order to keep backwards compatibility we have kept the user\n   * seed field around. We remove the use of it because given that the blockhash\n   * enters later, it overrides whatever randomness the used seed provides.\n   * Given that it adds no security, and can easily lead to misunderstandings,\n   * we have removed it from usage and can now provide a simpler API.\n   */\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\n\n  /**\n   * @notice requestRandomness initiates a request for VRF output given _seed\n   *\n   * @dev The fulfillRandomness method receives the output, once it's provided\n   * @dev by the Oracle, and verified by the vrfCoordinator.\n   *\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\n   * @dev the _fee must exceed the fee specified during registration of the\n   * @dev _keyHash.\n   *\n   * @dev The _seed parameter is vestigial, and is kept only for API\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\n   * @dev your own randomness, here, but it's not necessary because the VRF\n   * @dev oracle will mix the hash of the block containing your request into the\n   * @dev VRF seed it ultimately uses.\n   *\n   * @param _keyHash ID of public key against which randomness is generated\n   * @param _fee The amount of LINK to send with the request\n   *\n   * @return requestId unique ID for this request\n   *\n   * @dev The returned requestId can be used to distinguish responses to\n   * @dev concurrent requests. It is passed as the first argument to\n   * @dev fulfillRandomness.\n   */\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\n    // the hash of the block containing this request to obtain the seed/input\n    // which is finally passed to the VRF cryptographic machinery.\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\n    // nonces[_keyHash] must stay in sync with\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\n    // This provides protection against the user repeating their input seed,\n    // which would result in a predictable/duplicate output, if multiple such\n    // requests appeared in the same block.\n    nonces[_keyHash] = nonces[_keyHash] + 1;\n    return makeRequestId(_keyHash, vRFSeed);\n  }\n\n  LinkTokenInterface internal immutable LINK;\n  address private immutable vrfCoordinator;\n\n  // Nonces for each VRF key from which randomness has been requested.\n  //\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\n    private nonces;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   * @param _link address of LINK token contract\n   *\n   * @dev https://docs.chain.link/docs/link-token-contracts\n   */\n  constructor(address _vrfCoordinator, address _link) {\n    vrfCoordinator = _vrfCoordinator;\n    LINK = LinkTokenInterface(_link);\n  }\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\n    fulfillRandomness(requestId, randomness);\n  }\n}\n"},"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"},"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract VRFRequestIDBase {\n  /**\n   * @notice returns the seed which is actually input to the VRF coordinator\n   *\n   * @dev To prevent repetition of VRF output due to repetition of the\n   * @dev user-supplied seed, that seed is combined in a hash with the\n   * @dev user-specific nonce, and the address of the consuming contract. The\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n   * @dev the final seed, but the nonce does protect against repetition in\n   * @dev requests which are included in a single block.\n   *\n   * @param _userSeed VRF seed input provided by user\n   * @param _requester Address of the requesting contract\n   * @param _nonce User-specific nonce at the time of the request\n   */\n  function makeVRFInputSeed(\n    bytes32 _keyHash,\n    uint256 _userSeed,\n    address _requester,\n    uint256 _nonce\n  ) internal pure returns (uint256) {\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\n  }\n\n  /**\n   * @notice Returns the id for this request\n   * @param _keyHash The serviceAgreement ID to be used for this request\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\n   * @return The id for this request\n   *\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\n   * @dev contract, but the one generated by makeVRFInputSeed\n   */\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\n  }\n}\n"},"contracts/mocks/VRFCoordinatorV2Mock.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol\";\n"},"contracts/Rafle.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\n\nerror Raffle__NotEnoughETHEntered();\nerror Raffle__TransferFailed();\nerror Raffle__NotOpen();\nerror Raffle__UpkeepNotNeeded(uint256 balance, uint256 numPlayers, uint256 raffleState);\n\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\n\n    enum RaffleState {\n        OPEN, \n        CALCULATING\n    }\n\n    uint256 private immutable i_entranceFee;\n    address payable[] private s_players;\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\n    bytes32 private immutable i_gaslane;\n    uint64 private immutable i_subscriptionId;\n    uint16 private constant REQUEST_CONFIRMATION = 3;\n    uint32 private immutable i_gasLimit;\n    uint32 private constant NUM_WORD = 1;\n\n\n    address private s_recentWinner; \n    RaffleState private s_raffleState;\n    uint256 private s_lastTimeStamp;\n    uint256 private immutable i_interval;\n    \n    /** Events  */\n    event RaffleEnter(address indexed player);\n    event requestedRaffleWinner(uint256 indexed requestId);\n    event winnerPicked(address indexed winner);\n\n    constructor (address vrfCoordinatorV2,\n        uint256 entranceFee, \n        bytes32 gasLane, \n        uint64 subscriptionId, \n        uint32 gasLimit,\n        uint256 interval\n        ) \n    VRFConsumerBaseV2(vrfCoordinatorV2) {\n        i_entranceFee = entranceFee; \n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\n        i_gaslane = gasLane;\n        i_subscriptionId = subscriptionId;\n        i_gasLimit = gasLimit;\n        s_raffleState = RaffleState.OPEN;\n        s_lastTimeStamp = block.timestamp;\n        i_interval = interval; \n    }\n\n    function enterRaffle() public payable {\n        if (msg.value < i_entranceFee) {\n            revert Raffle__NotEnoughETHEntered();\n        }\n\n        if (s_raffleState != RaffleState.OPEN) {\n            revert Raffle__NotOpen();\n        }\n\n        s_players.push(payable(msg.sender));\n        emit RaffleEnter(msg.sender);\n    }\n\n    function performUpkeep(bytes calldata /** */) external override  {\n       (bool upkeepNeeded, ) = checkUpkeep(\"\");\n       if (!upkeepNeeded) {\n        revert Raffle__UpkeepNotNeeded(\n            address(this).balance,\n            s_players.length,\n            uint256(s_raffleState)\n        );\n       }\n       s_raffleState = RaffleState.CALCULATING;\n       uint256 requestID =  i_vrfCoordinator.requestRandomWords(\n            i_gaslane,\n            i_subscriptionId,\n            REQUEST_CONFIRMATION,\n            i_gasLimit,\n            NUM_WORD\n        );\n        emit requestedRaffleWinner(requestID);\n    }\n\n    function checkUpkeep(bytes memory /* checkData */) public override returns (bool upkeepNeeded, bytes memory /**/) {\n        bool isOpen = RaffleState.OPEN == s_raffleState;\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\n        bool hasPlayers = s_players.length > 0;\n        bool hasBalance = address(this).balance > 0;\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\n\n    }\n\n    function fulfillRandomWords( uint256 /**requestId*/, uint256[] memory randomWords ) internal override {\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\n        address payable recentWinner = s_players[indexOfWinner];\n        s_recentWinner = recentWinner;\n        s_raffleState = RaffleState.OPEN;\n        s_players = new address payable[](0);\n        s_lastTimeStamp = block.timestamp;\n        (bool success, ) = recentWinner.call{ value: address(this).balance }(\"\");\n        if (!success) {\n            revert Raffle__TransferFailed();\n        }\n        emit winnerPicked(recentWinner);\n    }\n\n    function getEntranceFee() public view returns (uint256) {\n        return i_entranceFee;\n    }\n\n    function getPlayers(uint256 index) public view returns (address) {\n        return s_players[index];\n    }\n\n    function getRecentWinner() public view returns (address) {\n        return s_recentWinner;\n    }\n\n    function getRaffleState() public view returns (RaffleState) {\n        return s_raffleState;\n    }\n\n    function getNumWords() public pure returns (uint256) {\n        return NUM_WORD;\n    }\n\n    function getNumberOfPlayers() public view returns (uint256) {\n        return s_players.length;\n    }\n\n    function getLastTimeStamp() public view returns (uint256) {\n        return s_lastTimeStamp;\n    }\n\n    function getRequestConfirmation() public pure returns (uint256) {\n        return REQUEST_CONFIRMATION;\n    }\n\n}"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"2462","formattedMessage":"Warning: Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.\n  --> @chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol:12:3:\n   |\n12 |   constructor(address linkAddress) public {\n   |   ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Visibility for constructor is ignored. If you want the contract to be non-deployable, making it \"abstract\" is sufficient.","severity":"warning","sourceLocation":{"end":393,"file":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol","start":304},"type":"Warning"},{"component":"general","errorCode":"6321","formattedMessage":"Warning: Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.\n  --> contracts/Rafle.sol:92:100:\n   |\n92 |     function checkUpkeep(bytes memory /* checkData */) public override returns (bool upkeepNeeded, bytes memory /**/) {\n   |                                                                                                    ^^^^^^^^^^^^\n\n","message":"Unnamed return variable can remain unassigned. Add an explicit return with value to all non-reverting code paths or name the variable.","severity":"warning","sourceLocation":{"end":2946,"file":"contracts/Rafle.sol","start":2934},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> @chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol:18:5:\n   |\n18 |     uint256 fee,\n   |     ^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":458,"file":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol","start":447},"type":"Warning"},{"component":"general","errorCode":"2072","formattedMessage":"Warning: Unused local variable.\n  --> @chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol:34:6:\n   |\n34 |     (bool success, ) = consumerContract.call(resp);\n   |      ^^^^^^^^^^^^\n\n","message":"Unused local variable.","severity":"warning","sourceLocation":{"end":990,"file":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol","start":978},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to view\n  --> contracts/Rafle.sol:92:5:\n   |\n92 |     function checkUpkeep(bytes memory /* checkData */) public override returns (bool upkeepNeeded, bytes memory /**/) {\n   |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to view","severity":"warning","sourceLocation":{"end":3272,"file":"contracts/Rafle.sol","start":2839},"type":"Warning"}],"sources":{"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol","exportedSymbols":{"LinkTokenInterface":[346],"VRFConsumerBase":[120],"VRFRequestIDBase":[228]},"id":121,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:0"},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol","file":"./interfaces/LinkTokenInterface.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":121,"sourceUnit":347,"src":"57:45:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol","file":"./VRFRequestIDBase.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":121,"sourceUnit":229,"src":"104:32:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":5,"name":"VRFRequestIDBase","nodeType":"IdentifierPath","referencedDeclaration":228,"src":"5397:16:0"},"id":6,"nodeType":"InheritanceSpecifier","src":"5397:16:0"}],"contractDependencies":[],"contractKind":"contract","documentation":{"id":4,"nodeType":"StructuredDocumentation","src":"138:5221:0","text":"****************************************************************************\n @notice Interface for contracts using VRF randomness\n *****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is indistinguishable to her from a uniform random sample\n @dev from the output space.\n @dev The purpose of this contract is to make it easy for unrelated contracts\n @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n @dev simple access to a verifiable source of randomness.\n *****************************************************************************\n @dev USAGE\n @dev Calling contracts must inherit from VRFConsumerBase, and can\n @dev initialize VRFConsumerBase's attributes in their constructor as\n @dev shown:\n @dev   contract VRFConsumer {\n @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n @dev         <initialization with other arguments goes here>\n @dev       }\n @dev   }\n @dev The oracle will have given you an ID for the VRF keypair they have\n @dev committed to (let's call it keyHash), and have told you the minimum LINK\n @dev price for VRF service. Make sure your contract has sufficient LINK, and\n @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n @dev want to generate randomness from.\n @dev Once the VRFCoordinator has received and validated the oracle's response\n @dev to your request, it will call your contract's fulfillRandomness method.\n @dev The randomness argument to fulfillRandomness is the actual random value\n @dev generated from your seed.\n @dev The requestId argument is generated from the keyHash and the seed by\n @dev makeRequestId(keyHash, seed). If your contract could have concurrent\n @dev requests open, you can use the requestId to track which seed is\n @dev associated with which randomness. See VRFRequestIDBase.sol for more\n @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n @dev if your contract could have multiple requests in flight simultaneously.)\n @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n @dev differ. (Which is critical to making unpredictable randomness! See the\n @dev next section.)\n *****************************************************************************\n @dev SECURITY CONSIDERATIONS\n @dev A method with the ability to call your fulfillRandomness method directly\n @dev could spoof a VRF response with any random value, so it's critical that\n @dev it cannot be directly called by anything other than this base contract\n @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n @dev For your users to trust that your contract's random behavior is free\n @dev from malicious interference, it's best if you can write it so that all\n @dev behaviors implied by a VRF response are executed *during* your\n @dev fulfillRandomness method. If your contract must store the response (or\n @dev anything derived from it) and use it later, you must ensure that any\n @dev user-significant behavior which depends on that stored value cannot be\n @dev manipulated by a subsequent VRF request.\n @dev Similarly, both miners and the VRF oracle itself have some influence\n @dev over the order in which VRF responses appear on the blockchain, so if\n @dev your contract could have multiple VRF requests in flight simultaneously,\n @dev you must ensure that the order in which the VRF responses arrive cannot\n @dev be used to manipulate your contract's user-significant behavior.\n @dev Since the ultimate input to the VRF is mixed with the block hash of the\n @dev block in which the request is made, user-provided seeds have no impact\n @dev on its economic security properties. They are only included for API\n @dev compatability with previous versions of this contract.\n @dev Since the block hash of the block which contains the requestRandomness\n @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n @dev miner could, in principle, fork the blockchain to evict the block\n @dev containing the request, forcing the request to be included in a\n @dev different block with a different hash, and therefore a different input\n @dev to the VRF. However, such an attack would incur a substantial economic\n @dev cost. This cost scales with the number of blocks the VRF oracle waits\n @dev until it calls responds to a request."},"fullyImplemented":false,"id":120,"linearizedBaseContracts":[120,228],"name":"VRFConsumerBase","nameLocation":"5378:15:0","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":7,"nodeType":"StructuredDocumentation","src":"5418:641:0","text":" @notice fulfillRandomness handles the VRF response. Your contract must\n @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n @notice principles to keep in mind when implementing your fulfillRandomness\n @notice method.\n @dev VRFConsumerBase expects its subcontracts to have a method with this\n @dev signature, and will call it once it has verified the proof\n @dev associated with the randomness. (It is triggered via a call to\n @dev rawFulfillRandomness, below.)\n @param requestId The Id initially returned by requestRandomness\n @param randomness the VRF output"},"id":14,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRandomness","nameLocation":"6071:17:0","nodeType":"FunctionDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"mutability":"mutable","name":"requestId","nameLocation":"6097:9:0","nodeType":"VariableDeclaration","scope":14,"src":"6089:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":8,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6089:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":11,"mutability":"mutable","name":"randomness","nameLocation":"6116:10:0","nodeType":"VariableDeclaration","scope":14,"src":"6108:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":10,"name":"uint256","nodeType":"ElementaryTypeName","src":"6108:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6088:39:0"},"returnParameters":{"id":13,"nodeType":"ParameterList","parameters":[],"src":"6144:0:0"},"scope":120,"src":"6062:83:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"constant":true,"documentation":{"id":15,"nodeType":"StructuredDocumentation","src":"6149:388:0","text":" @dev In order to keep backwards compatibility we have kept the user\n seed field around. We remove the use of it because given that the blockhash\n enters later, it overrides whatever randomness the used seed provides.\n Given that it adds no security, and can easily lead to misunderstandings,\n we have removed it from usage and can now provide a simpler API."},"id":18,"mutability":"constant","name":"USER_SEED_PLACEHOLDER","nameLocation":"6565:21:0","nodeType":"VariableDeclaration","scope":120,"src":"6540:50:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":16,"name":"uint256","nodeType":"ElementaryTypeName","src":"6540:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30","id":17,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6589:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"private"},{"body":{"id":69,"nodeType":"Block","src":"7828:924:0","statements":[{"expression":{"arguments":[{"id":31,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":75,"src":"7855:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":32,"name":"_fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":23,"src":"7871:4:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":35,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"7888:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":36,"name":"USER_SEED_PLACEHOLDER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"7898:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":33,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7877:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":34,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"7877:10:0","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":37,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7877:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":28,"name":"LINK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"7834:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$346","typeString":"contract LinkTokenInterface"}},"id":30,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"transferAndCall","nodeType":"MemberAccess","referencedDeclaration":334,"src":"7834:20:0","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory) external returns (bool)"}},"id":38,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"7834:87:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":39,"nodeType":"ExpressionStatement","src":"7834:87:0"},{"assignments":[41],"declarations":[{"constant":false,"id":41,"mutability":"mutable","name":"vRFSeed","nameLocation":"8160:7:0","nodeType":"VariableDeclaration","scope":69,"src":"8152:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":40,"name":"uint256","nodeType":"ElementaryTypeName","src":"8152:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":53,"initialValue":{"arguments":[{"id":43,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"8187:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":44,"name":"USER_SEED_PLACEHOLDER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"8197:21:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":47,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"8228:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_VRFConsumerBase_$120","typeString":"contract VRFConsumerBase"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_VRFConsumerBase_$120","typeString":"contract VRFConsumerBase"}],"id":46,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8220:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":45,"name":"address","nodeType":"ElementaryTypeName","src":"8220:7:0","typeDescriptions":{}}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8220:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":49,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"8235:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":51,"indexExpression":{"id":50,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"8242:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8235:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":42,"name":"makeVRFInputSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":208,"src":"8170:16:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint256_$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (bytes32,uint256,address,uint256) pure returns (uint256)"}},"id":52,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8170:82:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8152:100:0"},{"expression":{"id":62,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":54,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"8663:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":56,"indexExpression":{"id":55,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"8670:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8663:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":61,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":57,"name":"nonces","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"8682:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"}},"id":59,"indexExpression":{"id":58,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"8689:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8682:16:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":60,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8701:1:0","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8682:20:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8663:39:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":63,"nodeType":"ExpressionStatement","src":"8663:39:0"},{"expression":{"arguments":[{"id":65,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":21,"src":"8729:8:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":66,"name":"vRFSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":41,"src":"8739:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":64,"name":"makeRequestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"8715:13:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (bytes32,uint256) pure returns (bytes32)"}},"id":67,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"8715:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":27,"id":68,"nodeType":"Return","src":"8708:39:0"}]},"documentation":{"id":19,"nodeType":"StructuredDocumentation","src":"6595:1134:0","text":" @notice requestRandomness initiates a request for VRF output given _seed\n @dev The fulfillRandomness method receives the output, once it's provided\n @dev by the Oracle, and verified by the vrfCoordinator.\n @dev The _keyHash must already be registered with the VRFCoordinator, and\n @dev the _fee must exceed the fee specified during registration of the\n @dev _keyHash.\n @dev The _seed parameter is vestigial, and is kept only for API\n @dev compatibility with older versions. It can't *hurt* to mix in some of\n @dev your own randomness, here, but it's not necessary because the VRF\n @dev oracle will mix the hash of the block containing your request into the\n @dev VRF seed it ultimately uses.\n @param _keyHash ID of public key against which randomness is generated\n @param _fee The amount of LINK to send with the request\n @return requestId unique ID for this request\n @dev The returned requestId can be used to distinguish responses to\n @dev concurrent requests. It is passed as the first argument to\n @dev fulfillRandomness."},"id":70,"implemented":true,"kind":"function","modifiers":[],"name":"requestRandomness","nameLocation":"7741:17:0","nodeType":"FunctionDefinition","parameters":{"id":24,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21,"mutability":"mutable","name":"_keyHash","nameLocation":"7767:8:0","nodeType":"VariableDeclaration","scope":70,"src":"7759:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":20,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7759:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":23,"mutability":"mutable","name":"_fee","nameLocation":"7785:4:0","nodeType":"VariableDeclaration","scope":70,"src":"7777:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":22,"name":"uint256","nodeType":"ElementaryTypeName","src":"7777:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7758:32:0"},"returnParameters":{"id":27,"nodeType":"ParameterList","parameters":[{"constant":false,"id":26,"mutability":"mutable","name":"requestId","nameLocation":"7817:9:0","nodeType":"VariableDeclaration","scope":70,"src":"7809:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":25,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7809:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7808:19:0"},"scope":120,"src":"7732:1020:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":false,"id":73,"mutability":"immutable","name":"LINK","nameLocation":"8794:4:0","nodeType":"VariableDeclaration","scope":120,"src":"8756:42:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$346","typeString":"contract LinkTokenInterface"},"typeName":{"id":72,"nodeType":"UserDefinedTypeName","pathNode":{"id":71,"name":"LinkTokenInterface","nodeType":"IdentifierPath","referencedDeclaration":346,"src":"8756:18:0"},"referencedDeclaration":346,"src":"8756:18:0","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$346","typeString":"contract LinkTokenInterface"}},"visibility":"internal"},{"constant":false,"id":75,"mutability":"immutable","name":"vrfCoordinator","nameLocation":"8828:14:0","nodeType":"VariableDeclaration","scope":120,"src":"8802:40:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":74,"name":"address","nodeType":"ElementaryTypeName","src":"8802:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":79,"mutability":"mutable","name":"nonces","nameLocation":"9048:6:0","nodeType":"VariableDeclaration","scope":120,"src":"8982:72:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"typeName":{"id":78,"keyType":{"id":76,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8990:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"8982:27:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_uint256_$","typeString":"mapping(bytes32 => uint256)"},"valueType":{"id":77,"name":"uint256","nodeType":"ElementaryTypeName","src":"9001:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"body":{"id":97,"nodeType":"Block","src":"9300:81:0","statements":[{"expression":{"id":89,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":87,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":75,"src":"9306:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":88,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"9323:15:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9306:32:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":90,"nodeType":"ExpressionStatement","src":"9306:32:0"},{"expression":{"id":95,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":91,"name":"LINK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"9344:4:0","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$346","typeString":"contract LinkTokenInterface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":93,"name":"_link","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"9370:5:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":92,"name":"LinkTokenInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"9351:18:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LinkTokenInterface_$346_$","typeString":"type(contract LinkTokenInterface)"}},"id":94,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9351:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$346","typeString":"contract LinkTokenInterface"}},"src":"9344:32:0","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$346","typeString":"contract LinkTokenInterface"}},"id":96,"nodeType":"ExpressionStatement","src":"9344:32:0"}]},"documentation":{"id":80,"nodeType":"StructuredDocumentation","src":"9059:186:0","text":" @param _vrfCoordinator address of VRFCoordinator contract\n @param _link address of LINK token contract\n @dev https://docs.chain.link/docs/link-token-contracts"},"id":98,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":85,"nodeType":"ParameterList","parameters":[{"constant":false,"id":82,"mutability":"mutable","name":"_vrfCoordinator","nameLocation":"9268:15:0","nodeType":"VariableDeclaration","scope":98,"src":"9260:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":81,"name":"address","nodeType":"ElementaryTypeName","src":"9260:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":84,"mutability":"mutable","name":"_link","nameLocation":"9293:5:0","nodeType":"VariableDeclaration","scope":98,"src":"9285:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":83,"name":"address","nodeType":"ElementaryTypeName","src":"9285:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9259:40:0"},"returnParameters":{"id":86,"nodeType":"ParameterList","parameters":[],"src":"9300:0:0"},"scope":120,"src":"9248:133:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":118,"nodeType":"Block","src":"9654:129:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":106,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9668:3:0","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":107,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"9668:10:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":108,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":75,"src":"9682:14:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9668:28:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c","id":110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9698:33:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_aa31d97d949424087cac59e348924584a13a8784d3590fa798a0967391035445","typeString":"literal_string \"Only VRFCoordinator can fulfill\""},"value":"Only VRFCoordinator can fulfill"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_aa31d97d949424087cac59e348924584a13a8784d3590fa798a0967391035445","typeString":"literal_string \"Only VRFCoordinator can fulfill\""}],"id":105,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9660:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9660:72:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":112,"nodeType":"ExpressionStatement","src":"9660:72:0"},{"expression":{"arguments":[{"id":114,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":100,"src":"9756:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":115,"name":"randomness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":102,"src":"9767:10:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":113,"name":"fulfillRandomness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":14,"src":"9738:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"9738:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":117,"nodeType":"ExpressionStatement","src":"9738:40:0"}]},"functionSelector":"94985ddd","id":119,"implemented":true,"kind":"function","modifiers":[],"name":"rawFulfillRandomness","nameLocation":"9585:20:0","nodeType":"FunctionDefinition","parameters":{"id":103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":100,"mutability":"mutable","name":"requestId","nameLocation":"9614:9:0","nodeType":"VariableDeclaration","scope":119,"src":"9606:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":99,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9606:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":102,"mutability":"mutable","name":"randomness","nameLocation":"9633:10:0","nodeType":"VariableDeclaration","scope":119,"src":"9625:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":101,"name":"uint256","nodeType":"ElementaryTypeName","src":"9625:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9605:39:0"},"returnParameters":{"id":104,"nodeType":"ParameterList","parameters":[],"src":"9654:0:0"},"scope":120,"src":"9576:207:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":121,"src":"5360:4425:0","usedErrors":[]}],"src":"32:9754:0"},"id":0},"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","exportedSymbols":{"VRFConsumerBaseV2":[178]},"id":179,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":122,"literals":["solidity","^","0.8",".4"],"nodeType":"PragmaDirective","src":"32:23:1"},{"abstract":true,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":123,"nodeType":"StructuredDocumentation","src":"57:5275:1","text":"****************************************************************************\n @notice Interface for contracts using VRF randomness\n *****************************************************************************\n @dev PURPOSE\n @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n @dev to Vera the verifier in such a way that Vera can be sure he's not\n @dev making his output up to suit himself. Reggie provides Vera a public key\n @dev to which he knows the secret key. Each time Vera provides a seed to\n @dev Reggie, he gives back a value which is computed completely\n @dev deterministically from the seed and the secret key.\n @dev Reggie provides a proof by which Vera can verify that the output was\n @dev correctly computed once Reggie tells it to her, but without that proof,\n @dev the output is indistinguishable to her from a uniform random sample\n @dev from the output space.\n @dev The purpose of this contract is to make it easy for unrelated contracts\n @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n @dev simple access to a verifiable source of randomness. It ensures 2 things:\n @dev 1. The fulfillment came from the VRFCoordinator\n @dev 2. The consumer contract implements fulfillRandomWords.\n *****************************************************************************\n @dev USAGE\n @dev Calling contracts must inherit from VRFConsumerBase, and can\n @dev initialize VRFConsumerBase's attributes in their constructor as\n @dev shown:\n @dev   contract VRFConsumer {\n @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n @dev       VRFConsumerBase(_vrfCoordinator) public {\n @dev         <initialization with other arguments goes here>\n @dev       }\n @dev   }\n @dev The oracle will have given you an ID for the VRF keypair they have\n @dev committed to (let's call it keyHash). Create subscription, fund it\n @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n @dev subscription management functions).\n @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n @dev callbackGasLimit, numWords),\n @dev see (VRFCoordinatorInterface for a description of the arguments).\n @dev Once the VRFCoordinator has received and validated the oracle's response\n @dev to your request, it will call your contract's fulfillRandomWords method.\n @dev The randomness argument to fulfillRandomWords is a set of random words\n @dev generated from your requestId and the blockHash of the request.\n @dev If your contract could have concurrent requests open, you can use the\n @dev requestId returned from requestRandomWords to track which response is associated\n @dev with which randomness request.\n @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n @dev if your contract could have multiple requests in flight simultaneously.\n @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n @dev differ.\n *****************************************************************************\n @dev SECURITY CONSIDERATIONS\n @dev A method with the ability to call your fulfillRandomness method directly\n @dev could spoof a VRF response with any random value, so it's critical that\n @dev it cannot be directly called by anything other than this base contract\n @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n @dev For your users to trust that your contract's random behavior is free\n @dev from malicious interference, it's best if you can write it so that all\n @dev behaviors implied by a VRF response are executed *during* your\n @dev fulfillRandomness method. If your contract must store the response (or\n @dev anything derived from it) and use it later, you must ensure that any\n @dev user-significant behavior which depends on that stored value cannot be\n @dev manipulated by a subsequent VRF request.\n @dev Similarly, both miners and the VRF oracle itself have some influence\n @dev over the order in which VRF responses appear on the blockchain, so if\n @dev your contract could have multiple VRF requests in flight simultaneously,\n @dev you must ensure that the order in which the VRF responses arrive cannot\n @dev be used to manipulate your contract's user-significant behavior.\n @dev Since the block hash of the block which contains the requestRandomness\n @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n @dev miner could, in principle, fork the blockchain to evict the block\n @dev containing the request, forcing the request to be included in a\n @dev different block with a different hash, and therefore a different input\n @dev to the VRF. However, such an attack would incur a substantial economic\n @dev cost. This cost scales with the number of blocks the VRF oracle waits\n @dev until it calls responds to a request. It is for this reason that\n @dev that you can signal to an oracle you'd like them to wait longer before\n @dev responding to the request (however this is not enforced in the contract\n @dev and so remains effective only in the case of unmodified oracle software)."},"fullyImplemented":false,"id":178,"linearizedBaseContracts":[178],"name":"VRFConsumerBaseV2","nameLocation":"5351:17:1","nodeType":"ContractDefinition","nodes":[{"id":129,"name":"OnlyCoordinatorCanFulfill","nameLocation":"5379:25:1","nodeType":"ErrorDefinition","parameters":{"id":128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":125,"mutability":"mutable","name":"have","nameLocation":"5413:4:1","nodeType":"VariableDeclaration","scope":129,"src":"5405:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":124,"name":"address","nodeType":"ElementaryTypeName","src":"5405:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":127,"mutability":"mutable","name":"want","nameLocation":"5427:4:1","nodeType":"VariableDeclaration","scope":129,"src":"5419:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":126,"name":"address","nodeType":"ElementaryTypeName","src":"5419:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5404:28:1"},"src":"5373:60:1"},{"constant":false,"id":131,"mutability":"immutable","name":"vrfCoordinator","nameLocation":"5462:14:1","nodeType":"VariableDeclaration","scope":178,"src":"5436:40:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":130,"name":"address","nodeType":"ElementaryTypeName","src":"5436:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"body":{"id":141,"nodeType":"Block","src":"5593:43:1","statements":[{"expression":{"id":139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":137,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"5599:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":138,"name":"_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":134,"src":"5616:15:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5599:32:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":140,"nodeType":"ExpressionStatement","src":"5599:32:1"}]},"documentation":{"id":132,"nodeType":"StructuredDocumentation","src":"5481:72:1","text":" @param _vrfCoordinator address of VRFCoordinator contract"},"id":142,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":134,"mutability":"mutable","name":"_vrfCoordinator","nameLocation":"5576:15:1","nodeType":"VariableDeclaration","scope":142,"src":"5568:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":133,"name":"address","nodeType":"ElementaryTypeName","src":"5568:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5567:25:1"},"returnParameters":{"id":136,"nodeType":"ParameterList","parameters":[],"src":"5593:0:1"},"scope":178,"src":"5556:80:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"documentation":{"id":143,"nodeType":"StructuredDocumentation","src":"5640:686:1","text":" @notice fulfillRandomness handles the VRF response. Your contract must\n @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n @notice principles to keep in mind when implementing your fulfillRandomness\n @notice method.\n @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n @dev signature, and will call it once it has verified the proof\n @dev associated with the randomness. (It is triggered via a call to\n @dev rawFulfillRandomness, below.)\n @param requestId The Id initially returned by requestRandomness\n @param randomWords the VRF output expanded to the requested number of words"},"id":151,"implemented":false,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"6338:18:1","nodeType":"FunctionDefinition","parameters":{"id":149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":145,"mutability":"mutable","name":"requestId","nameLocation":"6365:9:1","nodeType":"VariableDeclaration","scope":151,"src":"6357:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":144,"name":"uint256","nodeType":"ElementaryTypeName","src":"6357:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":148,"mutability":"mutable","name":"randomWords","nameLocation":"6393:11:1","nodeType":"VariableDeclaration","scope":151,"src":"6376:28:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":146,"name":"uint256","nodeType":"ElementaryTypeName","src":"6376:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":147,"nodeType":"ArrayTypeName","src":"6376:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6356:49:1"},"returnParameters":{"id":150,"nodeType":"ParameterList","parameters":[],"src":"6422:0:1"},"scope":178,"src":"6329:94:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":176,"nodeType":"Block","src":"6707:167:1","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":159,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6717:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6717:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":161,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"6731:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6717:28:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":170,"nodeType":"IfStatement","src":"6713:109:1","trueBody":{"id":169,"nodeType":"Block","src":"6747:75:1","statements":[{"errorCall":{"arguments":[{"expression":{"id":164,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6788:3:1","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"6788:10:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":166,"name":"vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":131,"src":"6800:14:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":163,"name":"OnlyCoordinatorCanFulfill","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":129,"src":"6762:25:1","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6762:53:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":168,"nodeType":"RevertStatement","src":"6755:60:1"}]}},{"expression":{"arguments":[{"id":172,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":153,"src":"6846:9:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":173,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"6857:11:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"id":171,"name":"fulfillRandomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":151,"src":"6827:18:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (uint256,uint256[] memory)"}},"id":174,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"6827:42:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":175,"nodeType":"ExpressionStatement","src":"6827:42:1"}]},"functionSelector":"1fe543e3","id":177,"implemented":true,"kind":"function","modifiers":[],"name":"rawFulfillRandomWords","nameLocation":"6627:21:1","nodeType":"FunctionDefinition","parameters":{"id":157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":153,"mutability":"mutable","name":"requestId","nameLocation":"6657:9:1","nodeType":"VariableDeclaration","scope":177,"src":"6649:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":152,"name":"uint256","nodeType":"ElementaryTypeName","src":"6649:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":156,"mutability":"mutable","name":"randomWords","nameLocation":"6685:11:1","nodeType":"VariableDeclaration","scope":177,"src":"6668:28:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":154,"name":"uint256","nodeType":"ElementaryTypeName","src":"6668:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":155,"nodeType":"ArrayTypeName","src":"6668:9:1","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"6648:49:1"},"returnParameters":{"id":158,"nodeType":"ParameterList","parameters":[],"src":"6707:0:1"},"scope":178,"src":"6618:256:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":179,"src":"5333:1543:1","usedErrors":[129]}],"src":"32:6845:1"},"id":1},"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol","exportedSymbols":{"VRFRequestIDBase":[228]},"id":229,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":180,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:2"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":228,"linearizedBaseContracts":[228],"name":"VRFRequestIDBase","nameLocation":"66:16:2","nodeType":"ContractDefinition","nodes":[{"body":{"id":207,"nodeType":"Block","src":"947:89:2","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":199,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"989:8:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":200,"name":"_userSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":185,"src":"999:9:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":201,"name":"_requester","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"1010:10:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":202,"name":"_nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"1022:6:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":197,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"978:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":198,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encode","nodeType":"MemberAccess","src":"978:10:2","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"978:51:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":196,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"968:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"968:62:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":195,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"960:7:2","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":194,"name":"uint256","nodeType":"ElementaryTypeName","src":"960:7:2","typeDescriptions":{}}},"id":205,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"960:71:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":193,"id":206,"nodeType":"Return","src":"953:78:2"}]},"documentation":{"id":181,"nodeType":"StructuredDocumentation","src":"87:706:2","text":" @notice returns the seed which is actually input to the VRF coordinator\n @dev To prevent repetition of VRF output due to repetition of the\n @dev user-supplied seed, that seed is combined in a hash with the\n @dev user-specific nonce, and the address of the consuming contract. The\n @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n @dev the final seed, but the nonce does protect against repetition in\n @dev requests which are included in a single block.\n @param _userSeed VRF seed input provided by user\n @param _requester Address of the requesting contract\n @param _nonce User-specific nonce at the time of the request"},"id":208,"implemented":true,"kind":"function","modifiers":[],"name":"makeVRFInputSeed","nameLocation":"805:16:2","nodeType":"FunctionDefinition","parameters":{"id":190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":183,"mutability":"mutable","name":"_keyHash","nameLocation":"835:8:2","nodeType":"VariableDeclaration","scope":208,"src":"827:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":182,"name":"bytes32","nodeType":"ElementaryTypeName","src":"827:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":185,"mutability":"mutable","name":"_userSeed","nameLocation":"857:9:2","nodeType":"VariableDeclaration","scope":208,"src":"849:17:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":184,"name":"uint256","nodeType":"ElementaryTypeName","src":"849:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":187,"mutability":"mutable","name":"_requester","nameLocation":"880:10:2","nodeType":"VariableDeclaration","scope":208,"src":"872:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":186,"name":"address","nodeType":"ElementaryTypeName","src":"872:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":189,"mutability":"mutable","name":"_nonce","nameLocation":"904:6:2","nodeType":"VariableDeclaration","scope":208,"src":"896:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":188,"name":"uint256","nodeType":"ElementaryTypeName","src":"896:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:93:2"},"returnParameters":{"id":193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":192,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":208,"src":"938:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":191,"name":"uint256","nodeType":"ElementaryTypeName","src":"938:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"937:9:2"},"scope":228,"src":"796:240:2","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":226,"nodeType":"Block","src":"1512:70:2","statements":[{"expression":{"arguments":[{"arguments":[{"id":221,"name":"_keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":211,"src":"1552:8:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":222,"name":"_vRFInputSeed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":213,"src":"1562:13:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":219,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1535:3:2","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":220,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodePacked","nodeType":"MemberAccess","src":"1535:16:2","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1535:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":218,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1525:9:2","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1525:52:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":217,"id":225,"nodeType":"Return","src":"1518:59:2"}]},"documentation":{"id":209,"nodeType":"StructuredDocumentation","src":"1040:373:2","text":" @notice Returns the id for this request\n @param _keyHash The serviceAgreement ID to be used for this request\n @param _vRFInputSeed The seed to be passed directly to the VRF\n @return The id for this request\n @dev Note that _vRFInputSeed is not the seed passed by the consuming\n @dev contract, but the one generated by makeVRFInputSeed"},"id":227,"implemented":true,"kind":"function","modifiers":[],"name":"makeRequestId","nameLocation":"1425:13:2","nodeType":"FunctionDefinition","parameters":{"id":214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":211,"mutability":"mutable","name":"_keyHash","nameLocation":"1447:8:2","nodeType":"VariableDeclaration","scope":227,"src":"1439:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":210,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1439:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":213,"mutability":"mutable","name":"_vRFInputSeed","nameLocation":"1465:13:2","nodeType":"VariableDeclaration","scope":227,"src":"1457:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":212,"name":"uint256","nodeType":"ElementaryTypeName","src":"1457:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1438:41:2"},"returnParameters":{"id":217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":216,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":227,"src":"1503:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":215,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1503:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1502:9:2"},"scope":228,"src":"1416:166:2","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":229,"src":"57:1527:2","usedErrors":[]}],"src":"32:1553:2"},"id":2},"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol","exportedSymbols":{"AutomationCompatibleInterface":[247]},"id":248,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":230,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:3"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":247,"linearizedBaseContracts":[247],"name":"AutomationCompatibleInterface","nameLocation":"67:29:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":231,"nodeType":"StructuredDocumentation","src":"101:985:3","text":" @notice method that is simulated by the keepers to see if any work actually\n needs to be performed. This method does does not actually need to be\n executable, and since it is only ever simulated it can consume lots of gas.\n @dev To ensure that it is never called, you may want to add the\n cannotExecute modifier from KeeperBase to your implementation of this\n method.\n @param checkData specified in the upkeep registration so it is always the\n same for a registered upkeep. This can easily be broken down into specific\n arguments using `abi.decode`, so multiple upkeeps can be registered on the\n same contract and easily differentiated by the contract.\n @return upkeepNeeded boolean to indicate whether the keeper should call\n performUpkeep or not.\n @return performData bytes that the keeper should call performUpkeep with, if\n upkeep is needed. If you would like to encode data to decode later, try\n `abi.encode`."},"functionSelector":"6e04ff0d","id":240,"implemented":false,"kind":"function","modifiers":[],"name":"checkUpkeep","nameLocation":"1098:11:3","nodeType":"FunctionDefinition","parameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":233,"mutability":"mutable","name":"checkData","nameLocation":"1125:9:3","nodeType":"VariableDeclaration","scope":240,"src":"1110:24:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":232,"name":"bytes","nodeType":"ElementaryTypeName","src":"1110:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1109:26:3"},"returnParameters":{"id":239,"nodeType":"ParameterList","parameters":[{"constant":false,"id":236,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"1159:12:3","nodeType":"VariableDeclaration","scope":240,"src":"1154:17:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":235,"name":"bool","nodeType":"ElementaryTypeName","src":"1154:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":238,"mutability":"mutable","name":"performData","nameLocation":"1186:11:3","nodeType":"VariableDeclaration","scope":240,"src":"1173:24:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":237,"name":"bytes","nodeType":"ElementaryTypeName","src":"1173:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1153:45:3"},"scope":247,"src":"1089:110:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":241,"nodeType":"StructuredDocumentation","src":"1203:1003:3","text":" @notice method that is actually executed by the keepers, via the registry.\n The data returned by the checkUpkeep simulation will be passed into\n this method to actually be executed.\n @dev The input to this method should not be trusted, and the caller of the\n method should not even be restricted to any single registry. Anyone should\n be able call it, and the input should be validated, there is no guarantee\n that the data passed in is the performData returned from checkUpkeep. This\n could happen due to malicious keepers, racing keepers, or simply a state\n change while the performUpkeep transaction is waiting for confirmation.\n Always validate the data passed in.\n @param performData is the data which was passed back from the checkData\n simulation. If it is encoded, it can easily be decoded into other types by\n calling `abi.decode`. This data should not be trusted, and should be\n validated against the contract's current state."},"functionSelector":"4585e33b","id":246,"implemented":false,"kind":"function","modifiers":[],"name":"performUpkeep","nameLocation":"2218:13:3","nodeType":"FunctionDefinition","parameters":{"id":244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":243,"mutability":"mutable","name":"performData","nameLocation":"2247:11:3","nodeType":"VariableDeclaration","scope":246,"src":"2232:26:3","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":242,"name":"bytes","nodeType":"ElementaryTypeName","src":"2232:5:3","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2231:28:3"},"returnParameters":{"id":245,"nodeType":"ParameterList","parameters":[],"src":"2268:0:3"},"scope":247,"src":"2209:60:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":248,"src":"57:2214:3","usedErrors":[]}],"src":"32:2240:3"},"id":3},"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol","exportedSymbols":{"KeeperCompatibleInterface":[247]},"id":252,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":249,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"134:23:4"},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol","file":"./AutomationCompatibleInterface.sol","id":251,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":252,"sourceUnit":248,"src":"158:111:4","symbolAliases":[{"foreign":{"id":250,"name":"AutomationCompatibleInterface","nodeType":"Identifier","overloadedDeclarations":[],"src":"166:29:4","typeDescriptions":{}},"local":"KeeperCompatibleInterface","nameLocation":"-1:-1:-1"}],"unitAlias":""}],"src":"134:136:4"},"id":4},"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol","exportedSymbols":{"LinkTokenInterface":[346]},"id":347,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":253,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:5"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":346,"linearizedBaseContracts":[346],"name":"LinkTokenInterface","nameLocation":"67:18:5","nodeType":"ContractDefinition","nodes":[{"functionSelector":"dd62ed3e","id":262,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"99:9:5","nodeType":"FunctionDefinition","parameters":{"id":258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":255,"mutability":"mutable","name":"owner","nameLocation":"117:5:5","nodeType":"VariableDeclaration","scope":262,"src":"109:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":254,"name":"address","nodeType":"ElementaryTypeName","src":"109:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":257,"mutability":"mutable","name":"spender","nameLocation":"132:7:5","nodeType":"VariableDeclaration","scope":262,"src":"124:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":256,"name":"address","nodeType":"ElementaryTypeName","src":"124:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"108:32:5"},"returnParameters":{"id":261,"nodeType":"ParameterList","parameters":[{"constant":false,"id":260,"mutability":"mutable","name":"remaining","nameLocation":"172:9:5","nodeType":"VariableDeclaration","scope":262,"src":"164:17:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":259,"name":"uint256","nodeType":"ElementaryTypeName","src":"164:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"163:19:5"},"scope":346,"src":"90:93:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"095ea7b3","id":271,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"196:7:5","nodeType":"FunctionDefinition","parameters":{"id":267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":264,"mutability":"mutable","name":"spender","nameLocation":"212:7:5","nodeType":"VariableDeclaration","scope":271,"src":"204:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":263,"name":"address","nodeType":"ElementaryTypeName","src":"204:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":266,"mutability":"mutable","name":"value","nameLocation":"229:5:5","nodeType":"VariableDeclaration","scope":271,"src":"221:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":265,"name":"uint256","nodeType":"ElementaryTypeName","src":"221:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"203:32:5"},"returnParameters":{"id":270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":269,"mutability":"mutable","name":"success","nameLocation":"259:7:5","nodeType":"VariableDeclaration","scope":271,"src":"254:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":268,"name":"bool","nodeType":"ElementaryTypeName","src":"254:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"253:14:5"},"scope":346,"src":"187:81:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"70a08231","id":278,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"281:9:5","nodeType":"FunctionDefinition","parameters":{"id":274,"nodeType":"ParameterList","parameters":[{"constant":false,"id":273,"mutability":"mutable","name":"owner","nameLocation":"299:5:5","nodeType":"VariableDeclaration","scope":278,"src":"291:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":272,"name":"address","nodeType":"ElementaryTypeName","src":"291:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"290:15:5"},"returnParameters":{"id":277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":276,"mutability":"mutable","name":"balance","nameLocation":"337:7:5","nodeType":"VariableDeclaration","scope":278,"src":"329:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":275,"name":"uint256","nodeType":"ElementaryTypeName","src":"329:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"328:17:5"},"scope":346,"src":"272:74:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"313ce567","id":283,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"359:8:5","nodeType":"FunctionDefinition","parameters":{"id":279,"nodeType":"ParameterList","parameters":[],"src":"367:2:5"},"returnParameters":{"id":282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":281,"mutability":"mutable","name":"decimalPlaces","nameLocation":"399:13:5","nodeType":"VariableDeclaration","scope":283,"src":"393:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":280,"name":"uint8","nodeType":"ElementaryTypeName","src":"393:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"392:21:5"},"scope":346,"src":"350:64:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"66188463","id":292,"implemented":false,"kind":"function","modifiers":[],"name":"decreaseApproval","nameLocation":"427:16:5","nodeType":"FunctionDefinition","parameters":{"id":288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":285,"mutability":"mutable","name":"spender","nameLocation":"452:7:5","nodeType":"VariableDeclaration","scope":292,"src":"444:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":284,"name":"address","nodeType":"ElementaryTypeName","src":"444:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":287,"mutability":"mutable","name":"addedValue","nameLocation":"469:10:5","nodeType":"VariableDeclaration","scope":292,"src":"461:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":286,"name":"uint256","nodeType":"ElementaryTypeName","src":"461:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"443:37:5"},"returnParameters":{"id":291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":290,"mutability":"mutable","name":"success","nameLocation":"504:7:5","nodeType":"VariableDeclaration","scope":292,"src":"499:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":289,"name":"bool","nodeType":"ElementaryTypeName","src":"499:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"498:14:5"},"scope":346,"src":"418:95:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"d73dd623","id":299,"implemented":false,"kind":"function","modifiers":[],"name":"increaseApproval","nameLocation":"526:16:5","nodeType":"FunctionDefinition","parameters":{"id":297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":294,"mutability":"mutable","name":"spender","nameLocation":"551:7:5","nodeType":"VariableDeclaration","scope":299,"src":"543:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":293,"name":"address","nodeType":"ElementaryTypeName","src":"543:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":296,"mutability":"mutable","name":"subtractedValue","nameLocation":"568:15:5","nodeType":"VariableDeclaration","scope":299,"src":"560:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":295,"name":"uint256","nodeType":"ElementaryTypeName","src":"560:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"542:42:5"},"returnParameters":{"id":298,"nodeType":"ParameterList","parameters":[],"src":"593:0:5"},"scope":346,"src":"517:77:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"06fdde03","id":304,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"607:4:5","nodeType":"FunctionDefinition","parameters":{"id":300,"nodeType":"ParameterList","parameters":[],"src":"611:2:5"},"returnParameters":{"id":303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":302,"mutability":"mutable","name":"tokenName","nameLocation":"651:9:5","nodeType":"VariableDeclaration","scope":304,"src":"637:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":301,"name":"string","nodeType":"ElementaryTypeName","src":"637:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"636:25:5"},"scope":346,"src":"598:64:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"95d89b41","id":309,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"675:6:5","nodeType":"FunctionDefinition","parameters":{"id":305,"nodeType":"ParameterList","parameters":[],"src":"681:2:5"},"returnParameters":{"id":308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":307,"mutability":"mutable","name":"tokenSymbol","nameLocation":"721:11:5","nodeType":"VariableDeclaration","scope":309,"src":"707:25:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":306,"name":"string","nodeType":"ElementaryTypeName","src":"707:6:5","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"706:27:5"},"scope":346,"src":"666:68:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"18160ddd","id":314,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"747:11:5","nodeType":"FunctionDefinition","parameters":{"id":310,"nodeType":"ParameterList","parameters":[],"src":"758:2:5"},"returnParameters":{"id":313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":312,"mutability":"mutable","name":"totalTokensIssued","nameLocation":"792:17:5","nodeType":"VariableDeclaration","scope":314,"src":"784:25:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":311,"name":"uint256","nodeType":"ElementaryTypeName","src":"784:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"783:27:5"},"scope":346,"src":"738:73:5","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"a9059cbb","id":323,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"824:8:5","nodeType":"FunctionDefinition","parameters":{"id":319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":316,"mutability":"mutable","name":"to","nameLocation":"841:2:5","nodeType":"VariableDeclaration","scope":323,"src":"833:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":315,"name":"address","nodeType":"ElementaryTypeName","src":"833:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":318,"mutability":"mutable","name":"value","nameLocation":"853:5:5","nodeType":"VariableDeclaration","scope":323,"src":"845:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":317,"name":"uint256","nodeType":"ElementaryTypeName","src":"845:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"832:27:5"},"returnParameters":{"id":322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":321,"mutability":"mutable","name":"success","nameLocation":"883:7:5","nodeType":"VariableDeclaration","scope":323,"src":"878:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":320,"name":"bool","nodeType":"ElementaryTypeName","src":"878:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"877:14:5"},"scope":346,"src":"815:77:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"4000aea0","id":334,"implemented":false,"kind":"function","modifiers":[],"name":"transferAndCall","nameLocation":"905:15:5","nodeType":"FunctionDefinition","parameters":{"id":330,"nodeType":"ParameterList","parameters":[{"constant":false,"id":325,"mutability":"mutable","name":"to","nameLocation":"934:2:5","nodeType":"VariableDeclaration","scope":334,"src":"926:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":324,"name":"address","nodeType":"ElementaryTypeName","src":"926:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":327,"mutability":"mutable","name":"value","nameLocation":"950:5:5","nodeType":"VariableDeclaration","scope":334,"src":"942:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":326,"name":"uint256","nodeType":"ElementaryTypeName","src":"942:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":329,"mutability":"mutable","name":"data","nameLocation":"976:4:5","nodeType":"VariableDeclaration","scope":334,"src":"961:19:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":328,"name":"bytes","nodeType":"ElementaryTypeName","src":"961:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"920:64:5"},"returnParameters":{"id":333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":332,"mutability":"mutable","name":"success","nameLocation":"1008:7:5","nodeType":"VariableDeclaration","scope":334,"src":"1003:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":331,"name":"bool","nodeType":"ElementaryTypeName","src":"1003:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1002:14:5"},"scope":346,"src":"896:121:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"23b872dd","id":345,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"1030:12:5","nodeType":"FunctionDefinition","parameters":{"id":341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":336,"mutability":"mutable","name":"from","nameLocation":"1056:4:5","nodeType":"VariableDeclaration","scope":345,"src":"1048:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":335,"name":"address","nodeType":"ElementaryTypeName","src":"1048:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":338,"mutability":"mutable","name":"to","nameLocation":"1074:2:5","nodeType":"VariableDeclaration","scope":345,"src":"1066:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":337,"name":"address","nodeType":"ElementaryTypeName","src":"1066:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":340,"mutability":"mutable","name":"value","nameLocation":"1090:5:5","nodeType":"VariableDeclaration","scope":345,"src":"1082:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":339,"name":"uint256","nodeType":"ElementaryTypeName","src":"1082:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1042:57:5"},"returnParameters":{"id":344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":343,"mutability":"mutable","name":"success","nameLocation":"1123:7:5","nodeType":"VariableDeclaration","scope":345,"src":"1118:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":342,"name":"bool","nodeType":"ElementaryTypeName","src":"1118:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1117:14:5"},"scope":346,"src":"1021:111:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":347,"src":"57:1077:5","usedErrors":[]}],"src":"32:1103:5"},"id":5},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","exportedSymbols":{"VRFCoordinatorV2Interface":[442]},"id":443,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":348,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:6"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":442,"linearizedBaseContracts":[442],"name":"VRFCoordinatorV2Interface","nameLocation":"67:25:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":349,"nodeType":"StructuredDocumentation","src":"97:267:6","text":" @notice Get configuration relevant for making requests\n @return minimumRequestConfirmations global min for request confirmations\n @return maxGasLimit global max for request gas limit\n @return s_provingKeyHashes list of registered key hashes"},"functionSelector":"00012291","id":359,"implemented":false,"kind":"function","modifiers":[],"name":"getRequestConfig","nameLocation":"376:16:6","nodeType":"FunctionDefinition","parameters":{"id":350,"nodeType":"ParameterList","parameters":[],"src":"392:2:6"},"returnParameters":{"id":358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":352,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":359,"src":"437:6:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":351,"name":"uint16","nodeType":"ElementaryTypeName","src":"437:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":354,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":359,"src":"451:6:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":353,"name":"uint32","nodeType":"ElementaryTypeName","src":"451:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":357,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":359,"src":"465:16:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":355,"name":"bytes32","nodeType":"ElementaryTypeName","src":"465:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":356,"nodeType":"ArrayTypeName","src":"465:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"429:58:6"},"scope":442,"src":"367:121:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":360,"nodeType":"StructuredDocumentation","src":"492:1511:6","text":" @notice Request a set of random words.\n @param keyHash - Corresponds to a particular oracle job which uses\n that key for generating the VRF proof. Different keyHash's have different gas price\n ceilings, so you can select a specific one to bound your maximum per request cost.\n @param subId  - The ID of the VRF subscription. Must be funded\n with the minimum subscription balance required for the selected keyHash.\n @param minimumRequestConfirmations - How many blocks you'd like the\n oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n for why you may want to request more. The acceptable range is\n [minimumRequestBlockConfirmations, 200].\n @param callbackGasLimit - How much gas you'd like to receive in your\n fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n may be slightly less than this amount because of gas used calling the function\n (argument decoding etc.), so you may need to request slightly more than you expect\n to have inside fulfillRandomWords. The acceptable range is\n [0, maxGasLimit]\n @param numWords - The number of uint256 random values you'd like to receive\n in your fulfillRandomWords callback. Note these numbers are expanded in a\n secure way by the VRFCoordinator from a single random value supplied by the oracle.\n @return requestId - A unique identifier of the request. Can be used to match\n a request to a response in fulfillRandomWords."},"functionSelector":"5d3b1d30","id":375,"implemented":false,"kind":"function","modifiers":[],"name":"requestRandomWords","nameLocation":"2015:18:6","nodeType":"FunctionDefinition","parameters":{"id":371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":362,"mutability":"mutable","name":"keyHash","nameLocation":"2047:7:6","nodeType":"VariableDeclaration","scope":375,"src":"2039:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":361,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2039:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":364,"mutability":"mutable","name":"subId","nameLocation":"2067:5:6","nodeType":"VariableDeclaration","scope":375,"src":"2060:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":363,"name":"uint64","nodeType":"ElementaryTypeName","src":"2060:6:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":366,"mutability":"mutable","name":"minimumRequestConfirmations","nameLocation":"2085:27:6","nodeType":"VariableDeclaration","scope":375,"src":"2078:34:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":365,"name":"uint16","nodeType":"ElementaryTypeName","src":"2078:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":368,"mutability":"mutable","name":"callbackGasLimit","nameLocation":"2125:16:6","nodeType":"VariableDeclaration","scope":375,"src":"2118:23:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":367,"name":"uint32","nodeType":"ElementaryTypeName","src":"2118:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":370,"mutability":"mutable","name":"numWords","nameLocation":"2154:8:6","nodeType":"VariableDeclaration","scope":375,"src":"2147:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":369,"name":"uint32","nodeType":"ElementaryTypeName","src":"2147:6:6","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2033:133:6"},"returnParameters":{"id":374,"nodeType":"ParameterList","parameters":[{"constant":false,"id":373,"mutability":"mutable","name":"requestId","nameLocation":"2193:9:6","nodeType":"VariableDeclaration","scope":375,"src":"2185:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":372,"name":"uint256","nodeType":"ElementaryTypeName","src":"2185:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2184:19:6"},"scope":442,"src":"2006:198:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":376,"nodeType":"StructuredDocumentation","src":"2208:384:6","text":" @notice Create a VRF subscription.\n @return subId - A unique subscription id.\n @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n @dev Note to fund the subscription, use transferAndCall. For example\n @dev  LINKTOKEN.transferAndCall(\n @dev    address(COORDINATOR),\n @dev    amount,\n @dev    abi.encode(subId));"},"functionSelector":"a21a23e4","id":381,"implemented":false,"kind":"function","modifiers":[],"name":"createSubscription","nameLocation":"2604:18:6","nodeType":"FunctionDefinition","parameters":{"id":377,"nodeType":"ParameterList","parameters":[],"src":"2622:2:6"},"returnParameters":{"id":380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":379,"mutability":"mutable","name":"subId","nameLocation":"2650:5:6","nodeType":"VariableDeclaration","scope":381,"src":"2643:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":378,"name":"uint64","nodeType":"ElementaryTypeName","src":"2643:6:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"2642:14:6"},"scope":442,"src":"2595:62:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":382,"nodeType":"StructuredDocumentation","src":"2661:381:6","text":" @notice Get a VRF subscription.\n @param subId - ID of the subscription\n @return balance - LINK balance of the subscription in juels.\n @return reqCount - number of requests for this subscription, determines fee tier.\n @return owner - owner of the subscription.\n @return consumers - list of consumer address which are able to use this subscription."},"functionSelector":"a47c7696","id":396,"implemented":false,"kind":"function","modifiers":[],"name":"getSubscription","nameLocation":"3054:15:6","nodeType":"FunctionDefinition","parameters":{"id":385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":384,"mutability":"mutable","name":"subId","nameLocation":"3077:5:6","nodeType":"VariableDeclaration","scope":396,"src":"3070:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":383,"name":"uint64","nodeType":"ElementaryTypeName","src":"3070:6:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3069:14:6"},"returnParameters":{"id":395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":387,"mutability":"mutable","name":"balance","nameLocation":"3133:7:6","nodeType":"VariableDeclaration","scope":396,"src":"3126:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"},"typeName":{"id":386,"name":"uint96","nodeType":"ElementaryTypeName","src":"3126:6:6","typeDescriptions":{"typeIdentifier":"t_uint96","typeString":"uint96"}},"visibility":"internal"},{"constant":false,"id":389,"mutability":"mutable","name":"reqCount","nameLocation":"3155:8:6","nodeType":"VariableDeclaration","scope":396,"src":"3148:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":388,"name":"uint64","nodeType":"ElementaryTypeName","src":"3148:6:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":391,"mutability":"mutable","name":"owner","nameLocation":"3179:5:6","nodeType":"VariableDeclaration","scope":396,"src":"3171:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":390,"name":"address","nodeType":"ElementaryTypeName","src":"3171:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":394,"mutability":"mutable","name":"consumers","nameLocation":"3209:9:6","nodeType":"VariableDeclaration","scope":396,"src":"3192:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":392,"name":"address","nodeType":"ElementaryTypeName","src":"3192:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":393,"nodeType":"ArrayTypeName","src":"3192:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"src":"3118:106:6"},"scope":442,"src":"3045:180:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":397,"nodeType":"StructuredDocumentation","src":"3229:164:6","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @param newOwner - proposed new owner of the subscription"},"functionSelector":"04c357cb","id":404,"implemented":false,"kind":"function","modifiers":[],"name":"requestSubscriptionOwnerTransfer","nameLocation":"3405:32:6","nodeType":"FunctionDefinition","parameters":{"id":402,"nodeType":"ParameterList","parameters":[{"constant":false,"id":399,"mutability":"mutable","name":"subId","nameLocation":"3445:5:6","nodeType":"VariableDeclaration","scope":404,"src":"3438:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":398,"name":"uint64","nodeType":"ElementaryTypeName","src":"3438:6:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":401,"mutability":"mutable","name":"newOwner","nameLocation":"3460:8:6","nodeType":"VariableDeclaration","scope":404,"src":"3452:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":400,"name":"address","nodeType":"ElementaryTypeName","src":"3452:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3437:32:6"},"returnParameters":{"id":403,"nodeType":"ParameterList","parameters":[],"src":"3478:0:6"},"scope":442,"src":"3396:83:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":405,"nodeType":"StructuredDocumentation","src":"3483:212:6","text":" @notice Request subscription owner transfer.\n @param subId - ID of the subscription\n @dev will revert if original owner of subId has\n not requested that msg.sender become the new owner."},"functionSelector":"82359740","id":410,"implemented":false,"kind":"function","modifiers":[],"name":"acceptSubscriptionOwnerTransfer","nameLocation":"3707:31:6","nodeType":"FunctionDefinition","parameters":{"id":408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":407,"mutability":"mutable","name":"subId","nameLocation":"3746:5:6","nodeType":"VariableDeclaration","scope":410,"src":"3739:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":406,"name":"uint64","nodeType":"ElementaryTypeName","src":"3739:6:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"3738:14:6"},"returnParameters":{"id":409,"nodeType":"ParameterList","parameters":[],"src":"3761:0:6"},"scope":442,"src":"3698:64:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":411,"nodeType":"StructuredDocumentation","src":"3766:170:6","text":" @notice Add a consumer to a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - New consumer which can use the subscription"},"functionSelector":"7341c10c","id":418,"implemented":false,"kind":"function","modifiers":[],"name":"addConsumer","nameLocation":"3948:11:6","nodeType":"FunctionDefinition","parameters":{"id":416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":413,"mutability":"mutable","name":"subId","nameLocation":"3967:5:6","nodeType":"VariableDeclaration","scope":418,"src":"3960:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":412,"name":"uint64","nodeType":"ElementaryTypeName","src":"3960:6:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":415,"mutability":"mutable","name":"consumer","nameLocation":"3982:8:6","nodeType":"VariableDeclaration","scope":418,"src":"3974:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":414,"name":"address","nodeType":"ElementaryTypeName","src":"3974:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3959:32:6"},"returnParameters":{"id":417,"nodeType":"ParameterList","parameters":[],"src":"4000:0:6"},"scope":442,"src":"3939:62:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":419,"nodeType":"StructuredDocumentation","src":"4005:172:6","text":" @notice Remove a consumer from a VRF subscription.\n @param subId - ID of the subscription\n @param consumer - Consumer to remove from the subscription"},"functionSelector":"9f87fad7","id":426,"implemented":false,"kind":"function","modifiers":[],"name":"removeConsumer","nameLocation":"4189:14:6","nodeType":"FunctionDefinition","parameters":{"id":424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":421,"mutability":"mutable","name":"subId","nameLocation":"4211:5:6","nodeType":"VariableDeclaration","scope":426,"src":"4204:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":420,"name":"uint64","nodeType":"ElementaryTypeName","src":"4204:6:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":423,"mutability":"mutable","name":"consumer","nameLocation":"4226:8:6","nodeType":"VariableDeclaration","scope":426,"src":"4218:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":422,"name":"address","nodeType":"ElementaryTypeName","src":"4218:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4203:32:6"},"returnParameters":{"id":425,"nodeType":"ParameterList","parameters":[],"src":"4244:0:6"},"scope":442,"src":"4180:65:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":427,"nodeType":"StructuredDocumentation","src":"4249:140:6","text":" @notice Cancel a subscription\n @param subId - ID of the subscription\n @param to - Where to send the remaining LINK to"},"functionSelector":"d7ae1d30","id":434,"implemented":false,"kind":"function","modifiers":[],"name":"cancelSubscription","nameLocation":"4401:18:6","nodeType":"FunctionDefinition","parameters":{"id":432,"nodeType":"ParameterList","parameters":[{"constant":false,"id":429,"mutability":"mutable","name":"subId","nameLocation":"4427:5:6","nodeType":"VariableDeclaration","scope":434,"src":"4420:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":428,"name":"uint64","nodeType":"ElementaryTypeName","src":"4420:6:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":431,"mutability":"mutable","name":"to","nameLocation":"4442:2:6","nodeType":"VariableDeclaration","scope":434,"src":"4434:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":430,"name":"address","nodeType":"ElementaryTypeName","src":"4434:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4419:26:6"},"returnParameters":{"id":433,"nodeType":"ParameterList","parameters":[],"src":"4454:0:6"},"scope":442,"src":"4392:63:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e82ad7d4","id":441,"implemented":false,"kind":"function","modifiers":[],"name":"pendingRequestExists","nameLocation":"4760:20:6","nodeType":"FunctionDefinition","parameters":{"id":437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":436,"mutability":"mutable","name":"subId","nameLocation":"4788:5:6","nodeType":"VariableDeclaration","scope":441,"src":"4781:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":435,"name":"uint64","nodeType":"ElementaryTypeName","src":"4781:6:6","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"}],"src":"4780:14:6"},"returnParameters":{"id":440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":439,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":441,"src":"4818:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":438,"name":"bool","nodeType":"ElementaryTypeName","src":"4818:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4817:6:6"},"scope":442,"src":"4751:73:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":443,"src":"57:4769:6","usedErrors":[]}],"src":"32:4795:6"},"id":6},"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol":{"ast":{"absolutePath":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol","exportedSymbols":{"LinkTokenInterface":[346],"VRFConsumerBase":[120],"VRFCoordinatorMock":[561],"VRFRequestIDBase":[228]},"id":562,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":444,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"32:23:7"},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol","file":"../interfaces/LinkTokenInterface.sol","id":445,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":562,"sourceUnit":347,"src":"57:46:7","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol","file":"../VRFConsumerBase.sol","id":446,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":562,"sourceUnit":121,"src":"104:32:7","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":561,"linearizedBaseContracts":[561],"name":"VRFCoordinatorMock","nameLocation":"147:18:7","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"1b6b6d23","id":449,"mutability":"mutable","name":"LINK","nameLocation":"196:4:7","nodeType":"VariableDeclaration","scope":561,"src":"170:30:7","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$346","typeString":"contract LinkTokenInterface"},"typeName":{"id":448,"nodeType":"UserDefinedTypeName","pathNode":{"id":447,"name":"LinkTokenInterface","nodeType":"IdentifierPath","referencedDeclaration":346,"src":"170:18:7"},"referencedDeclaration":346,"src":"170:18:7","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$346","typeString":"contract LinkTokenInterface"}},"visibility":"public"},{"anonymous":false,"id":457,"name":"RandomnessRequest","nameLocation":"211:17:7","nodeType":"EventDefinition","parameters":{"id":456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":451,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"245:6:7","nodeType":"VariableDeclaration","scope":457,"src":"229:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":450,"name":"address","nodeType":"ElementaryTypeName","src":"229:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":453,"indexed":true,"mutability":"mutable","name":"keyHash","nameLocation":"269:7:7","nodeType":"VariableDeclaration","scope":457,"src":"253:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":452,"name":"bytes32","nodeType":"ElementaryTypeName","src":"253:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":455,"indexed":true,"mutability":"mutable","name":"seed","nameLocation":"294:4:7","nodeType":"VariableDeclaration","scope":457,"src":"278:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":454,"name":"uint256","nodeType":"ElementaryTypeName","src":"278:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"228:71:7"},"src":"205:95:7"},{"body":{"id":468,"nodeType":"Block","src":"344:49:7","statements":[{"expression":{"id":466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":462,"name":"LINK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"350:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$346","typeString":"contract LinkTokenInterface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":464,"name":"linkAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"376:11:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":463,"name":"LinkTokenInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"357:18:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LinkTokenInterface_$346_$","typeString":"type(contract LinkTokenInterface)"}},"id":465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"357:31:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$346","typeString":"contract LinkTokenInterface"}},"src":"350:38:7","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$346","typeString":"contract LinkTokenInterface"}},"id":467,"nodeType":"ExpressionStatement","src":"350:38:7"}]},"id":469,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":459,"mutability":"mutable","name":"linkAddress","nameLocation":"324:11:7","nodeType":"VariableDeclaration","scope":469,"src":"316:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":458,"name":"address","nodeType":"ElementaryTypeName","src":"316:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"315:21:7"},"returnParameters":{"id":461,"nodeType":"ParameterList","parameters":[],"src":"344:0:7"},"scope":561,"src":"304:89:7","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":500,"nodeType":"Block","src":"503:133:7","statements":[{"assignments":[481,483],"declarations":[{"constant":false,"id":481,"mutability":"mutable","name":"keyHash","nameLocation":"518:7:7","nodeType":"VariableDeclaration","scope":500,"src":"510:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":480,"name":"bytes32","nodeType":"ElementaryTypeName","src":"510:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":483,"mutability":"mutable","name":"seed","nameLocation":"535:4:7","nodeType":"VariableDeclaration","scope":500,"src":"527:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":482,"name":"uint256","nodeType":"ElementaryTypeName","src":"527:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":493,"initialValue":{"arguments":[{"id":486,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":475,"src":"554:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":488,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"562:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":487,"name":"bytes32","nodeType":"ElementaryTypeName","src":"562:7:7","typeDescriptions":{}}},{"id":490,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"571:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":489,"name":"uint256","nodeType":"ElementaryTypeName","src":"571:7:7","typeDescriptions":{}}}],"id":491,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"561:18:7","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_bytes32_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(bytes32),type(uint256))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_bytes32_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(bytes32),type(uint256))"}],"expression":{"id":484,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"543:3:7","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":485,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"decode","nodeType":"MemberAccess","src":"543:10:7","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"543:37:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes32_$_t_uint256_$","typeString":"tuple(bytes32,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"509:71:7"},{"eventCall":{"arguments":[{"id":495,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":471,"src":"609:6:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":496,"name":"keyHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":481,"src":"617:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":497,"name":"seed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":483,"src":"626:4:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":494,"name":"RandomnessRequest","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":457,"src":"591:17:7","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (address,bytes32,uint256)"}},"id":498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"591:40:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":499,"nodeType":"EmitStatement","src":"586:45:7"}]},"functionSelector":"a4c0ed36","id":501,"implemented":true,"kind":"function","modifiers":[{"id":478,"kind":"modifierInvocation","modifierName":{"id":477,"name":"onlyLINK","nodeType":"IdentifierPath","referencedDeclaration":560,"src":"494:8:7"},"nodeType":"ModifierInvocation","src":"494:8:7"}],"name":"onTokenTransfer","nameLocation":"406:15:7","nodeType":"FunctionDefinition","parameters":{"id":476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":471,"mutability":"mutable","name":"sender","nameLocation":"435:6:7","nodeType":"VariableDeclaration","scope":501,"src":"427:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":470,"name":"address","nodeType":"ElementaryTypeName","src":"427:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":473,"mutability":"mutable","name":"fee","nameLocation":"455:3:7","nodeType":"VariableDeclaration","scope":501,"src":"447:11:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":472,"name":"uint256","nodeType":"ElementaryTypeName","src":"447:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":475,"mutability":"mutable","name":"_data","nameLocation":"477:5:7","nodeType":"VariableDeclaration","scope":501,"src":"464:18:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":474,"name":"bytes","nodeType":"ElementaryTypeName","src":"464:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"421:65:7"},"returnParameters":{"id":479,"nodeType":"ParameterList","parameters":[],"src":"503:0:7"},"scope":561,"src":"397:239:7","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":544,"nodeType":"Block","src":"760:268:7","statements":[{"assignments":[512],"declarations":[{"constant":false,"id":512,"mutability":"mutable","name":"v","nameLocation":"782:1:7","nodeType":"VariableDeclaration","scope":544,"src":"766:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_VRFConsumerBase_$120","typeString":"contract VRFConsumerBase"},"typeName":{"id":511,"nodeType":"UserDefinedTypeName","pathNode":{"id":510,"name":"VRFConsumerBase","nodeType":"IdentifierPath","referencedDeclaration":120,"src":"766:15:7"},"referencedDeclaration":120,"src":"766:15:7","typeDescriptions":{"typeIdentifier":"t_contract$_VRFConsumerBase_$120","typeString":"contract VRFConsumerBase"}},"visibility":"internal"}],"id":513,"nodeType":"VariableDeclarationStatement","src":"766:17:7"},{"assignments":[515],"declarations":[{"constant":false,"id":515,"mutability":"mutable","name":"resp","nameLocation":"802:4:7","nodeType":"VariableDeclaration","scope":544,"src":"789:17:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":514,"name":"bytes","nodeType":"ElementaryTypeName","src":"789:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":524,"initialValue":{"arguments":[{"expression":{"expression":{"id":518,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":512,"src":"832:1:7","typeDescriptions":{"typeIdentifier":"t_contract$_VRFConsumerBase_$120","typeString":"contract VRFConsumerBase"}},"id":519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"rawFulfillRandomness","nodeType":"MemberAccess","referencedDeclaration":119,"src":"832:22:7","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256) external"}},"id":520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"selector","nodeType":"MemberAccess","src":"832:31:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":521,"name":"requestId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":503,"src":"865:9:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":522,"name":"randomness","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"876:10:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":516,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"809:3:7","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":517,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"809:22:7","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"809:78:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"789:98:7"},{"assignments":[526],"declarations":[{"constant":false,"id":526,"mutability":"mutable","name":"b","nameLocation":"901:1:7","nodeType":"VariableDeclaration","scope":544,"src":"893:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":525,"name":"uint256","nodeType":"ElementaryTypeName","src":"893:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":528,"initialValue":{"hexValue":"323036303030","id":527,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"905:6:7","typeDescriptions":{"typeIdentifier":"t_rational_206000_by_1","typeString":"int_const 206000"},"value":"206000"},"nodeType":"VariableDeclarationStatement","src":"893:18:7"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":530,"name":"gasleft","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-7,"src":"925:7:7","typeDescriptions":{"typeIdentifier":"t_function_gasleft_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"925:9:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":532,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":526,"src":"938:1:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"925:14:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6e6f7420656e6f7567682067617320666f7220636f6e73756d6572","id":534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"941:29:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7","typeString":"literal_string \"not enough gas for consumer\""},"value":"not enough gas for consumer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7","typeString":"literal_string \"not enough gas for consumer\""}],"id":529,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"917:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"917:54:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":536,"nodeType":"ExpressionStatement","src":"917:54:7"},{"assignments":[538,null],"declarations":[{"constant":false,"id":538,"mutability":"mutable","name":"success","nameLocation":"983:7:7","nodeType":"VariableDeclaration","scope":544,"src":"978:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":537,"name":"bool","nodeType":"ElementaryTypeName","src":"978:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":543,"initialValue":{"arguments":[{"id":541,"name":"resp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":515,"src":"1018:4:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":539,"name":"consumerContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":507,"src":"996:16:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"996:21:7","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"996:27:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"977:46:7"}]},"functionSelector":"cf55fe97","id":545,"implemented":true,"kind":"function","modifiers":[],"name":"callBackWithRandomness","nameLocation":"649:22:7","nodeType":"FunctionDefinition","parameters":{"id":508,"nodeType":"ParameterList","parameters":[{"constant":false,"id":503,"mutability":"mutable","name":"requestId","nameLocation":"685:9:7","nodeType":"VariableDeclaration","scope":545,"src":"677:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":502,"name":"bytes32","nodeType":"ElementaryTypeName","src":"677:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":505,"mutability":"mutable","name":"randomness","nameLocation":"708:10:7","nodeType":"VariableDeclaration","scope":545,"src":"700:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":504,"name":"uint256","nodeType":"ElementaryTypeName","src":"700:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":507,"mutability":"mutable","name":"consumerContract","nameLocation":"732:16:7","nodeType":"VariableDeclaration","scope":545,"src":"724:24:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":506,"name":"address","nodeType":"ElementaryTypeName","src":"724:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"671:81:7"},"returnParameters":{"id":509,"nodeType":"ParameterList","parameters":[],"src":"760:0:7"},"scope":561,"src":"640:388:7","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":559,"nodeType":"Block","src":"1052:77:7","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":548,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1066:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"1066:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":552,"name":"LINK","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"1088:4:7","typeDescriptions":{"typeIdentifier":"t_contract$_LinkTokenInterface_$346","typeString":"contract LinkTokenInterface"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_LinkTokenInterface_$346","typeString":"contract LinkTokenInterface"}],"id":551,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1080:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":550,"name":"address","nodeType":"ElementaryTypeName","src":"1080:7:7","typeDescriptions":{}}},"id":553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1080:13:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1066:27:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d75737420757365204c494e4b20746f6b656e","id":555,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1095:21:7","typeDescriptions":{"typeIdentifier":"t_stringliteral_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7","typeString":"literal_string \"Must use LINK token\""},"value":"Must use LINK token"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7","typeString":"literal_string \"Must use LINK token\""}],"id":547,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1058:7:7","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1058:59:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":557,"nodeType":"ExpressionStatement","src":"1058:59:7"},{"id":558,"nodeType":"PlaceholderStatement","src":"1123:1:7"}]},"id":560,"name":"onlyLINK","nameLocation":"1041:8:7","nodeType":"ModifierDefinition","parameters":{"id":546,"nodeType":"ParameterList","parameters":[],"src":"1049:2:7"},"src":"1032:97:7","virtual":false,"visibility":"internal"}],"scope":562,"src":"138:993:7","usedErrors":[]}],"src":"32:1100:7"},"id":7},"contracts/Rafle.sol":{"ast":{"absolutePath":"contracts/Rafle.sol","exportedSymbols":{"KeeperCompatibleInterface":[247],"Raffle":[971],"Raffle__NotEnoughETHEntered":[568],"Raffle__NotOpen":[572],"Raffle__TransferFailed":[570],"Raffle__UpkeepNotNeeded":[580],"VRFConsumerBaseV2":[178],"VRFCoordinatorV2Interface":[442]},"id":972,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":563,"literals":["solidity","^","0.8",".7"],"nodeType":"PragmaDirective","src":"33:23:8"},{"absolutePath":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","file":"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol","id":564,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":972,"sourceUnit":179,"src":"58:61:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","file":"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol","id":565,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":972,"sourceUnit":443,"src":"120:80:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol","file":"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol","id":566,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":972,"sourceUnit":252,"src":"201:80:8","symbolAliases":[],"unitAlias":""},{"id":568,"name":"Raffle__NotEnoughETHEntered","nameLocation":"289:27:8","nodeType":"ErrorDefinition","parameters":{"id":567,"nodeType":"ParameterList","parameters":[],"src":"316:2:8"},"src":"283:36:8"},{"id":570,"name":"Raffle__TransferFailed","nameLocation":"326:22:8","nodeType":"ErrorDefinition","parameters":{"id":569,"nodeType":"ParameterList","parameters":[],"src":"348:2:8"},"src":"320:31:8"},{"id":572,"name":"Raffle__NotOpen","nameLocation":"358:15:8","nodeType":"ErrorDefinition","parameters":{"id":571,"nodeType":"ParameterList","parameters":[],"src":"373:2:8"},"src":"352:24:8"},{"id":580,"name":"Raffle__UpkeepNotNeeded","nameLocation":"383:23:8","nodeType":"ErrorDefinition","parameters":{"id":579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":574,"mutability":"mutable","name":"balance","nameLocation":"415:7:8","nodeType":"VariableDeclaration","scope":580,"src":"407:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":573,"name":"uint256","nodeType":"ElementaryTypeName","src":"407:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":576,"mutability":"mutable","name":"numPlayers","nameLocation":"432:10:8","nodeType":"VariableDeclaration","scope":580,"src":"424:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":575,"name":"uint256","nodeType":"ElementaryTypeName","src":"424:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":578,"mutability":"mutable","name":"raffleState","nameLocation":"452:11:8","nodeType":"VariableDeclaration","scope":580,"src":"444:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":577,"name":"uint256","nodeType":"ElementaryTypeName","src":"444:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"406:58:8"},"src":"377:88:8"},{"abstract":false,"baseContracts":[{"baseName":{"id":581,"name":"VRFConsumerBaseV2","nodeType":"IdentifierPath","referencedDeclaration":178,"src":"486:17:8"},"id":582,"nodeType":"InheritanceSpecifier","src":"486:17:8"},{"baseName":{"id":583,"name":"KeeperCompatibleInterface","nodeType":"IdentifierPath","referencedDeclaration":247,"src":"505:25:8"},"id":584,"nodeType":"InheritanceSpecifier","src":"505:25:8"}],"contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":971,"linearizedBaseContracts":[971,247,178],"name":"Raffle","nameLocation":"476:6:8","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Raffle.RaffleState","id":587,"members":[{"id":585,"name":"OPEN","nameLocation":"565:4:8","nodeType":"EnumValue","src":"565:4:8"},{"id":586,"name":"CALCULATING","nameLocation":"580:11:8","nodeType":"EnumValue","src":"580:11:8"}],"name":"RaffleState","nameLocation":"543:11:8","nodeType":"EnumDefinition","src":"538:59:8"},{"constant":false,"id":589,"mutability":"immutable","name":"i_entranceFee","nameLocation":"629:13:8","nodeType":"VariableDeclaration","scope":971,"src":"603:39:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":588,"name":"uint256","nodeType":"ElementaryTypeName","src":"603:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":592,"mutability":"mutable","name":"s_players","nameLocation":"674:9:8","nodeType":"VariableDeclaration","scope":971,"src":"648:35:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[]"},"typeName":{"baseType":{"id":590,"name":"address","nodeType":"ElementaryTypeName","src":"648:15:8","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":591,"nodeType":"ArrayTypeName","src":"648:17:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"private"},{"constant":false,"id":595,"mutability":"immutable","name":"i_vrfCoordinator","nameLocation":"733:16:8","nodeType":"VariableDeclaration","scope":971,"src":"689:60:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$442","typeString":"contract VRFCoordinatorV2Interface"},"typeName":{"id":594,"nodeType":"UserDefinedTypeName","pathNode":{"id":593,"name":"VRFCoordinatorV2Interface","nodeType":"IdentifierPath","referencedDeclaration":442,"src":"689:25:8"},"referencedDeclaration":442,"src":"689:25:8","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$442","typeString":"contract VRFCoordinatorV2Interface"}},"visibility":"private"},{"constant":false,"id":597,"mutability":"immutable","name":"i_gaslane","nameLocation":"781:9:8","nodeType":"VariableDeclaration","scope":971,"src":"755:35:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":596,"name":"bytes32","nodeType":"ElementaryTypeName","src":"755:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":599,"mutability":"immutable","name":"i_subscriptionId","nameLocation":"821:16:8","nodeType":"VariableDeclaration","scope":971,"src":"796:41:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":598,"name":"uint64","nodeType":"ElementaryTypeName","src":"796:6:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"private"},{"constant":true,"id":602,"mutability":"constant","name":"REQUEST_CONFIRMATION","nameLocation":"867:20:8","nodeType":"VariableDeclaration","scope":971,"src":"843:48:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":600,"name":"uint16","nodeType":"ElementaryTypeName","src":"843:6:8","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"value":{"hexValue":"33","id":601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"890:1:8","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"private"},{"constant":false,"id":604,"mutability":"immutable","name":"i_gasLimit","nameLocation":"922:10:8","nodeType":"VariableDeclaration","scope":971,"src":"897:35:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":603,"name":"uint32","nodeType":"ElementaryTypeName","src":"897:6:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"private"},{"constant":true,"id":607,"mutability":"constant","name":"NUM_WORD","nameLocation":"962:8:8","nodeType":"VariableDeclaration","scope":971,"src":"938:36:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":605,"name":"uint32","nodeType":"ElementaryTypeName","src":"938:6:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"value":{"hexValue":"31","id":606,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"973:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":false,"id":609,"mutability":"mutable","name":"s_recentWinner","nameLocation":"998:14:8","nodeType":"VariableDeclaration","scope":971,"src":"982:30:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":608,"name":"address","nodeType":"ElementaryTypeName","src":"982:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"constant":false,"id":612,"mutability":"mutable","name":"s_raffleState","nameLocation":"1039:13:8","nodeType":"VariableDeclaration","scope":971,"src":"1019:33:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$587","typeString":"enum Raffle.RaffleState"},"typeName":{"id":611,"nodeType":"UserDefinedTypeName","pathNode":{"id":610,"name":"RaffleState","nodeType":"IdentifierPath","referencedDeclaration":587,"src":"1019:11:8"},"referencedDeclaration":587,"src":"1019:11:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$587","typeString":"enum Raffle.RaffleState"}},"visibility":"private"},{"constant":false,"id":614,"mutability":"mutable","name":"s_lastTimeStamp","nameLocation":"1074:15:8","nodeType":"VariableDeclaration","scope":971,"src":"1058:31:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":613,"name":"uint256","nodeType":"ElementaryTypeName","src":"1058:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":616,"mutability":"immutable","name":"i_interval","nameLocation":"1121:10:8","nodeType":"VariableDeclaration","scope":971,"src":"1095:36:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":615,"name":"uint256","nodeType":"ElementaryTypeName","src":"1095:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"anonymous":false,"documentation":{"id":617,"nodeType":"StructuredDocumentation","src":"1142:14:8","text":"Events  "},"id":621,"name":"RaffleEnter","nameLocation":"1167:11:8","nodeType":"EventDefinition","parameters":{"id":620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":619,"indexed":true,"mutability":"mutable","name":"player","nameLocation":"1195:6:8","nodeType":"VariableDeclaration","scope":621,"src":"1179:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":618,"name":"address","nodeType":"ElementaryTypeName","src":"1179:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1178:24:8"},"src":"1161:42:8"},{"anonymous":false,"id":625,"name":"requestedRaffleWinner","nameLocation":"1214:21:8","nodeType":"EventDefinition","parameters":{"id":624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":623,"indexed":true,"mutability":"mutable","name":"requestId","nameLocation":"1252:9:8","nodeType":"VariableDeclaration","scope":625,"src":"1236:25:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":622,"name":"uint256","nodeType":"ElementaryTypeName","src":"1236:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1235:27:8"},"src":"1208:55:8"},{"anonymous":false,"id":629,"name":"winnerPicked","nameLocation":"1274:12:8","nodeType":"EventDefinition","parameters":{"id":628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":627,"indexed":true,"mutability":"mutable","name":"winner","nameLocation":"1303:6:8","nodeType":"VariableDeclaration","scope":629,"src":"1287:22:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":626,"name":"address","nodeType":"ElementaryTypeName","src":"1287:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1286:24:8"},"src":"1268:43:8"},{"body":{"id":683,"nodeType":"Block","src":"1545:337:8","statements":[{"expression":{"id":649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":647,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"1555:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":648,"name":"entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"1571:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1555:27:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":650,"nodeType":"ExpressionStatement","src":"1555:27:8"},{"expression":{"id":655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":651,"name":"i_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":595,"src":"1593:16:8","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$442","typeString":"contract VRFCoordinatorV2Interface"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":653,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"1638:16:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":652,"name":"VRFCoordinatorV2Interface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":442,"src":"1612:25:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_VRFCoordinatorV2Interface_$442_$","typeString":"type(contract VRFCoordinatorV2Interface)"}},"id":654,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1612:43:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$442","typeString":"contract VRFCoordinatorV2Interface"}},"src":"1593:62:8","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$442","typeString":"contract VRFCoordinatorV2Interface"}},"id":656,"nodeType":"ExpressionStatement","src":"1593:62:8"},{"expression":{"id":659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":657,"name":"i_gaslane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"1665:9:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":658,"name":"gasLane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":635,"src":"1677:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1665:19:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":660,"nodeType":"ExpressionStatement","src":"1665:19:8"},{"expression":{"id":663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":661,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":599,"src":"1694:16:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":662,"name":"subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":637,"src":"1713:14:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"src":"1694:33:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"id":664,"nodeType":"ExpressionStatement","src":"1694:33:8"},{"expression":{"id":667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":665,"name":"i_gasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"1737:10:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":666,"name":"gasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":639,"src":"1750:8:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"src":"1737:21:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"id":668,"nodeType":"ExpressionStatement","src":"1737:21:8"},{"expression":{"id":672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":669,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"1768:13:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$587","typeString":"enum Raffle.RaffleState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":670,"name":"RaffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"1784:11:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RaffleState_$587_$","typeString":"type(enum Raffle.RaffleState)"}},"id":671,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":585,"src":"1784:16:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$587","typeString":"enum Raffle.RaffleState"}},"src":"1768:32:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$587","typeString":"enum Raffle.RaffleState"}},"id":673,"nodeType":"ExpressionStatement","src":"1768:32:8"},{"expression":{"id":677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":674,"name":"s_lastTimeStamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":614,"src":"1810:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":675,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"1828:5:8","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"1828:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1810:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":678,"nodeType":"ExpressionStatement","src":"1810:33:8"},{"expression":{"id":681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":679,"name":"i_interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"1853:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":680,"name":"interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":641,"src":"1866:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1853:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":682,"nodeType":"ExpressionStatement","src":"1853:21:8"}]},"id":684,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":644,"name":"vrfCoordinatorV2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"1527:16:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":645,"kind":"baseConstructorSpecifier","modifierName":{"id":643,"name":"VRFConsumerBaseV2","nodeType":"IdentifierPath","referencedDeclaration":178,"src":"1509:17:8"},"nodeType":"ModifierInvocation","src":"1509:35:8"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":631,"mutability":"mutable","name":"vrfCoordinatorV2","nameLocation":"1338:16:8","nodeType":"VariableDeclaration","scope":684,"src":"1330:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":630,"name":"address","nodeType":"ElementaryTypeName","src":"1330:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":633,"mutability":"mutable","name":"entranceFee","nameLocation":"1372:11:8","nodeType":"VariableDeclaration","scope":684,"src":"1364:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":632,"name":"uint256","nodeType":"ElementaryTypeName","src":"1364:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":635,"mutability":"mutable","name":"gasLane","nameLocation":"1402:7:8","nodeType":"VariableDeclaration","scope":684,"src":"1394:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":634,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1394:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":637,"mutability":"mutable","name":"subscriptionId","nameLocation":"1427:14:8","nodeType":"VariableDeclaration","scope":684,"src":"1420:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":636,"name":"uint64","nodeType":"ElementaryTypeName","src":"1420:6:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":639,"mutability":"mutable","name":"gasLimit","nameLocation":"1459:8:8","nodeType":"VariableDeclaration","scope":684,"src":"1452:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":638,"name":"uint32","nodeType":"ElementaryTypeName","src":"1452:6:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":641,"mutability":"mutable","name":"interval","nameLocation":"1485:8:8","nodeType":"VariableDeclaration","scope":684,"src":"1477:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":640,"name":"uint256","nodeType":"ElementaryTypeName","src":"1477:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1329:174:8"},"returnParameters":{"id":646,"nodeType":"ParameterList","parameters":[],"src":"1545:0:8"},"scope":971,"src":"1317:565:8","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":720,"nodeType":"Block","src":"1926:290:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":687,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1940:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"value","nodeType":"MemberAccess","src":"1940:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":689,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"1952:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1940:25:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":695,"nodeType":"IfStatement","src":"1936:92:8","trueBody":{"id":694,"nodeType":"Block","src":"1967:61:8","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":691,"name":"Raffle__NotEnoughETHEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":568,"src":"1988:27:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1988:29:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":693,"nodeType":"RevertStatement","src":"1981:36:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_enum$_RaffleState_$587","typeString":"enum Raffle.RaffleState"},"id":699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":696,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"2042:13:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$587","typeString":"enum Raffle.RaffleState"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":697,"name":"RaffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"2059:11:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RaffleState_$587_$","typeString":"type(enum Raffle.RaffleState)"}},"id":698,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":585,"src":"2059:16:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$587","typeString":"enum Raffle.RaffleState"}},"src":"2042:33:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":704,"nodeType":"IfStatement","src":"2038:88:8","trueBody":{"id":703,"nodeType":"Block","src":"2077:49:8","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":700,"name":"Raffle__NotOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":572,"src":"2098:15:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":701,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2098:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":702,"nodeType":"RevertStatement","src":"2091:24:8"}]}},{"expression":{"arguments":[{"arguments":[{"expression":{"id":710,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2159:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2159:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":709,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2151:8:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_payable_$","typeString":"type(address payable)"},"typeName":{"id":708,"name":"address","nodeType":"ElementaryTypeName","src":"2151:8:8","stateMutability":"payable","typeDescriptions":{}}},"id":712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2151:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"id":705,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"2136:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"push","nodeType":"MemberAccess","src":"2136:14:8","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_payable_$dyn_storage_ptr_$_t_address_payable_$returns$__$bound_to$_t_array$_t_address_payable_$dyn_storage_ptr_$","typeString":"function (address payable[] storage pointer,address payable)"}},"id":713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2136:35:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":714,"nodeType":"ExpressionStatement","src":"2136:35:8"},{"eventCall":{"arguments":[{"expression":{"id":716,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2198:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"sender","nodeType":"MemberAccess","src":"2198:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":715,"name":"RaffleEnter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":621,"src":"2186:11:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":718,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2186:23:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":719,"nodeType":"EmitStatement","src":"2181:28:8"}]},"functionSelector":"2cfcc539","id":721,"implemented":true,"kind":"function","modifiers":[],"name":"enterRaffle","nameLocation":"1897:11:8","nodeType":"FunctionDefinition","parameters":{"id":685,"nodeType":"ParameterList","parameters":[],"src":"1908:2:8"},"returnParameters":{"id":686,"nodeType":"ParameterList","parameters":[],"src":"1926:0:8"},"scope":971,"src":"1888:328:8","stateMutability":"payable","virtual":false,"visibility":"public"},{"baseFunctions":[246],"body":{"id":771,"nodeType":"Block","src":"2287:546:8","statements":[{"assignments":[728,null],"declarations":[{"constant":false,"id":728,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"2302:12:8","nodeType":"VariableDeclaration","scope":771,"src":"2297:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":727,"name":"bool","nodeType":"ElementaryTypeName","src":"2297:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":732,"initialValue":{"arguments":[{"hexValue":"","id":730,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2332:2:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":729,"name":"checkUpkeep","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":829,"src":"2320:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":731,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2320:15:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2296:39:8"},{"condition":{"id":734,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"2348:13:8","subExpression":{"id":733,"name":"upkeepNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":728,"src":"2349:12:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":750,"nodeType":"IfStatement","src":"2344:180:8","trueBody":{"id":749,"nodeType":"Block","src":"2363:161:8","statements":[{"errorCall":{"arguments":[{"expression":{"arguments":[{"id":738,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2425:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_Raffle_$971","typeString":"contract Raffle"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Raffle_$971","typeString":"contract Raffle"}],"id":737,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2417:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":736,"name":"address","nodeType":"ElementaryTypeName","src":"2417:7:8","typeDescriptions":{}}},"id":739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2417:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"2417:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":741,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"2452:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"2452:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":745,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"2490:13:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$587","typeString":"enum Raffle.RaffleState"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RaffleState_$587","typeString":"enum Raffle.RaffleState"}],"id":744,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2482:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":743,"name":"uint256","nodeType":"ElementaryTypeName","src":"2482:7:8","typeDescriptions":{}}},"id":746,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2482:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":735,"name":"Raffle__UpkeepNotNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":580,"src":"2380:23:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,uint256) pure"}},"id":747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2380:134:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":748,"nodeType":"RevertStatement","src":"2373:141:8"}]}},{"expression":{"id":754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":751,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"2532:13:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$587","typeString":"enum Raffle.RaffleState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":752,"name":"RaffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"2548:11:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RaffleState_$587_$","typeString":"type(enum Raffle.RaffleState)"}},"id":753,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"CALCULATING","nodeType":"MemberAccess","referencedDeclaration":586,"src":"2548:23:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$587","typeString":"enum Raffle.RaffleState"}},"src":"2532:39:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$587","typeString":"enum Raffle.RaffleState"}},"id":755,"nodeType":"ExpressionStatement","src":"2532:39:8"},{"assignments":[757],"declarations":[{"constant":false,"id":757,"mutability":"mutable","name":"requestID","nameLocation":"2588:9:8","nodeType":"VariableDeclaration","scope":771,"src":"2580:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":756,"name":"uint256","nodeType":"ElementaryTypeName","src":"2580:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":766,"initialValue":{"arguments":[{"id":760,"name":"i_gaslane","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":597,"src":"2650:9:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":761,"name":"i_subscriptionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":599,"src":"2673:16:8","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},{"id":762,"name":"REQUEST_CONFIRMATION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"2703:20:8","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},{"id":763,"name":"i_gasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"2737:10:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},{"id":764,"name":"NUM_WORD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":607,"src":"2761:8:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint64","typeString":"uint64"},{"typeIdentifier":"t_uint16","typeString":"uint16"},{"typeIdentifier":"t_uint32","typeString":"uint32"},{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":758,"name":"i_vrfCoordinator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":595,"src":"2601:16:8","typeDescriptions":{"typeIdentifier":"t_contract$_VRFCoordinatorV2Interface_$442","typeString":"contract VRFCoordinatorV2Interface"}},"id":759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"requestRandomWords","nodeType":"MemberAccess","referencedDeclaration":375,"src":"2601:35:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_bytes32_$_t_uint64_$_t_uint16_$_t_uint32_$_t_uint32_$returns$_t_uint256_$","typeString":"function (bytes32,uint64,uint16,uint32,uint32) external returns (uint256)"}},"id":765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2601:178:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2580:199:8"},{"eventCall":{"arguments":[{"id":768,"name":"requestID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"2816:9:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":767,"name":"requestedRaffleWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"2794:21:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":769,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2794:32:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":770,"nodeType":"EmitStatement","src":"2789:37:8"}]},"functionSelector":"4585e33b","id":772,"implemented":true,"kind":"function","modifiers":[],"name":"performUpkeep","nameLocation":"2231:13:8","nodeType":"FunctionDefinition","overrides":{"id":725,"nodeType":"OverrideSpecifier","overrides":[],"src":"2277:8:8"},"parameters":{"id":724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":723,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":772,"src":"2245:14:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":722,"name":"bytes","nodeType":"ElementaryTypeName","src":"2245:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2244:23:8"},"returnParameters":{"id":726,"nodeType":"ParameterList","parameters":[],"src":"2287:0:8"},"scope":971,"src":"2222:611:8","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[240],"body":{"id":828,"nodeType":"Block","src":"2953:319:8","statements":[{"assignments":[783],"declarations":[{"constant":false,"id":783,"mutability":"mutable","name":"isOpen","nameLocation":"2968:6:8","nodeType":"VariableDeclaration","scope":828,"src":"2963:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":782,"name":"bool","nodeType":"ElementaryTypeName","src":"2963:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":788,"initialValue":{"commonType":{"typeIdentifier":"t_enum$_RaffleState_$587","typeString":"enum Raffle.RaffleState"},"id":787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":784,"name":"RaffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"2977:11:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RaffleState_$587_$","typeString":"type(enum Raffle.RaffleState)"}},"id":785,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":585,"src":"2977:16:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$587","typeString":"enum Raffle.RaffleState"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":786,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"2997:13:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$587","typeString":"enum Raffle.RaffleState"}},"src":"2977:33:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"2963:47:8"},{"assignments":[790],"declarations":[{"constant":false,"id":790,"mutability":"mutable","name":"timePassed","nameLocation":"3025:10:8","nodeType":"VariableDeclaration","scope":828,"src":"3020:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":789,"name":"bool","nodeType":"ElementaryTypeName","src":"3020:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":799,"initialValue":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":791,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3040:5:8","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"3040:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":793,"name":"s_lastTimeStamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":614,"src":"3058:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3040:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":795,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3039:35:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":796,"name":"i_interval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"3077:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3039:48:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":798,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3038:50:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3020:68:8"},{"assignments":[801],"declarations":[{"constant":false,"id":801,"mutability":"mutable","name":"hasPlayers","nameLocation":"3103:10:8","nodeType":"VariableDeclaration","scope":828,"src":"3098:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":800,"name":"bool","nodeType":"ElementaryTypeName","src":"3098:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":806,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":802,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"3116:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3116:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3135:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3116:20:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3098:38:8"},{"assignments":[808],"declarations":[{"constant":false,"id":808,"mutability":"mutable","name":"hasBalance","nameLocation":"3151:10:8","nodeType":"VariableDeclaration","scope":828,"src":"3146:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":807,"name":"bool","nodeType":"ElementaryTypeName","src":"3146:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":816,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":811,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3172:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_Raffle_$971","typeString":"contract Raffle"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Raffle_$971","typeString":"contract Raffle"}],"id":810,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3164:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":809,"name":"address","nodeType":"ElementaryTypeName","src":"3164:7:8","typeDescriptions":{}}},"id":812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3164:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"3164:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":814,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3188:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3164:25:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"3146:43:8"},{"expression":{"id":826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":817,"name":"upkeepNeeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":778,"src":"3199:12:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":818,"name":"isOpen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":783,"src":"3215:6:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":819,"name":"timePassed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":790,"src":"3225:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3215:20:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":821,"name":"hasPlayers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"3239:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3215:34:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":823,"name":"hasBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"3253:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3215:48:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":825,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3214:50:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3199:65:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":827,"nodeType":"ExpressionStatement","src":"3199:65:8"}]},"functionSelector":"6e04ff0d","id":829,"implemented":true,"kind":"function","modifiers":[],"name":"checkUpkeep","nameLocation":"2848:11:8","nodeType":"FunctionDefinition","overrides":{"id":776,"nodeType":"OverrideSpecifier","overrides":[],"src":"2897:8:8"},"parameters":{"id":775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":774,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":829,"src":"2860:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":773,"name":"bytes","nodeType":"ElementaryTypeName","src":"2860:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2859:30:8"},"returnParameters":{"id":781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":778,"mutability":"mutable","name":"upkeepNeeded","nameLocation":"2920:12:8","nodeType":"VariableDeclaration","scope":829,"src":"2915:17:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":777,"name":"bool","nodeType":"ElementaryTypeName","src":"2915:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":780,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":829,"src":"2934:12:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":779,"name":"bytes","nodeType":"ElementaryTypeName","src":"2934:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2914:38:8"},"scope":971,"src":"2839:433:8","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[151],"body":{"id":899,"nodeType":"Block","src":"3380:511:8","statements":[{"assignments":[839],"declarations":[{"constant":false,"id":839,"mutability":"mutable","name":"indexOfWinner","nameLocation":"3398:13:8","nodeType":"VariableDeclaration","scope":899,"src":"3390:21:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":838,"name":"uint256","nodeType":"ElementaryTypeName","src":"3390:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":846,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":840,"name":"randomWords","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"3414:11:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":842,"indexExpression":{"hexValue":"30","id":841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3426:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3414:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"expression":{"id":843,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"3431:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"3431:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3414:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3390:57:8"},{"assignments":[848],"declarations":[{"constant":false,"id":848,"mutability":"mutable","name":"recentWinner","nameLocation":"3473:12:8","nodeType":"VariableDeclaration","scope":899,"src":"3457:28:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":847,"name":"address","nodeType":"ElementaryTypeName","src":"3457:15:8","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"id":852,"initialValue":{"baseExpression":{"id":849,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"3488:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":851,"indexExpression":{"id":850,"name":"indexOfWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"3498:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3488:24:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"3457:55:8"},{"expression":{"id":855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":853,"name":"s_recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"3522:14:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":854,"name":"recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"3539:12:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"3522:29:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":856,"nodeType":"ExpressionStatement","src":"3522:29:8"},{"expression":{"id":860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":857,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"3561:13:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$587","typeString":"enum Raffle.RaffleState"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":858,"name":"RaffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"3577:11:8","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RaffleState_$587_$","typeString":"type(enum Raffle.RaffleState)"}},"id":859,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberName":"OPEN","nodeType":"MemberAccess","referencedDeclaration":585,"src":"3577:16:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$587","typeString":"enum Raffle.RaffleState"}},"src":"3561:32:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$587","typeString":"enum Raffle.RaffleState"}},"id":861,"nodeType":"ExpressionStatement","src":"3561:32:8"},{"expression":{"id":868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":862,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"3603:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3637:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":865,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"3615:21:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_payable_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (address payable[] memory)"},"typeName":{"baseType":{"id":863,"name":"address","nodeType":"ElementaryTypeName","src":"3619:15:8","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":864,"nodeType":"ArrayTypeName","src":"3619:17:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}}},"id":867,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3615:24:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_memory_ptr","typeString":"address payable[] memory"}},"src":"3603:36:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":869,"nodeType":"ExpressionStatement","src":"3603:36:8"},{"expression":{"id":873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":870,"name":"s_lastTimeStamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":614,"src":"3649:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":871,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3667:5:8","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"timestamp","nodeType":"MemberAccess","src":"3667:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3649:33:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":874,"nodeType":"ExpressionStatement","src":"3649:33:8"},{"assignments":[876,null],"declarations":[{"constant":false,"id":876,"mutability":"mutable","name":"success","nameLocation":"3698:7:8","nodeType":"VariableDeclaration","scope":899,"src":"3693:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":875,"name":"bool","nodeType":"ElementaryTypeName","src":"3693:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":887,"initialValue":{"arguments":[{"hexValue":"","id":885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3761:2:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":877,"name":"recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"3711:12:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"call","nodeType":"MemberAccess","src":"3711:17:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"arguments":[{"id":881,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3745:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_Raffle_$971","typeString":"contract Raffle"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Raffle_$971","typeString":"contract Raffle"}],"id":880,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3737:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":879,"name":"address","nodeType":"ElementaryTypeName","src":"3737:7:8","typeDescriptions":{}}},"id":882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3737:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":883,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"balance","nodeType":"MemberAccess","src":"3737:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3711:49:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":886,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3711:53:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"3692:72:8"},{"condition":{"id":889,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3778:8:8","subExpression":{"id":888,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":876,"src":"3779:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":894,"nodeType":"IfStatement","src":"3774:70:8","trueBody":{"id":893,"nodeType":"Block","src":"3788:56:8","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":890,"name":"Raffle__TransferFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":570,"src":"3809:22:8","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3809:24:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":892,"nodeType":"RevertStatement","src":"3802:31:8"}]}},{"eventCall":{"arguments":[{"id":896,"name":"recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":848,"src":"3871:12:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"id":895,"name":"winnerPicked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":629,"src":"3858:12:8","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":897,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"3858:26:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":898,"nodeType":"EmitStatement","src":"3853:31:8"}]},"id":900,"implemented":true,"kind":"function","modifiers":[],"name":"fulfillRandomWords","nameLocation":"3287:18:8","nodeType":"FunctionDefinition","overrides":{"id":836,"nodeType":"OverrideSpecifier","overrides":[],"src":"3371:8:8"},"parameters":{"id":835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":831,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":900,"src":"3307:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":830,"name":"uint256","nodeType":"ElementaryTypeName","src":"3307:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":834,"mutability":"mutable","name":"randomWords","nameLocation":"3348:11:8","nodeType":"VariableDeclaration","scope":900,"src":"3331:28:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":832,"name":"uint256","nodeType":"ElementaryTypeName","src":"3331:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":833,"nodeType":"ArrayTypeName","src":"3331:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3305:56:8"},"returnParameters":{"id":837,"nodeType":"ParameterList","parameters":[],"src":"3380:0:8"},"scope":971,"src":"3278:613:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":907,"nodeType":"Block","src":"3953:37:8","statements":[{"expression":{"id":905,"name":"i_entranceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"3970:13:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":904,"id":906,"nodeType":"Return","src":"3963:20:8"}]},"functionSelector":"09bc33a7","id":908,"implemented":true,"kind":"function","modifiers":[],"name":"getEntranceFee","nameLocation":"3906:14:8","nodeType":"FunctionDefinition","parameters":{"id":901,"nodeType":"ParameterList","parameters":[],"src":"3920:2:8"},"returnParameters":{"id":904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":903,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":908,"src":"3944:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":902,"name":"uint256","nodeType":"ElementaryTypeName","src":"3944:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3943:9:8"},"scope":971,"src":"3897:93:8","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":919,"nodeType":"Block","src":"4061:40:8","statements":[{"expression":{"baseExpression":{"id":915,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"4078:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":917,"indexExpression":{"id":916,"name":"index","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"4088:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4078:16:8","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":914,"id":918,"nodeType":"Return","src":"4071:23:8"}]},"functionSelector":"460e2049","id":920,"implemented":true,"kind":"function","modifiers":[],"name":"getPlayers","nameLocation":"4005:10:8","nodeType":"FunctionDefinition","parameters":{"id":911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":910,"mutability":"mutable","name":"index","nameLocation":"4024:5:8","nodeType":"VariableDeclaration","scope":920,"src":"4016:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":909,"name":"uint256","nodeType":"ElementaryTypeName","src":"4016:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4015:15:8"},"returnParameters":{"id":914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":913,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":920,"src":"4052:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":912,"name":"address","nodeType":"ElementaryTypeName","src":"4052:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4051:9:8"},"scope":971,"src":"3996:105:8","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":927,"nodeType":"Block","src":"4164:38:8","statements":[{"expression":{"id":925,"name":"s_recentWinner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"4181:14:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":924,"id":926,"nodeType":"Return","src":"4174:21:8"}]},"functionSelector":"473f1ddc","id":928,"implemented":true,"kind":"function","modifiers":[],"name":"getRecentWinner","nameLocation":"4116:15:8","nodeType":"FunctionDefinition","parameters":{"id":921,"nodeType":"ParameterList","parameters":[],"src":"4131:2:8"},"returnParameters":{"id":924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":923,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":928,"src":"4155:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":922,"name":"address","nodeType":"ElementaryTypeName","src":"4155:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4154:9:8"},"scope":971,"src":"4107:95:8","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":936,"nodeType":"Block","src":"4268:37:8","statements":[{"expression":{"id":934,"name":"s_raffleState","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":612,"src":"4285:13:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$587","typeString":"enum Raffle.RaffleState"}},"functionReturnParameters":933,"id":935,"nodeType":"Return","src":"4278:20:8"}]},"functionSelector":"115cbaf5","id":937,"implemented":true,"kind":"function","modifiers":[],"name":"getRaffleState","nameLocation":"4217:14:8","nodeType":"FunctionDefinition","parameters":{"id":929,"nodeType":"ParameterList","parameters":[],"src":"4231:2:8"},"returnParameters":{"id":933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":932,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":937,"src":"4255:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$587","typeString":"enum Raffle.RaffleState"},"typeName":{"id":931,"nodeType":"UserDefinedTypeName","pathNode":{"id":930,"name":"RaffleState","nodeType":"IdentifierPath","referencedDeclaration":587,"src":"4255:11:8"},"referencedDeclaration":587,"src":"4255:11:8","typeDescriptions":{"typeIdentifier":"t_enum$_RaffleState_$587","typeString":"enum Raffle.RaffleState"}},"visibility":"internal"}],"src":"4254:13:8"},"scope":971,"src":"4208:97:8","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":944,"nodeType":"Block","src":"4364:32:8","statements":[{"expression":{"id":942,"name":"NUM_WORD","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":607,"src":"4381:8:8","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"functionReturnParameters":941,"id":943,"nodeType":"Return","src":"4374:15:8"}]},"functionSelector":"53a2c19a","id":945,"implemented":true,"kind":"function","modifiers":[],"name":"getNumWords","nameLocation":"4320:11:8","nodeType":"FunctionDefinition","parameters":{"id":938,"nodeType":"ParameterList","parameters":[],"src":"4331:2:8"},"returnParameters":{"id":941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":940,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":945,"src":"4355:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":939,"name":"uint256","nodeType":"ElementaryTypeName","src":"4355:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4354:9:8"},"scope":971,"src":"4311:85:8","stateMutability":"pure","virtual":false,"visibility":"public"},{"body":{"id":953,"nodeType":"Block","src":"4462:40:8","statements":[{"expression":{"expression":{"id":950,"name":"s_players","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"4479:9:8","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage","typeString":"address payable[] storage ref"}},"id":951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberName":"length","nodeType":"MemberAccess","src":"4479:16:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":949,"id":952,"nodeType":"Return","src":"4472:23:8"}]},"functionSelector":"fd6673f5","id":954,"implemented":true,"kind":"function","modifiers":[],"name":"getNumberOfPlayers","nameLocation":"4411:18:8","nodeType":"FunctionDefinition","parameters":{"id":946,"nodeType":"ParameterList","parameters":[],"src":"4429:2:8"},"returnParameters":{"id":949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":948,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":954,"src":"4453:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":947,"name":"uint256","nodeType":"ElementaryTypeName","src":"4453:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4452:9:8"},"scope":971,"src":"4402:100:8","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":961,"nodeType":"Block","src":"4566:39:8","statements":[{"expression":{"id":959,"name":"s_lastTimeStamp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":614,"src":"4583:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":958,"id":960,"nodeType":"Return","src":"4576:22:8"}]},"functionSelector":"c1c244e8","id":962,"implemented":true,"kind":"function","modifiers":[],"name":"getLastTimeStamp","nameLocation":"4517:16:8","nodeType":"FunctionDefinition","parameters":{"id":955,"nodeType":"ParameterList","parameters":[],"src":"4533:2:8"},"returnParameters":{"id":958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":957,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":962,"src":"4557:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":956,"name":"uint256","nodeType":"ElementaryTypeName","src":"4557:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4556:9:8"},"scope":971,"src":"4508:97:8","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":969,"nodeType":"Block","src":"4675:44:8","statements":[{"expression":{"id":967,"name":"REQUEST_CONFIRMATION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"4692:20:8","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"functionReturnParameters":966,"id":968,"nodeType":"Return","src":"4685:27:8"}]},"functionSelector":"ca6a9ef8","id":970,"implemented":true,"kind":"function","modifiers":[],"name":"getRequestConfirmation","nameLocation":"4620:22:8","nodeType":"FunctionDefinition","parameters":{"id":963,"nodeType":"ParameterList","parameters":[],"src":"4642:2:8"},"returnParameters":{"id":966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":965,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":970,"src":"4666:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":964,"name":"uint256","nodeType":"ElementaryTypeName","src":"4666:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4665:9:8"},"scope":971,"src":"4611:108:8","stateMutability":"pure","virtual":false,"visibility":"public"}],"scope":972,"src":"467:4255:8","usedErrors":[129,568,570,572,580]}],"src":"33:4689:8"},"id":8},"contracts/mocks/VRFCoordinatorV2Mock.sol":{"ast":{"absolutePath":"contracts/mocks/VRFCoordinatorV2Mock.sol","exportedSymbols":{"LinkTokenInterface":[346],"VRFConsumerBase":[120],"VRFCoordinatorMock":[561],"VRFRequestIDBase":[228]},"id":975,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":973,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"33:23:9"},{"absolutePath":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol","file":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol","id":974,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":975,"sourceUnit":562,"src":"58:68:9","symbolAliases":[],"unitAlias":""}],"src":"33:94:9"},"id":9}},"contracts":{"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol":{"VRFConsumerBase":{"abi":[{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"uint256","name":"randomness","type":"uint256"}],"name":"rawFulfillRandomness","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator, _link) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash), and have told you the minimum LINKprice for VRF service. Make sure your contract has sufficient LINK, andcall requestRandomness(keyHash, fee, seed), where seed is the input youwant to generate randomness from.Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomness method.The randomness argument to fulfillRandomness is the actual random valuegenerated from your seed.The requestId argument is generated from the keyHash and the seed bymakeRequestId(keyHash, seed). If your contract could have concurrentrequests open, you can use the requestId to track which seed isassociated with which randomness. See VRFRequestIDBase.sol for moredetails. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.)Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. (Which is critical to making unpredictable randomness! See thenext section.) *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the ultimate input to the VRF is mixed with the block hash of theblock in which the request is made, user-provided seeds have no impacton its economic security properties. They are only included for APIcompatability with previous versions of this contract.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request.","kind":"dev","methods":{"constructor":{"details":"https://docs.chain.link/docs/link-token-contracts","params":{"_link":"address of LINK token contract","_vrfCoordinator":"address of VRFCoordinator contract"}}},"stateVariables":{"USER_SEED_PLACEHOLDER":{"details":"In order to keep backwards compatibility we have kept the user seed field around. We remove the use of it because given that the blockhash enters later, it overrides whatever randomness the used seed provides. Given that it adds no security, and can easily lead to misunderstandings, we have removed it from usage and can now provide a simpler API."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"rawFulfillRandomness(bytes32,uint256)":"94985ddd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator, _link) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash), and have told you the minimum LINKprice for VRF service. Make sure your contract has sufficient LINK, andcall requestRandomness(keyHash, fee, seed), where seed is the input youwant to generate randomness from.Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomness method.The randomness argument to fulfillRandomness is the actual random valuegenerated from your seed.The requestId argument is generated from the keyHash and the seed bymakeRequestId(keyHash, seed). If your contract could have concurrentrequests open, you can use the requestId to track which seed isassociated with which randomness. See VRFRequestIDBase.sol for moredetails. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.)Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. (Which is critical to making unpredictable randomness! See thenext section.) *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the ultimate input to the VRF is mixed with the block hash of theblock in which the request is made, user-provided seeds have no impacton its economic security properties. They are only included for APIcompatability with previous versions of this contract.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"https://docs.chain.link/docs/link-token-contracts\",\"params\":{\"_link\":\"address of LINK token contract\",\"_vrfCoordinator\":\"address of VRFCoordinator contract\"}}},\"stateVariables\":{\"USER_SEED_PLACEHOLDER\":{\"details\":\"In order to keep backwards compatibility we have kept the user seed field around. We remove the use of it because given that the blockhash enters later, it overrides whatever randomness the used seed provides. Given that it adds no security, and can easily lead to misunderstandings, we have removed it from usage and can now provide a simpler API.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":\"VRFConsumerBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal immutable LINK;\\n  address private immutable vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\\n    private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0xff9e7d773545a1a5d73106e72bfb429da79c1cc4d893fb62051df801d2e61469\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x2bf1168e8fe548fa990e0aeaf89ef90680f80aa31eeaf901f485df60de51d51b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":79,"contract":"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol:VRFConsumerBase","label":"nonces","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_uint256)"}],"types":{"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_uint256)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"notice":"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************","version":1}}},"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol":{"VRFConsumerBaseV2":{"abi":[{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).","kind":"dev","methods":{"constructor":{"params":{"_vrfCoordinator":"address of VRFCoordinator contract"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"rawFulfillRandomWords(uint256,uint256[])":"1fe543e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"PURPOSEReggie the Random Oracle (not his real job) wants to provide randomnessto Vera the verifier in such a way that Vera can be sure he's notmaking his output up to suit himself. Reggie provides Vera a public keyto which he knows the secret key. Each time Vera provides a seed toReggie, he gives back a value which is computed completelydeterministically from the seed and the secret key.Reggie provides a proof by which Vera can verify that the output wascorrectly computed once Reggie tells it to her, but without that proof,the output is indistinguishable to her from a uniform random samplefrom the output space.The purpose of this contract is to make it easy for unrelated contractsto talk to Vera the verifier about the work Reggie is doing, to providesimple access to a verifiable source of randomness. It ensures 2 things:1. The fulfillment came from the VRFCoordinator2. The consumer contract implements fulfillRandomWords. *****************************************************************************USAGECalling contracts must inherit from VRFConsumerBase, and caninitialize VRFConsumerBase's attributes in their constructor asshown:contract VRFConsumer {constructor(<other arguments>, address _vrfCoordinator, address _link)VRFConsumerBase(_vrfCoordinator) public {<initialization with other arguments goes here>}}The oracle will have given you an ID for the VRF keypair they havecommitted to (let's call it keyHash). Create subscription, fund itand your consumer contract as a consumer of it (see VRFCoordinatorInterfacesubscription management functions).Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,callbackGasLimit, numWords),see (VRFCoordinatorInterface for a description of the arguments).Once the VRFCoordinator has received and validated the oracle's responseto your request, it will call your contract's fulfillRandomWords method.The randomness argument to fulfillRandomWords is a set of random wordsgenerated from your requestId and the blockHash of the request.If your contract could have concurrent requests open, you can use therequestId returned from requestRandomWords to track which response is associatedwith which randomness request.See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,if your contract could have multiple requests in flight simultaneously.Colliding `requestId`s are cryptographically impossible as long as seedsdiffer. *****************************************************************************SECURITY CONSIDERATIONSA method with the ability to call your fulfillRandomness method directlycould spoof a VRF response with any random value, so it's critical thatit cannot be directly called by anything other than this base contract(specifically, by the VRFConsumerBase.rawFulfillRandomness method).For your users to trust that your contract's random behavior is freefrom malicious interference, it's best if you can write it so that allbehaviors implied by a VRF response are executed *during* yourfulfillRandomness method. If your contract must store the response (oranything derived from it) and use it later, you must ensure that anyuser-significant behavior which depends on that stored value cannot bemanipulated by a subsequent VRF request.Similarly, both miners and the VRF oracle itself have some influenceover the order in which VRF responses appear on the blockchain, so ifyour contract could have multiple VRF requests in flight simultaneously,you must ensure that the order in which the VRF responses arrive cannotbe used to manipulate your contract's user-significant behavior.Since the block hash of the block which contains the requestRandomnesscall is mixed into the input to the VRF *last*, a sufficiently powerfulminer could, in principle, fork the blockchain to evict the blockcontaining the request, forcing the request to be included in adifferent block with a different hash, and therefore a different inputto the VRF. However, such an attack would incur a substantial economiccost. This cost scales with the number of blocks the VRF oracle waitsuntil it calls responds to a request. It is for this reason thatthat you can signal to an oracle you'd like them to wait longer beforeresponding to the request (however this is not enforced in the contractand so remains effective only in the case of unmodified oracle software).\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_vrfCoordinator\":\"address of VRFCoordinator contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":\"VRFConsumerBaseV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"****************************************************************************Interface for contracts using VRF randomness *****************************************************************************","version":1}}},"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol":{"VRFRequestIDBase":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220afa09e35821c74dbe3634e19ceea3e305e8e2e5f7eb5708695e60083c91ea08364736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF LOG0 SWAP15 CALLDATALOAD DUP3 SHR PUSH21 0xDBE3634E19CEEA3E305E8E2E5F7EB5708695E60083 0xC9 0x1E LOG0 DUP4 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"57:1527:2:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"6080604052600080fdfea2646970667358221220afa09e35821c74dbe3634e19ceea3e305e8e2e5f7eb5708695e60083c91ea08364736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF LOG0 SWAP15 CALLDATALOAD DUP3 SHR PUSH21 0xDBE3634E19CEEA3E305E8E2E5F7EB5708695E60083 0xC9 0x1E LOG0 DUP4 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ","sourceMap":"57:1527:2:-:0;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"12600","executionCost":"66","totalCost":"12666"},"internal":{"makeRequestId(bytes32,uint256)":"infinite","makeVRFInputSeed(bytes32,uint256,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":\"VRFRequestIDBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x2bf1168e8fe548fa990e0aeaf89ef90680f80aa31eeaf901f485df60de51d51b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol":{"AutomationCompatibleInterface":{"abi":[{"inputs":[{"internalType":"bytes","name":"checkData","type":"bytes"}],"name":"checkUpkeep","outputs":[{"internalType":"bool","name":"upkeepNeeded","type":"bool"},{"internalType":"bytes","name":"performData","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"performData","type":"bytes"}],"name":"performUpkeep","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"checkUpkeep(bytes)":{"details":"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.","params":{"checkData":"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract."},"returns":{"performData":"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.","upkeepNeeded":"boolean to indicate whether the keeper should call performUpkeep or not."}},"performUpkeep(bytes)":{"details":"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.","params":{"performData":"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"checkUpkeep(bytes)":"6e04ff0d","performUpkeep(bytes)":"4585e33b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"To ensure that it is never called, you may want to add the cannotExecute modifier from KeeperBase to your implementation of this method.\",\"params\":{\"checkData\":\"specified in the upkeep registration so it is always the same for a registered upkeep. This can easily be broken down into specific arguments using `abi.decode`, so multiple upkeeps can be registered on the same contract and easily differentiated by the contract.\"},\"returns\":{\"performData\":\"bytes that the keeper should call performUpkeep with, if upkeep is needed. If you would like to encode data to decode later, try `abi.encode`.\",\"upkeepNeeded\":\"boolean to indicate whether the keeper should call performUpkeep or not.\"}},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas.\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":\"AutomationCompatibleInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"checkUpkeep(bytes)":{"notice":"method that is simulated by the keepers to see if any work actually needs to be performed. This method does does not actually need to be executable, and since it is only ever simulated it can consume lots of gas."},"performUpkeep(bytes)":{"notice":"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."}},"version":1}}},"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol":{"LinkTokenInterface":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"remaining","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"decimalPlaces","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"decreaseApproval","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"increaseApproval","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"tokenName","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"tokenSymbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"totalTokensIssued","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"success","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseApproval(address,uint256)":"66188463","increaseApproval(address,uint256)":"d73dd623","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferAndCall(address,uint256,bytes)":"4000aea0","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimalPlaces\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTokensIssued\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":\"LinkTokenInterface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol":{"VRFCoordinatorV2Interface":{"abi":[{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"acceptSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"addConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"to","type":"address"}],"name":"cancelSubscription","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"createSubscription","outputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getRequestConfig","outputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"getSubscription","outputs":[{"internalType":"uint96","name":"balance","type":"uint96"},{"internalType":"uint64","name":"reqCount","type":"uint64"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address[]","name":"consumers","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"}],"name":"pendingRequestExists","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"consumer","type":"address"}],"name":"removeConsumer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"uint16","name":"minimumRequestConfirmations","type":"uint16"},{"internalType":"uint32","name":"callbackGasLimit","type":"uint32"},{"internalType":"uint32","name":"numWords","type":"uint32"}],"name":"requestRandomWords","outputs":[{"internalType":"uint256","name":"requestId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint64","name":"subId","type":"uint64"},{"internalType":"address","name":"newOwner","type":"address"}],"name":"requestSubscriptionOwnerTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"details":"will revert if original owner of subId has not requested that msg.sender become the new owner.","params":{"subId":"- ID of the subscription"}},"addConsumer(uint64,address)":{"params":{"consumer":"- New consumer which can use the subscription","subId":"- ID of the subscription"}},"cancelSubscription(uint64,address)":{"params":{"subId":"- ID of the subscription","to":"- Where to send the remaining LINK to"}},"createSubscription()":{"details":"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));","returns":{"subId":"- A unique subscription id."}},"getRequestConfig()":{"returns":{"_0":"minimumRequestConfirmations global min for request confirmations","_1":"maxGasLimit global max for request gas limit","_2":"s_provingKeyHashes list of registered key hashes"}},"getSubscription(uint64)":{"params":{"subId":"- ID of the subscription"},"returns":{"balance":"- LINK balance of the subscription in juels.","consumers":"- list of consumer address which are able to use this subscription.","owner":"- owner of the subscription.","reqCount":"- number of requests for this subscription, determines fee tier."}},"removeConsumer(uint64,address)":{"params":{"consumer":"- Consumer to remove from the subscription","subId":"- ID of the subscription"}},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"params":{"callbackGasLimit":"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]","keyHash":"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.","minimumRequestConfirmations":"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].","numWords":"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.","subId":"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash."},"returns":{"requestId":"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords."}},"requestSubscriptionOwnerTransfer(uint64,address)":{"params":{"newOwner":"- proposed new owner of the subscription","subId":"- ID of the subscription"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"acceptSubscriptionOwnerTransfer(uint64)":"82359740","addConsumer(uint64,address)":"7341c10c","cancelSubscription(uint64,address)":"d7ae1d30","createSubscription()":"a21a23e4","getRequestConfig()":"00012291","getSubscription(uint64)":"a47c7696","pendingRequestExists(uint64)":"e82ad7d4","removeConsumer(uint64,address)":"9f87fad7","requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":"5d3b1d30","requestSubscriptionOwnerTransfer(uint64,address)":"04c357cb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"details\":\"will revert if original owner of subId has not requested that msg.sender become the new owner.\",\"params\":{\"subId\":\"- ID of the subscription\"}},\"addConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- New consumer which can use the subscription\",\"subId\":\"- ID of the subscription\"}},\"cancelSubscription(uint64,address)\":{\"params\":{\"subId\":\"- ID of the subscription\",\"to\":\"- Where to send the remaining LINK to\"}},\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));\",\"returns\":{\"subId\":\"- A unique subscription id.\"}},\"getRequestConfig()\":{\"returns\":{\"_0\":\"minimumRequestConfirmations global min for request confirmations\",\"_1\":\"maxGasLimit global max for request gas limit\",\"_2\":\"s_provingKeyHashes list of registered key hashes\"}},\"getSubscription(uint64)\":{\"params\":{\"subId\":\"- ID of the subscription\"},\"returns\":{\"balance\":\"- LINK balance of the subscription in juels.\",\"consumers\":\"- list of consumer address which are able to use this subscription.\",\"owner\":\"- owner of the subscription.\",\"reqCount\":\"- number of requests for this subscription, determines fee tier.\"}},\"removeConsumer(uint64,address)\":{\"params\":{\"consumer\":\"- Consumer to remove from the subscription\",\"subId\":\"- ID of the subscription\"}},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"params\":{\"callbackGasLimit\":\"- How much gas you'd like to receive in your fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords may be slightly less than this amount because of gas used calling the function (argument decoding etc.), so you may need to request slightly more than you expect to have inside fulfillRandomWords. The acceptable range is [0, maxGasLimit]\",\"keyHash\":\"- Corresponds to a particular oracle job which uses that key for generating the VRF proof. Different keyHash's have different gas price ceilings, so you can select a specific one to bound your maximum per request cost.\",\"minimumRequestConfirmations\":\"- How many blocks you'd like the oracle to wait before responding to the request. See SECURITY CONSIDERATIONS for why you may want to request more. The acceptable range is [minimumRequestBlockConfirmations, 200].\",\"numWords\":\"- The number of uint256 random values you'd like to receive in your fulfillRandomWords callback. Note these numbers are expanded in a secure way by the VRFCoordinator from a single random value supplied by the oracle.\",\"subId\":\"- The ID of the VRF subscription. Must be funded with the minimum subscription balance required for the selected keyHash.\"},\"returns\":{\"requestId\":\"- A unique identifier of the request. Can be used to match a request to a response in fulfillRandomWords.\"}},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"params\":{\"newOwner\":\"- proposed new owner of the subscription\",\"subId\":\"- ID of the subscription\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptSubscriptionOwnerTransfer(uint64)\":{\"notice\":\"Request subscription owner transfer.\"},\"addConsumer(uint64,address)\":{\"notice\":\"Add a consumer to a VRF subscription.\"},\"cancelSubscription(uint64,address)\":{\"notice\":\"Cancel a subscription\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"getRequestConfig()\":{\"notice\":\"Get configuration relevant for making requests\"},\"getSubscription(uint64)\":{\"notice\":\"Get a VRF subscription.\"},\"removeConsumer(uint64,address)\":{\"notice\":\"Remove a consumer from a VRF subscription.\"},\"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)\":{\"notice\":\"Request a set of random words.\"},\"requestSubscriptionOwnerTransfer(uint64,address)\":{\"notice\":\"Request subscription owner transfer.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":\"VRFCoordinatorV2Interface\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"acceptSubscriptionOwnerTransfer(uint64)":{"notice":"Request subscription owner transfer."},"addConsumer(uint64,address)":{"notice":"Add a consumer to a VRF subscription."},"cancelSubscription(uint64,address)":{"notice":"Cancel a subscription"},"createSubscription()":{"notice":"Create a VRF subscription."},"getRequestConfig()":{"notice":"Get configuration relevant for making requests"},"getSubscription(uint64)":{"notice":"Get a VRF subscription."},"removeConsumer(uint64,address)":{"notice":"Remove a consumer from a VRF subscription."},"requestRandomWords(bytes32,uint64,uint16,uint32,uint32)":{"notice":"Request a set of random words."},"requestSubscriptionOwnerTransfer(uint64,address)":{"notice":"Request subscription owner transfer."}},"version":1}}},"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol":{"VRFCoordinatorMock":{"abi":[{"inputs":[{"internalType":"address","name":"linkAddress","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"bytes32","name":"keyHash","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"seed","type":"uint256"}],"name":"RandomnessRequest","type":"event"},{"inputs":[],"name":"LINK","outputs":[{"internalType":"contract LinkTokenInterface","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"requestId","type":"bytes32"},{"internalType":"uint256","name":"randomness","type":"uint256"},{"internalType":"address","name":"consumerContract","type":"address"}],"name":"callBackWithRandomness","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"onTokenTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_469":{"entryPoint":null,"id":469,"parameterSlots":1,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":120,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_fromMemory":{"entryPoint":141,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_address":{"entryPoint":186,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":204,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":236,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_address":{"entryPoint":241,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1199:10","statements":[{"body":{"nodeType":"YulBlock","src":"70:80:10","statements":[{"nodeType":"YulAssignment","src":"80:22:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"89:5:10"},"nodeType":"YulFunctionCall","src":"89:13:10"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"80:5:10"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"138:5:10"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"111:26:10"},"nodeType":"YulFunctionCall","src":"111:33:10"},"nodeType":"YulExpressionStatement","src":"111:33:10"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"48:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"56:3:10","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"64:5:10","type":""}],"src":"7:143:10"},{"body":{"nodeType":"YulBlock","src":"233:274:10","statements":[{"body":{"nodeType":"YulBlock","src":"279:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"281:77:10"},"nodeType":"YulFunctionCall","src":"281:79:10"},"nodeType":"YulExpressionStatement","src":"281:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"254:7:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"263:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"250:3:10"},"nodeType":"YulFunctionCall","src":"250:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"275:2:10","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"246:3:10"},"nodeType":"YulFunctionCall","src":"246:32:10"},"nodeType":"YulIf","src":"243:119:10"},{"nodeType":"YulBlock","src":"372:128:10","statements":[{"nodeType":"YulVariableDeclaration","src":"387:15:10","value":{"kind":"number","nodeType":"YulLiteral","src":"401:1:10","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"391:6:10","type":""}]},{"nodeType":"YulAssignment","src":"416:74:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"462:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"473:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"458:3:10"},"nodeType":"YulFunctionCall","src":"458:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"482:7:10"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"426:31:10"},"nodeType":"YulFunctionCall","src":"426:64:10"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"416:6:10"}]}]}]},"name":"abi_decode_tuple_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"203:9:10","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"214:7:10","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"226:6:10","type":""}],"src":"156:351:10"},{"body":{"nodeType":"YulBlock","src":"553:35:10","statements":[{"nodeType":"YulAssignment","src":"563:19:10","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"579:2:10","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"573:5:10"},"nodeType":"YulFunctionCall","src":"573:9:10"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"563:6:10"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"546:6:10","type":""}],"src":"513:75:10"},{"body":{"nodeType":"YulBlock","src":"639:51:10","statements":[{"nodeType":"YulAssignment","src":"649:35:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"678:5:10"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"660:17:10"},"nodeType":"YulFunctionCall","src":"660:24:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"649:7:10"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"621:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"631:7:10","type":""}],"src":"594:96:10"},{"body":{"nodeType":"YulBlock","src":"741:81:10","statements":[{"nodeType":"YulAssignment","src":"751:65:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"766:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"773:42:10","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"762:3:10"},"nodeType":"YulFunctionCall","src":"762:54:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"751:7:10"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"723:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"733:7:10","type":""}],"src":"696:126:10"},{"body":{"nodeType":"YulBlock","src":"917:28:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"934:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"937:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"927:6:10"},"nodeType":"YulFunctionCall","src":"927:12:10"},"nodeType":"YulExpressionStatement","src":"927:12:10"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"828:117:10"},{"body":{"nodeType":"YulBlock","src":"1040:28:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1057:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1060:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1050:6:10"},"nodeType":"YulFunctionCall","src":"1050:12:10"},"nodeType":"YulExpressionStatement","src":"1050:12:10"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"951:117:10"},{"body":{"nodeType":"YulBlock","src":"1117:79:10","statements":[{"body":{"nodeType":"YulBlock","src":"1174:16:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1183:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1186:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1176:6:10"},"nodeType":"YulFunctionCall","src":"1176:12:10"},"nodeType":"YulExpressionStatement","src":"1176:12:10"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1140:5:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1165:5:10"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1147:17:10"},"nodeType":"YulFunctionCall","src":"1147:24:10"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1137:2:10"},"nodeType":"YulFunctionCall","src":"1137:35:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1130:6:10"},"nodeType":"YulFunctionCall","src":"1130:43:10"},"nodeType":"YulIf","src":"1127:63:10"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1110:5:10","type":""}],"src":"1074:122:10"}]},"contents":"{\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n}\n","id":10,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405234801561001057600080fd5b506040516109b13803806109b18339818101604052810190610032919061008d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600081519050610087816100f1565b92915050565b6000602082840312156100a3576100a26100ec565b5b60006100b184828501610078565b91505092915050565b60006100c5826100cc565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6100fa816100ba565b811461010557600080fd5b50565b61089a806101176000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80631b6b6d2314610046578063a4c0ed3614610064578063cf55fe9714610080575b600080fd5b61004e61009c565b60405161005b91906105b2565b60405180910390f35b61007e600480360381019061007991906103cc565b6100c0565b005b61009a6004803603810190610095919061047b565b6101b5565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461014e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610145906105ed565b60405180910390fd5b60008082806020019051810190610165919061043b565b9150915080828673ffffffffffffffffffffffffffffffffffffffff167f7a9a0a6960d95b32cded93c30e63e7c2eb9e877230813c172110ea54dc1c915c60405160405180910390a45050505050565b6000806394985ddd60e01b85856040516024016101d3929190610589565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000620324b09050805a101561027d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610274906105cd565b60405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff16836040516102a49190610572565b6000604051808303816000865af19150503d80600081146102e1576040519150601f19603f3d011682016040523d82523d6000602084013e6102e6565b606091505b5050905050505050505050565b600061030661030184610632565b61060d565b905082815260208101848484011115610322576103216107ad565b5b61032d848285610706565b509392505050565b6000813590506103448161081f565b92915050565b60008135905061035981610836565b92915050565b60008151905061036e81610836565b92915050565b600082601f830112610389576103886107a8565b5b81356103998482602086016102f3565b91505092915050565b6000813590506103b18161084d565b92915050565b6000815190506103c68161084d565b92915050565b6000806000606084860312156103e5576103e46107b7565b5b60006103f386828701610335565b9350506020610404868287016103a2565b925050604084013567ffffffffffffffff811115610425576104246107b2565b5b61043186828701610374565b9150509250925092565b60008060408385031215610452576104516107b7565b5b60006104608582860161035f565b9250506020610471858286016103b7565b9150509250929050565b600080600060608486031215610494576104936107b7565b5b60006104a28682870161034a565b93505060206104b3868287016103a2565b92505060406104c486828701610335565b9150509250925092565b6104d78161069c565b82525050565b60006104e882610663565b6104f2818561066e565b9350610502818560208601610715565b80840191505092915050565b610517816106d0565b82525050565b600061052a601b83610679565b9150610535826107cd565b602082019050919050565b600061054d601383610679565b9150610558826107f6565b602082019050919050565b61056c816106c6565b82525050565b600061057e82846104dd565b915081905092915050565b600060408201905061059e60008301856104ce565b6105ab6020830184610563565b9392505050565b60006020820190506105c7600083018461050e565b92915050565b600060208201905081810360008301526105e68161051d565b9050919050565b6000602082019050818103600083015261060681610540565b9050919050565b6000610617610628565b90506106238282610748565b919050565b6000604051905090565b600067ffffffffffffffff82111561064d5761064c610779565b5b610656826107bc565b9050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610695826106a6565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006106db826106e2565b9050919050565b60006106ed826106f4565b9050919050565b60006106ff826106a6565b9050919050565b82818337600083830152505050565b60005b83811015610733578082015181840152602081019050610718565b83811115610742576000848401525b50505050565b610751826107bc565b810181811067ffffffffffffffff821117156107705761076f610779565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f6e6f7420656e6f7567682067617320666f7220636f6e73756d65720000000000600082015250565b7f4d75737420757365204c494e4b20746f6b656e00000000000000000000000000600082015250565b6108288161068a565b811461083357600080fd5b50565b61083f8161069c565b811461084a57600080fd5b50565b610856816106c6565b811461086157600080fd5b5056fea2646970667358221220fa51051756dda7c536fd2c6c12ebee0f7566e576e79c2110e719e902875d72b764736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x9B1 CODESIZE SUB DUP1 PUSH2 0x9B1 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0x8D JUMP JUMPDEST DUP1 PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH2 0x108 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x87 DUP2 PUSH2 0xF1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA3 JUMPI PUSH2 0xA2 PUSH2 0xEC JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xB1 DUP5 DUP3 DUP6 ADD PUSH2 0x78 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC5 DUP3 PUSH2 0xCC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xFA DUP2 PUSH2 0xBA JUMP JUMPDEST DUP2 EQ PUSH2 0x105 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x89A DUP1 PUSH2 0x117 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1B6B6D23 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xA4C0ED36 EQ PUSH2 0x64 JUMPI DUP1 PUSH4 0xCF55FE97 EQ PUSH2 0x80 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x9C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x5B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x7E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x79 SWAP2 SWAP1 PUSH2 0x3CC JUMP JUMPDEST PUSH2 0xC0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x9A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x95 SWAP2 SWAP1 PUSH2 0x47B JUMP JUMPDEST PUSH2 0x1B5 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x14E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x145 SWAP1 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x165 SWAP2 SWAP1 PUSH2 0x43B JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 DUP3 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x7A9A0A6960D95B32CDED93C30E63E7C2EB9E877230813C172110EA54DC1C915C PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH4 0x94985DDD PUSH1 0xE0 SHL DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1D3 SWAP3 SWAP2 SWAP1 PUSH2 0x589 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH3 0x324B0 SWAP1 POP DUP1 GAS LT ISZERO PUSH2 0x27D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x274 SWAP1 PUSH2 0x5CD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x2A4 SWAP2 SWAP1 PUSH2 0x572 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2E1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2E6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x306 PUSH2 0x301 DUP5 PUSH2 0x632 JUMP JUMPDEST PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x322 JUMPI PUSH2 0x321 PUSH2 0x7AD JUMP JUMPDEST JUMPDEST PUSH2 0x32D DUP5 DUP3 DUP6 PUSH2 0x706 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x344 DUP2 PUSH2 0x81F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x359 DUP2 PUSH2 0x836 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x36E DUP2 PUSH2 0x836 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x389 JUMPI PUSH2 0x388 PUSH2 0x7A8 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x399 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2F3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3B1 DUP2 PUSH2 0x84D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3C6 DUP2 PUSH2 0x84D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3E5 JUMPI PUSH2 0x3E4 PUSH2 0x7B7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3F3 DUP7 DUP3 DUP8 ADD PUSH2 0x335 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x404 DUP7 DUP3 DUP8 ADD PUSH2 0x3A2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x425 JUMPI PUSH2 0x424 PUSH2 0x7B2 JUMP JUMPDEST JUMPDEST PUSH2 0x431 DUP7 DUP3 DUP8 ADD PUSH2 0x374 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x452 JUMPI PUSH2 0x451 PUSH2 0x7B7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x460 DUP6 DUP3 DUP7 ADD PUSH2 0x35F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x471 DUP6 DUP3 DUP7 ADD PUSH2 0x3B7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x494 JUMPI PUSH2 0x493 PUSH2 0x7B7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4A2 DUP7 DUP3 DUP8 ADD PUSH2 0x34A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x4B3 DUP7 DUP3 DUP8 ADD PUSH2 0x3A2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x4C4 DUP7 DUP3 DUP8 ADD PUSH2 0x335 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x4D7 DUP2 PUSH2 0x69C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4E8 DUP3 PUSH2 0x663 JUMP JUMPDEST PUSH2 0x4F2 DUP2 DUP6 PUSH2 0x66E JUMP JUMPDEST SWAP4 POP PUSH2 0x502 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x715 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x517 DUP2 PUSH2 0x6D0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x52A PUSH1 0x1B DUP4 PUSH2 0x679 JUMP JUMPDEST SWAP2 POP PUSH2 0x535 DUP3 PUSH2 0x7CD JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x54D PUSH1 0x13 DUP4 PUSH2 0x679 JUMP JUMPDEST SWAP2 POP PUSH2 0x558 DUP3 PUSH2 0x7F6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x56C DUP2 PUSH2 0x6C6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x57E DUP3 DUP5 PUSH2 0x4DD JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x59E PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x4CE JUMP JUMPDEST PUSH2 0x5AB PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x563 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x5C7 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x50E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x5E6 DUP2 PUSH2 0x51D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x606 DUP2 PUSH2 0x540 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x617 PUSH2 0x628 JUMP JUMPDEST SWAP1 POP PUSH2 0x623 DUP3 DUP3 PUSH2 0x748 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x64D JUMPI PUSH2 0x64C PUSH2 0x779 JUMP JUMPDEST JUMPDEST PUSH2 0x656 DUP3 PUSH2 0x7BC JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x695 DUP3 PUSH2 0x6A6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6DB DUP3 PUSH2 0x6E2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6ED DUP3 PUSH2 0x6F4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6FF DUP3 PUSH2 0x6A6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x733 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x718 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x742 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x751 DUP3 PUSH2 0x7BC JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x770 JUMPI PUSH2 0x76F PUSH2 0x779 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x6E6F7420656E6F7567682067617320666F7220636F6E73756D65720000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4D75737420757365204C494E4B20746F6B656E00000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x828 DUP2 PUSH2 0x68A JUMP JUMPDEST DUP2 EQ PUSH2 0x833 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x83F DUP2 PUSH2 0x69C JUMP JUMPDEST DUP2 EQ PUSH2 0x84A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x856 DUP2 PUSH2 0x6C6 JUMP JUMPDEST DUP2 EQ PUSH2 0x861 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL MLOAD SDIV OR JUMP 0xDD 0xA7 0xC5 CALLDATASIZE REVERT 0x2C PUSH13 0x12EBEE0F7566E576E79C2110E7 NOT 0xE9 MUL DUP8 0x5D PUSH19 0xB764736F6C6343000807003300000000000000 ","sourceMap":"138:993:7:-:0;;;304:89;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;376:11;350:4;;:38;;;;;;;;;;;;;;;;;;304:89;138:993;;7:143:10;64:5;95:6;89:13;80:22;;111:33;138:5;111:33;:::i;:::-;7:143;;;;:::o;156:351::-;226:6;275:2;263:9;254:7;250:23;246:32;243:119;;;281:79;;:::i;:::-;243:119;401:1;426:64;482:7;473:6;462:9;458:22;426:64;:::i;:::-;416:74;;372:128;156:351;;;;:::o;594:96::-;631:7;660:24;678:5;660:24;:::i;:::-;649:35;;594:96;;;:::o;696:126::-;733:7;773:42;766:5;762:54;751:65;;696:126;;;:::o;951:117::-;1060:1;1057;1050:12;1074:122;1147:24;1165:5;1147:24;:::i;:::-;1140:5;1137:35;1127:63;;1186:1;1183;1176:12;1127:63;1074:122;:::o;138:993:7:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@LINK_449":{"entryPoint":156,"id":449,"parameterSlots":0,"returnSlots":0},"@callBackWithRandomness_545":{"entryPoint":437,"id":545,"parameterSlots":3,"returnSlots":0},"@onTokenTransfer_501":{"entryPoint":192,"id":501,"parameterSlots":3,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":755,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":821,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32":{"entryPoint":842,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32_fromMemory":{"entryPoint":863,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":884,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":930,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":951,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256t_bytes_memory_ptr":{"entryPoint":972,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_uint256_fromMemory":{"entryPoint":1083,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_uint256t_address":{"entryPoint":1147,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":1230,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":1245,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_contract$_LinkTokenInterface_$346_to_t_address_fromStack":{"entryPoint":1294,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7_to_t_string_memory_ptr_fromStack":{"entryPoint":1309,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7_to_t_string_memory_ptr_fromStack":{"entryPoint":1344,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":1379,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":1394,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":1417,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_LinkTokenInterface_$346__to_t_address__fromStack_reversed":{"entryPoint":1458,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1485,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1517,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory":{"entryPoint":1549,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":1576,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":1586,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":1635,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":1646,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":1657,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":1674,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":1692,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":1702,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":1734,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_contract$_LinkTokenInterface_$346_to_t_address":{"entryPoint":1744,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_address":{"entryPoint":1762,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_uint160":{"entryPoint":1780,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory":{"entryPoint":1798,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory":{"entryPoint":1813,"id":null,"parameterSlots":3,"returnSlots":0},"finalize_allocation":{"entryPoint":1864,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x41":{"entryPoint":1913,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":1960,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":1965,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":1970,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":1975,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":1980,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7":{"entryPoint":1997,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7":{"entryPoint":2038,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":2079,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":2102,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":2125,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:10814:10","statements":[{"body":{"nodeType":"YulBlock","src":"90:327:10","statements":[{"nodeType":"YulAssignment","src":"100:74:10","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"166:6:10"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"125:40:10"},"nodeType":"YulFunctionCall","src":"125:48:10"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"109:15:10"},"nodeType":"YulFunctionCall","src":"109:65:10"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"100:5:10"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"190:5:10"},{"name":"length","nodeType":"YulIdentifier","src":"197:6:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"183:6:10"},"nodeType":"YulFunctionCall","src":"183:21:10"},"nodeType":"YulExpressionStatement","src":"183:21:10"},{"nodeType":"YulVariableDeclaration","src":"213:27:10","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"228:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"235:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"224:3:10"},"nodeType":"YulFunctionCall","src":"224:16:10"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"217:3:10","type":""}]},{"body":{"nodeType":"YulBlock","src":"278:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"280:77:10"},"nodeType":"YulFunctionCall","src":"280:79:10"},"nodeType":"YulExpressionStatement","src":"280:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"259:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"264:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"255:3:10"},"nodeType":"YulFunctionCall","src":"255:16:10"},{"name":"end","nodeType":"YulIdentifier","src":"273:3:10"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"252:2:10"},"nodeType":"YulFunctionCall","src":"252:25:10"},"nodeType":"YulIf","src":"249:112:10"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"394:3:10"},{"name":"dst","nodeType":"YulIdentifier","src":"399:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"404:6:10"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"370:23:10"},"nodeType":"YulFunctionCall","src":"370:41:10"},"nodeType":"YulExpressionStatement","src":"370:41:10"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"63:3:10","type":""},{"name":"length","nodeType":"YulTypedName","src":"68:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"76:3:10","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"84:5:10","type":""}],"src":"7:410:10"},{"body":{"nodeType":"YulBlock","src":"475:87:10","statements":[{"nodeType":"YulAssignment","src":"485:29:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"507:6:10"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"494:12:10"},"nodeType":"YulFunctionCall","src":"494:20:10"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"485:5:10"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:10"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"523:26:10"},"nodeType":"YulFunctionCall","src":"523:33:10"},"nodeType":"YulExpressionStatement","src":"523:33:10"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"453:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"461:3:10","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"469:5:10","type":""}],"src":"423:139:10"},{"body":{"nodeType":"YulBlock","src":"620:87:10","statements":[{"nodeType":"YulAssignment","src":"630:29:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"652:6:10"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"639:12:10"},"nodeType":"YulFunctionCall","src":"639:20:10"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"630:5:10"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"695:5:10"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"668:26:10"},"nodeType":"YulFunctionCall","src":"668:33:10"},"nodeType":"YulExpressionStatement","src":"668:33:10"}]},"name":"abi_decode_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"598:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"606:3:10","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"614:5:10","type":""}],"src":"568:139:10"},{"body":{"nodeType":"YulBlock","src":"776:80:10","statements":[{"nodeType":"YulAssignment","src":"786:22:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"801:6:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"795:5:10"},"nodeType":"YulFunctionCall","src":"795:13:10"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"786:5:10"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"844:5:10"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"817:26:10"},"nodeType":"YulFunctionCall","src":"817:33:10"},"nodeType":"YulExpressionStatement","src":"817:33:10"}]},"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"754:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"762:3:10","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"770:5:10","type":""}],"src":"713:143:10"},{"body":{"nodeType":"YulBlock","src":"936:277:10","statements":[{"body":{"nodeType":"YulBlock","src":"985:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"987:77:10"},"nodeType":"YulFunctionCall","src":"987:79:10"},"nodeType":"YulExpressionStatement","src":"987:79:10"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"964:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"972:4:10","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"960:3:10"},"nodeType":"YulFunctionCall","src":"960:17:10"},{"name":"end","nodeType":"YulIdentifier","src":"979:3:10"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"956:3:10"},"nodeType":"YulFunctionCall","src":"956:27:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"949:6:10"},"nodeType":"YulFunctionCall","src":"949:35:10"},"nodeType":"YulIf","src":"946:122:10"},{"nodeType":"YulVariableDeclaration","src":"1077:34:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1104:6:10"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1091:12:10"},"nodeType":"YulFunctionCall","src":"1091:20:10"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1081:6:10","type":""}]},{"nodeType":"YulAssignment","src":"1120:87:10","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1180:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"1188:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1176:3:10"},"nodeType":"YulFunctionCall","src":"1176:17:10"},{"name":"length","nodeType":"YulIdentifier","src":"1195:6:10"},{"name":"end","nodeType":"YulIdentifier","src":"1203:3:10"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"1129:46:10"},"nodeType":"YulFunctionCall","src":"1129:78:10"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1120:5:10"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"914:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"922:3:10","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"930:5:10","type":""}],"src":"875:338:10"},{"body":{"nodeType":"YulBlock","src":"1271:87:10","statements":[{"nodeType":"YulAssignment","src":"1281:29:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1303:6:10"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1290:12:10"},"nodeType":"YulFunctionCall","src":"1290:20:10"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1281:5:10"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1346:5:10"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1319:26:10"},"nodeType":"YulFunctionCall","src":"1319:33:10"},"nodeType":"YulExpressionStatement","src":"1319:33:10"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1249:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"1257:3:10","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1265:5:10","type":""}],"src":"1219:139:10"},{"body":{"nodeType":"YulBlock","src":"1427:80:10","statements":[{"nodeType":"YulAssignment","src":"1437:22:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1452:6:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1446:5:10"},"nodeType":"YulFunctionCall","src":"1446:13:10"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1437:5:10"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1495:5:10"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"1468:26:10"},"nodeType":"YulFunctionCall","src":"1468:33:10"},"nodeType":"YulExpressionStatement","src":"1468:33:10"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1405:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"1413:3:10","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1421:5:10","type":""}],"src":"1364:143:10"},{"body":{"nodeType":"YulBlock","src":"1622:688:10","statements":[{"body":{"nodeType":"YulBlock","src":"1668:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1670:77:10"},"nodeType":"YulFunctionCall","src":"1670:79:10"},"nodeType":"YulExpressionStatement","src":"1670:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1643:7:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"1652:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1639:3:10"},"nodeType":"YulFunctionCall","src":"1639:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"1664:2:10","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1635:3:10"},"nodeType":"YulFunctionCall","src":"1635:32:10"},"nodeType":"YulIf","src":"1632:119:10"},{"nodeType":"YulBlock","src":"1761:117:10","statements":[{"nodeType":"YulVariableDeclaration","src":"1776:15:10","value":{"kind":"number","nodeType":"YulLiteral","src":"1790:1:10","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1780:6:10","type":""}]},{"nodeType":"YulAssignment","src":"1805:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1840:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"1851:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1836:3:10"},"nodeType":"YulFunctionCall","src":"1836:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1860:7:10"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"1815:20:10"},"nodeType":"YulFunctionCall","src":"1815:53:10"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1805:6:10"}]}]},{"nodeType":"YulBlock","src":"1888:118:10","statements":[{"nodeType":"YulVariableDeclaration","src":"1903:16:10","value":{"kind":"number","nodeType":"YulLiteral","src":"1917:2:10","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1907:6:10","type":""}]},{"nodeType":"YulAssignment","src":"1933:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1968:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"1979:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1964:3:10"},"nodeType":"YulFunctionCall","src":"1964:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1988:7:10"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"1943:20:10"},"nodeType":"YulFunctionCall","src":"1943:53:10"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1933:6:10"}]}]},{"nodeType":"YulBlock","src":"2016:287:10","statements":[{"nodeType":"YulVariableDeclaration","src":"2031:46:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2062:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"2073:2:10","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2058:3:10"},"nodeType":"YulFunctionCall","src":"2058:18:10"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2045:12:10"},"nodeType":"YulFunctionCall","src":"2045:32:10"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2035:6:10","type":""}]},{"body":{"nodeType":"YulBlock","src":"2124:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"2126:77:10"},"nodeType":"YulFunctionCall","src":"2126:79:10"},"nodeType":"YulExpressionStatement","src":"2126:79:10"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2096:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"2104:18:10","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2093:2:10"},"nodeType":"YulFunctionCall","src":"2093:30:10"},"nodeType":"YulIf","src":"2090:117:10"},{"nodeType":"YulAssignment","src":"2221:72:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2265:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"2276:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2261:3:10"},"nodeType":"YulFunctionCall","src":"2261:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2285:7:10"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"2231:29:10"},"nodeType":"YulFunctionCall","src":"2231:62:10"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2221:6:10"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1576:9:10","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1587:7:10","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1599:6:10","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1607:6:10","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1615:6:10","type":""}],"src":"1513:797:10"},{"body":{"nodeType":"YulBlock","src":"2410:413:10","statements":[{"body":{"nodeType":"YulBlock","src":"2456:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2458:77:10"},"nodeType":"YulFunctionCall","src":"2458:79:10"},"nodeType":"YulExpressionStatement","src":"2458:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2431:7:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"2440:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2427:3:10"},"nodeType":"YulFunctionCall","src":"2427:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"2452:2:10","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2423:3:10"},"nodeType":"YulFunctionCall","src":"2423:32:10"},"nodeType":"YulIf","src":"2420:119:10"},{"nodeType":"YulBlock","src":"2549:128:10","statements":[{"nodeType":"YulVariableDeclaration","src":"2564:15:10","value":{"kind":"number","nodeType":"YulLiteral","src":"2578:1:10","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2568:6:10","type":""}]},{"nodeType":"YulAssignment","src":"2593:74:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2639:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"2650:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2635:3:10"},"nodeType":"YulFunctionCall","src":"2635:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2659:7:10"}],"functionName":{"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulIdentifier","src":"2603:31:10"},"nodeType":"YulFunctionCall","src":"2603:64:10"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2593:6:10"}]}]},{"nodeType":"YulBlock","src":"2687:129:10","statements":[{"nodeType":"YulVariableDeclaration","src":"2702:16:10","value":{"kind":"number","nodeType":"YulLiteral","src":"2716:2:10","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2706:6:10","type":""}]},{"nodeType":"YulAssignment","src":"2732:74:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2778:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"2789:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2774:3:10"},"nodeType":"YulFunctionCall","src":"2774:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2798:7:10"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"2742:31:10"},"nodeType":"YulFunctionCall","src":"2742:64:10"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2732:6:10"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2372:9:10","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2383:7:10","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2395:6:10","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2403:6:10","type":""}],"src":"2316:507:10"},{"body":{"nodeType":"YulBlock","src":"2929:519:10","statements":[{"body":{"nodeType":"YulBlock","src":"2975:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2977:77:10"},"nodeType":"YulFunctionCall","src":"2977:79:10"},"nodeType":"YulExpressionStatement","src":"2977:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2950:7:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"2959:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2946:3:10"},"nodeType":"YulFunctionCall","src":"2946:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"2971:2:10","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2942:3:10"},"nodeType":"YulFunctionCall","src":"2942:32:10"},"nodeType":"YulIf","src":"2939:119:10"},{"nodeType":"YulBlock","src":"3068:117:10","statements":[{"nodeType":"YulVariableDeclaration","src":"3083:15:10","value":{"kind":"number","nodeType":"YulLiteral","src":"3097:1:10","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3087:6:10","type":""}]},{"nodeType":"YulAssignment","src":"3112:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3147:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"3158:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3143:3:10"},"nodeType":"YulFunctionCall","src":"3143:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3167:7:10"}],"functionName":{"name":"abi_decode_t_bytes32","nodeType":"YulIdentifier","src":"3122:20:10"},"nodeType":"YulFunctionCall","src":"3122:53:10"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3112:6:10"}]}]},{"nodeType":"YulBlock","src":"3195:118:10","statements":[{"nodeType":"YulVariableDeclaration","src":"3210:16:10","value":{"kind":"number","nodeType":"YulLiteral","src":"3224:2:10","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3214:6:10","type":""}]},{"nodeType":"YulAssignment","src":"3240:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3275:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"3286:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3271:3:10"},"nodeType":"YulFunctionCall","src":"3271:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3295:7:10"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3250:20:10"},"nodeType":"YulFunctionCall","src":"3250:53:10"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3240:6:10"}]}]},{"nodeType":"YulBlock","src":"3323:118:10","statements":[{"nodeType":"YulVariableDeclaration","src":"3338:16:10","value":{"kind":"number","nodeType":"YulLiteral","src":"3352:2:10","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3342:6:10","type":""}]},{"nodeType":"YulAssignment","src":"3368:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3403:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"3414:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3399:3:10"},"nodeType":"YulFunctionCall","src":"3399:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3423:7:10"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3378:20:10"},"nodeType":"YulFunctionCall","src":"3378:53:10"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"3368:6:10"}]}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2883:9:10","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2894:7:10","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2906:6:10","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2914:6:10","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2922:6:10","type":""}],"src":"2829:619:10"},{"body":{"nodeType":"YulBlock","src":"3519:53:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3536:3:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3559:5:10"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"3541:17:10"},"nodeType":"YulFunctionCall","src":"3541:24:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3529:6:10"},"nodeType":"YulFunctionCall","src":"3529:37:10"},"nodeType":"YulExpressionStatement","src":"3529:37:10"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3507:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3514:3:10","type":""}],"src":"3454:118:10"},{"body":{"nodeType":"YulBlock","src":"3686:265:10","statements":[{"nodeType":"YulVariableDeclaration","src":"3696:52:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3742:5:10"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"3710:31:10"},"nodeType":"YulFunctionCall","src":"3710:38:10"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3700:6:10","type":""}]},{"nodeType":"YulAssignment","src":"3757:95:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3840:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"3845:6:10"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"3764:75:10"},"nodeType":"YulFunctionCall","src":"3764:88:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"3757:3:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3887:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"3894:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3883:3:10"},"nodeType":"YulFunctionCall","src":"3883:16:10"},{"name":"pos","nodeType":"YulIdentifier","src":"3901:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"3906:6:10"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"3861:21:10"},"nodeType":"YulFunctionCall","src":"3861:52:10"},"nodeType":"YulExpressionStatement","src":"3861:52:10"},{"nodeType":"YulAssignment","src":"3922:23:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3933:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"3938:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3929:3:10"},"nodeType":"YulFunctionCall","src":"3929:16:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"3922:3:10"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3667:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3674:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"3682:3:10","type":""}],"src":"3578:373:10"},{"body":{"nodeType":"YulBlock","src":"4048:92:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4065:3:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4127:5:10"}],"functionName":{"name":"convert_t_contract$_LinkTokenInterface_$346_to_t_address","nodeType":"YulIdentifier","src":"4070:56:10"},"nodeType":"YulFunctionCall","src":"4070:63:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4058:6:10"},"nodeType":"YulFunctionCall","src":"4058:76:10"},"nodeType":"YulExpressionStatement","src":"4058:76:10"}]},"name":"abi_encode_t_contract$_LinkTokenInterface_$346_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4036:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4043:3:10","type":""}],"src":"3957:183:10"},{"body":{"nodeType":"YulBlock","src":"4292:220:10","statements":[{"nodeType":"YulAssignment","src":"4302:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4368:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"4373:2:10","type":"","value":"27"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4309:58:10"},"nodeType":"YulFunctionCall","src":"4309:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4302:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4474:3:10"}],"functionName":{"name":"store_literal_in_memory_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7","nodeType":"YulIdentifier","src":"4385:88:10"},"nodeType":"YulFunctionCall","src":"4385:93:10"},"nodeType":"YulExpressionStatement","src":"4385:93:10"},{"nodeType":"YulAssignment","src":"4487:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4498:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"4503:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4494:3:10"},"nodeType":"YulFunctionCall","src":"4494:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4487:3:10"}]}]},"name":"abi_encode_t_stringliteral_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4280:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4288:3:10","type":""}],"src":"4146:366:10"},{"body":{"nodeType":"YulBlock","src":"4664:220:10","statements":[{"nodeType":"YulAssignment","src":"4674:74:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4740:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"4745:2:10","type":"","value":"19"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4681:58:10"},"nodeType":"YulFunctionCall","src":"4681:67:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4674:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4846:3:10"}],"functionName":{"name":"store_literal_in_memory_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7","nodeType":"YulIdentifier","src":"4757:88:10"},"nodeType":"YulFunctionCall","src":"4757:93:10"},"nodeType":"YulExpressionStatement","src":"4757:93:10"},{"nodeType":"YulAssignment","src":"4859:19:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4870:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"4875:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4866:3:10"},"nodeType":"YulFunctionCall","src":"4866:12:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4859:3:10"}]}]},"name":"abi_encode_t_stringliteral_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4652:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4660:3:10","type":""}],"src":"4518:366:10"},{"body":{"nodeType":"YulBlock","src":"4955:53:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4972:3:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4995:5:10"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"4977:17:10"},"nodeType":"YulFunctionCall","src":"4977:24:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4965:6:10"},"nodeType":"YulFunctionCall","src":"4965:37:10"},"nodeType":"YulExpressionStatement","src":"4965:37:10"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4943:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4950:3:10","type":""}],"src":"4890:118:10"},{"body":{"nodeType":"YulBlock","src":"5148:137:10","statements":[{"nodeType":"YulAssignment","src":"5159:100:10","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5246:6:10"},{"name":"pos","nodeType":"YulIdentifier","src":"5255:3:10"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"5166:79:10"},"nodeType":"YulFunctionCall","src":"5166:93:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5159:3:10"}]},{"nodeType":"YulAssignment","src":"5269:10:10","value":{"name":"pos","nodeType":"YulIdentifier","src":"5276:3:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5269:3:10"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5127:3:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5133:6:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5144:3:10","type":""}],"src":"5014:271:10"},{"body":{"nodeType":"YulBlock","src":"5417:206:10","statements":[{"nodeType":"YulAssignment","src":"5427:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5439:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"5450:2:10","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5435:3:10"},"nodeType":"YulFunctionCall","src":"5435:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5427:4:10"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5507:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5520:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"5531:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5516:3:10"},"nodeType":"YulFunctionCall","src":"5516:17:10"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"5463:43:10"},"nodeType":"YulFunctionCall","src":"5463:71:10"},"nodeType":"YulExpressionStatement","src":"5463:71:10"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5588:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5601:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"5612:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5597:3:10"},"nodeType":"YulFunctionCall","src":"5597:18:10"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"5544:43:10"},"nodeType":"YulFunctionCall","src":"5544:72:10"},"nodeType":"YulExpressionStatement","src":"5544:72:10"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5381:9:10","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5393:6:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5401:6:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5412:4:10","type":""}],"src":"5291:332:10"},{"body":{"nodeType":"YulBlock","src":"5753:150:10","statements":[{"nodeType":"YulAssignment","src":"5763:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5775:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"5786:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5771:3:10"},"nodeType":"YulFunctionCall","src":"5771:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5763:4:10"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5869:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5882:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"5893:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5878:3:10"},"nodeType":"YulFunctionCall","src":"5878:17:10"}],"functionName":{"name":"abi_encode_t_contract$_LinkTokenInterface_$346_to_t_address_fromStack","nodeType":"YulIdentifier","src":"5799:69:10"},"nodeType":"YulFunctionCall","src":"5799:97:10"},"nodeType":"YulExpressionStatement","src":"5799:97:10"}]},"name":"abi_encode_tuple_t_contract$_LinkTokenInterface_$346__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5725:9:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5737:6:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5748:4:10","type":""}],"src":"5629:274:10"},{"body":{"nodeType":"YulBlock","src":"6080:248:10","statements":[{"nodeType":"YulAssignment","src":"6090:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6102:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"6113:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6098:3:10"},"nodeType":"YulFunctionCall","src":"6098:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6090:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6137:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"6148:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6133:3:10"},"nodeType":"YulFunctionCall","src":"6133:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"6156:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"6162:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6152:3:10"},"nodeType":"YulFunctionCall","src":"6152:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6126:6:10"},"nodeType":"YulFunctionCall","src":"6126:47:10"},"nodeType":"YulExpressionStatement","src":"6126:47:10"},{"nodeType":"YulAssignment","src":"6182:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"6316:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6190:124:10"},"nodeType":"YulFunctionCall","src":"6190:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6182:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6060:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6075:4:10","type":""}],"src":"5909:419:10"},{"body":{"nodeType":"YulBlock","src":"6505:248:10","statements":[{"nodeType":"YulAssignment","src":"6515:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6527:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"6538:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6523:3:10"},"nodeType":"YulFunctionCall","src":"6523:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6515:4:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6562:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"6573:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6558:3:10"},"nodeType":"YulFunctionCall","src":"6558:17:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"6581:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"6587:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6577:3:10"},"nodeType":"YulFunctionCall","src":"6577:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6551:6:10"},"nodeType":"YulFunctionCall","src":"6551:47:10"},"nodeType":"YulExpressionStatement","src":"6551:47:10"},{"nodeType":"YulAssignment","src":"6607:139:10","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"6741:4:10"}],"functionName":{"name":"abi_encode_t_stringliteral_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6615:124:10"},"nodeType":"YulFunctionCall","src":"6615:131:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6607:4:10"}]}]},"name":"abi_encode_tuple_t_stringliteral_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6485:9:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6500:4:10","type":""}],"src":"6334:419:10"},{"body":{"nodeType":"YulBlock","src":"6800:88:10","statements":[{"nodeType":"YulAssignment","src":"6810:30:10","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"6820:18:10"},"nodeType":"YulFunctionCall","src":"6820:20:10"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6810:6:10"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6869:6:10"},{"name":"size","nodeType":"YulIdentifier","src":"6877:4:10"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"6849:19:10"},"nodeType":"YulFunctionCall","src":"6849:33:10"},"nodeType":"YulExpressionStatement","src":"6849:33:10"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"6784:4:10","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"6793:6:10","type":""}],"src":"6759:129:10"},{"body":{"nodeType":"YulBlock","src":"6934:35:10","statements":[{"nodeType":"YulAssignment","src":"6944:19:10","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6960:2:10","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6954:5:10"},"nodeType":"YulFunctionCall","src":"6954:9:10"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6944:6:10"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"6927:6:10","type":""}],"src":"6894:75:10"},{"body":{"nodeType":"YulBlock","src":"7041:241:10","statements":[{"body":{"nodeType":"YulBlock","src":"7146:22:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7148:16:10"},"nodeType":"YulFunctionCall","src":"7148:18:10"},"nodeType":"YulExpressionStatement","src":"7148:18:10"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7118:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"7126:18:10","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7115:2:10"},"nodeType":"YulFunctionCall","src":"7115:30:10"},"nodeType":"YulIf","src":"7112:56:10"},{"nodeType":"YulAssignment","src":"7178:37:10","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7208:6:10"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7186:21:10"},"nodeType":"YulFunctionCall","src":"7186:29:10"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7178:4:10"}]},{"nodeType":"YulAssignment","src":"7252:23:10","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"7264:4:10"},{"kind":"number","nodeType":"YulLiteral","src":"7270:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7260:3:10"},"nodeType":"YulFunctionCall","src":"7260:15:10"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7252:4:10"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"7025:6:10","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"7036:4:10","type":""}],"src":"6975:307:10"},{"body":{"nodeType":"YulBlock","src":"7346:40:10","statements":[{"nodeType":"YulAssignment","src":"7357:22:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7373:5:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7367:5:10"},"nodeType":"YulFunctionCall","src":"7367:12:10"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"7357:6:10"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7329:5:10","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"7339:6:10","type":""}],"src":"7288:98:10"},{"body":{"nodeType":"YulBlock","src":"7505:34:10","statements":[{"nodeType":"YulAssignment","src":"7515:18:10","value":{"name":"pos","nodeType":"YulIdentifier","src":"7530:3:10"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"7515:11:10"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7477:3:10","type":""},{"name":"length","nodeType":"YulTypedName","src":"7482:6:10","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"7493:11:10","type":""}],"src":"7392:147:10"},{"body":{"nodeType":"YulBlock","src":"7641:73:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7658:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"7663:6:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7651:6:10"},"nodeType":"YulFunctionCall","src":"7651:19:10"},"nodeType":"YulExpressionStatement","src":"7651:19:10"},{"nodeType":"YulAssignment","src":"7679:29:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7698:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"7703:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7694:3:10"},"nodeType":"YulFunctionCall","src":"7694:14:10"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"7679:11:10"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7613:3:10","type":""},{"name":"length","nodeType":"YulTypedName","src":"7618:6:10","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"7629:11:10","type":""}],"src":"7545:169:10"},{"body":{"nodeType":"YulBlock","src":"7765:51:10","statements":[{"nodeType":"YulAssignment","src":"7775:35:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7804:5:10"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"7786:17:10"},"nodeType":"YulFunctionCall","src":"7786:24:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7775:7:10"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7747:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7757:7:10","type":""}],"src":"7720:96:10"},{"body":{"nodeType":"YulBlock","src":"7867:32:10","statements":[{"nodeType":"YulAssignment","src":"7877:16:10","value":{"name":"value","nodeType":"YulIdentifier","src":"7888:5:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7877:7:10"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7849:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7859:7:10","type":""}],"src":"7822:77:10"},{"body":{"nodeType":"YulBlock","src":"7950:81:10","statements":[{"nodeType":"YulAssignment","src":"7960:65:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7975:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"7982:42:10","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7971:3:10"},"nodeType":"YulFunctionCall","src":"7971:54:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"7960:7:10"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7932:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"7942:7:10","type":""}],"src":"7905:126:10"},{"body":{"nodeType":"YulBlock","src":"8082:32:10","statements":[{"nodeType":"YulAssignment","src":"8092:16:10","value":{"name":"value","nodeType":"YulIdentifier","src":"8103:5:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"8092:7:10"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8064:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"8074:7:10","type":""}],"src":"8037:77:10"},{"body":{"nodeType":"YulBlock","src":"8206:66:10","statements":[{"nodeType":"YulAssignment","src":"8216:50:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8260:5:10"}],"functionName":{"name":"convert_t_uint160_to_t_address","nodeType":"YulIdentifier","src":"8229:30:10"},"nodeType":"YulFunctionCall","src":"8229:37:10"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"8216:9:10"}]}]},"name":"convert_t_contract$_LinkTokenInterface_$346_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8186:5:10","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"8196:9:10","type":""}],"src":"8120:152:10"},{"body":{"nodeType":"YulBlock","src":"8338:66:10","statements":[{"nodeType":"YulAssignment","src":"8348:50:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8392:5:10"}],"functionName":{"name":"convert_t_uint160_to_t_uint160","nodeType":"YulIdentifier","src":"8361:30:10"},"nodeType":"YulFunctionCall","src":"8361:37:10"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"8348:9:10"}]}]},"name":"convert_t_uint160_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8318:5:10","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"8328:9:10","type":""}],"src":"8278:126:10"},{"body":{"nodeType":"YulBlock","src":"8470:53:10","statements":[{"nodeType":"YulAssignment","src":"8480:37:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8511:5:10"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"8493:17:10"},"nodeType":"YulFunctionCall","src":"8493:24:10"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"8480:9:10"}]}]},"name":"convert_t_uint160_to_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8450:5:10","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"8460:9:10","type":""}],"src":"8410:113:10"},{"body":{"nodeType":"YulBlock","src":"8580:103:10","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8603:3:10"},{"name":"src","nodeType":"YulIdentifier","src":"8608:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"8613:6:10"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"8590:12:10"},"nodeType":"YulFunctionCall","src":"8590:30:10"},"nodeType":"YulExpressionStatement","src":"8590:30:10"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8661:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"8666:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8657:3:10"},"nodeType":"YulFunctionCall","src":"8657:16:10"},{"kind":"number","nodeType":"YulLiteral","src":"8675:1:10","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8650:6:10"},"nodeType":"YulFunctionCall","src":"8650:27:10"},"nodeType":"YulExpressionStatement","src":"8650:27:10"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8562:3:10","type":""},{"name":"dst","nodeType":"YulTypedName","src":"8567:3:10","type":""},{"name":"length","nodeType":"YulTypedName","src":"8572:6:10","type":""}],"src":"8529:154:10"},{"body":{"nodeType":"YulBlock","src":"8738:258:10","statements":[{"nodeType":"YulVariableDeclaration","src":"8748:10:10","value":{"kind":"number","nodeType":"YulLiteral","src":"8757:1:10","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"8752:1:10","type":""}]},{"body":{"nodeType":"YulBlock","src":"8817:63:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8842:3:10"},{"name":"i","nodeType":"YulIdentifier","src":"8847:1:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8838:3:10"},"nodeType":"YulFunctionCall","src":"8838:11:10"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8861:3:10"},{"name":"i","nodeType":"YulIdentifier","src":"8866:1:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8857:3:10"},"nodeType":"YulFunctionCall","src":"8857:11:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8851:5:10"},"nodeType":"YulFunctionCall","src":"8851:18:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8831:6:10"},"nodeType":"YulFunctionCall","src":"8831:39:10"},"nodeType":"YulExpressionStatement","src":"8831:39:10"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8778:1:10"},{"name":"length","nodeType":"YulIdentifier","src":"8781:6:10"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8775:2:10"},"nodeType":"YulFunctionCall","src":"8775:13:10"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"8789:19:10","statements":[{"nodeType":"YulAssignment","src":"8791:15:10","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8800:1:10"},{"kind":"number","nodeType":"YulLiteral","src":"8803:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8796:3:10"},"nodeType":"YulFunctionCall","src":"8796:10:10"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"8791:1:10"}]}]},"pre":{"nodeType":"YulBlock","src":"8771:3:10","statements":[]},"src":"8767:113:10"},{"body":{"nodeType":"YulBlock","src":"8914:76:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8964:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"8969:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8960:3:10"},"nodeType":"YulFunctionCall","src":"8960:16:10"},{"kind":"number","nodeType":"YulLiteral","src":"8978:1:10","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8953:6:10"},"nodeType":"YulFunctionCall","src":"8953:27:10"},"nodeType":"YulExpressionStatement","src":"8953:27:10"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"8895:1:10"},{"name":"length","nodeType":"YulIdentifier","src":"8898:6:10"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8892:2:10"},"nodeType":"YulFunctionCall","src":"8892:13:10"},"nodeType":"YulIf","src":"8889:101:10"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8720:3:10","type":""},{"name":"dst","nodeType":"YulTypedName","src":"8725:3:10","type":""},{"name":"length","nodeType":"YulTypedName","src":"8730:6:10","type":""}],"src":"8689:307:10"},{"body":{"nodeType":"YulBlock","src":"9045:238:10","statements":[{"nodeType":"YulVariableDeclaration","src":"9055:58:10","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9077:6:10"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"9107:4:10"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"9085:21:10"},"nodeType":"YulFunctionCall","src":"9085:27:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9073:3:10"},"nodeType":"YulFunctionCall","src":"9073:40:10"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"9059:10:10","type":""}]},{"body":{"nodeType":"YulBlock","src":"9224:22:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"9226:16:10"},"nodeType":"YulFunctionCall","src":"9226:18:10"},"nodeType":"YulExpressionStatement","src":"9226:18:10"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"9167:10:10"},{"kind":"number","nodeType":"YulLiteral","src":"9179:18:10","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9164:2:10"},"nodeType":"YulFunctionCall","src":"9164:34:10"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"9203:10:10"},{"name":"memPtr","nodeType":"YulIdentifier","src":"9215:6:10"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"9200:2:10"},"nodeType":"YulFunctionCall","src":"9200:22:10"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"9161:2:10"},"nodeType":"YulFunctionCall","src":"9161:62:10"},"nodeType":"YulIf","src":"9158:88:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9262:2:10","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"9266:10:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9255:6:10"},"nodeType":"YulFunctionCall","src":"9255:22:10"},"nodeType":"YulExpressionStatement","src":"9255:22:10"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"9031:6:10","type":""},{"name":"size","nodeType":"YulTypedName","src":"9039:4:10","type":""}],"src":"9002:281:10"},{"body":{"nodeType":"YulBlock","src":"9317:152:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9334:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9337:77:10","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9327:6:10"},"nodeType":"YulFunctionCall","src":"9327:88:10"},"nodeType":"YulExpressionStatement","src":"9327:88:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9431:1:10","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"9434:4:10","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9424:6:10"},"nodeType":"YulFunctionCall","src":"9424:15:10"},"nodeType":"YulExpressionStatement","src":"9424:15:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9455:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9458:4:10","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9448:6:10"},"nodeType":"YulFunctionCall","src":"9448:15:10"},"nodeType":"YulExpressionStatement","src":"9448:15:10"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"9289:180:10"},{"body":{"nodeType":"YulBlock","src":"9564:28:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9581:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9584:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9574:6:10"},"nodeType":"YulFunctionCall","src":"9574:12:10"},"nodeType":"YulExpressionStatement","src":"9574:12:10"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"9475:117:10"},{"body":{"nodeType":"YulBlock","src":"9687:28:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9704:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9707:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9697:6:10"},"nodeType":"YulFunctionCall","src":"9697:12:10"},"nodeType":"YulExpressionStatement","src":"9697:12:10"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"9598:117:10"},{"body":{"nodeType":"YulBlock","src":"9810:28:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9827:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9830:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9820:6:10"},"nodeType":"YulFunctionCall","src":"9820:12:10"},"nodeType":"YulExpressionStatement","src":"9820:12:10"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"9721:117:10"},{"body":{"nodeType":"YulBlock","src":"9933:28:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9950:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9953:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9943:6:10"},"nodeType":"YulFunctionCall","src":"9943:12:10"},"nodeType":"YulExpressionStatement","src":"9943:12:10"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"9844:117:10"},{"body":{"nodeType":"YulBlock","src":"10015:54:10","statements":[{"nodeType":"YulAssignment","src":"10025:38:10","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10043:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"10050:2:10","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10039:3:10"},"nodeType":"YulFunctionCall","src":"10039:14:10"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10059:2:10","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10055:3:10"},"nodeType":"YulFunctionCall","src":"10055:7:10"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10035:3:10"},"nodeType":"YulFunctionCall","src":"10035:28:10"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"10025:6:10"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9998:5:10","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"10008:6:10","type":""}],"src":"9967:102:10"},{"body":{"nodeType":"YulBlock","src":"10181:71:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10203:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"10211:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10199:3:10"},"nodeType":"YulFunctionCall","src":"10199:14:10"},{"hexValue":"6e6f7420656e6f7567682067617320666f7220636f6e73756d6572","kind":"string","nodeType":"YulLiteral","src":"10215:29:10","type":"","value":"not enough gas for consumer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10192:6:10"},"nodeType":"YulFunctionCall","src":"10192:53:10"},"nodeType":"YulExpressionStatement","src":"10192:53:10"}]},"name":"store_literal_in_memory_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10173:6:10","type":""}],"src":"10075:177:10"},{"body":{"nodeType":"YulBlock","src":"10364:63:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10386:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"10394:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10382:3:10"},"nodeType":"YulFunctionCall","src":"10382:14:10"},{"hexValue":"4d75737420757365204c494e4b20746f6b656e","kind":"string","nodeType":"YulLiteral","src":"10398:21:10","type":"","value":"Must use LINK token"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10375:6:10"},"nodeType":"YulFunctionCall","src":"10375:45:10"},"nodeType":"YulExpressionStatement","src":"10375:45:10"}]},"name":"store_literal_in_memory_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"10356:6:10","type":""}],"src":"10258:169:10"},{"body":{"nodeType":"YulBlock","src":"10476:79:10","statements":[{"body":{"nodeType":"YulBlock","src":"10533:16:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10542:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10545:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10535:6:10"},"nodeType":"YulFunctionCall","src":"10535:12:10"},"nodeType":"YulExpressionStatement","src":"10535:12:10"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10499:5:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10524:5:10"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"10506:17:10"},"nodeType":"YulFunctionCall","src":"10506:24:10"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10496:2:10"},"nodeType":"YulFunctionCall","src":"10496:35:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10489:6:10"},"nodeType":"YulFunctionCall","src":"10489:43:10"},"nodeType":"YulIf","src":"10486:63:10"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10469:5:10","type":""}],"src":"10433:122:10"},{"body":{"nodeType":"YulBlock","src":"10604:79:10","statements":[{"body":{"nodeType":"YulBlock","src":"10661:16:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10670:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10673:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10663:6:10"},"nodeType":"YulFunctionCall","src":"10663:12:10"},"nodeType":"YulExpressionStatement","src":"10663:12:10"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10627:5:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10652:5:10"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"10634:17:10"},"nodeType":"YulFunctionCall","src":"10634:24:10"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10624:2:10"},"nodeType":"YulFunctionCall","src":"10624:35:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10617:6:10"},"nodeType":"YulFunctionCall","src":"10617:43:10"},"nodeType":"YulIf","src":"10614:63:10"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10597:5:10","type":""}],"src":"10561:122:10"},{"body":{"nodeType":"YulBlock","src":"10732:79:10","statements":[{"body":{"nodeType":"YulBlock","src":"10789:16:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10798:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10801:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10791:6:10"},"nodeType":"YulFunctionCall","src":"10791:12:10"},"nodeType":"YulExpressionStatement","src":"10791:12:10"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10755:5:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10780:5:10"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"10762:17:10"},"nodeType":"YulFunctionCall","src":"10762:24:10"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10752:2:10"},"nodeType":"YulFunctionCall","src":"10752:35:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10745:6:10"},"nodeType":"YulFunctionCall","src":"10745:43:10"},"nodeType":"YulIf","src":"10742:63:10"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10725:5:10","type":""}],"src":"10689:122:10"}]},"contents":"{\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes32t_uint256_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes32t_uint256t_address(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_t_contract$_LinkTokenInterface_$346_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_LinkTokenInterface_$346_to_t_address(value))\n    }\n\n    function abi_encode_t_stringliteral_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 27)\n        store_literal_in_memory_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_stringliteral_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 19)\n        store_literal_in_memory_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_contract$_LinkTokenInterface_$346__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_LinkTokenInterface_$346_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_stringliteral_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function convert_t_contract$_LinkTokenInterface_$346_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(value)\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_c816b0be31b4ff6568775c57154270cb6742b4541711a582b675ea909198f4b7(memPtr) {\n\n        mstore(add(memPtr, 0), \"not enough gas for consumer\")\n\n    }\n\n    function store_literal_in_memory_e987a5305d985c4322166f34f5dcca15d7dfa4faebb15d40e05678e672e6a6a7(memPtr) {\n\n        mstore(add(memPtr, 0), \"Must use LINK token\")\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":10,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100415760003560e01c80631b6b6d2314610046578063a4c0ed3614610064578063cf55fe9714610080575b600080fd5b61004e61009c565b60405161005b91906105b2565b60405180910390f35b61007e600480360381019061007991906103cc565b6100c0565b005b61009a6004803603810190610095919061047b565b6101b5565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461014e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610145906105ed565b60405180910390fd5b60008082806020019051810190610165919061043b565b9150915080828673ffffffffffffffffffffffffffffffffffffffff167f7a9a0a6960d95b32cded93c30e63e7c2eb9e877230813c172110ea54dc1c915c60405160405180910390a45050505050565b6000806394985ddd60e01b85856040516024016101d3929190610589565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000620324b09050805a101561027d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610274906105cd565b60405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff16836040516102a49190610572565b6000604051808303816000865af19150503d80600081146102e1576040519150601f19603f3d011682016040523d82523d6000602084013e6102e6565b606091505b5050905050505050505050565b600061030661030184610632565b61060d565b905082815260208101848484011115610322576103216107ad565b5b61032d848285610706565b509392505050565b6000813590506103448161081f565b92915050565b60008135905061035981610836565b92915050565b60008151905061036e81610836565b92915050565b600082601f830112610389576103886107a8565b5b81356103998482602086016102f3565b91505092915050565b6000813590506103b18161084d565b92915050565b6000815190506103c68161084d565b92915050565b6000806000606084860312156103e5576103e46107b7565b5b60006103f386828701610335565b9350506020610404868287016103a2565b925050604084013567ffffffffffffffff811115610425576104246107b2565b5b61043186828701610374565b9150509250925092565b60008060408385031215610452576104516107b7565b5b60006104608582860161035f565b9250506020610471858286016103b7565b9150509250929050565b600080600060608486031215610494576104936107b7565b5b60006104a28682870161034a565b93505060206104b3868287016103a2565b92505060406104c486828701610335565b9150509250925092565b6104d78161069c565b82525050565b60006104e882610663565b6104f2818561066e565b9350610502818560208601610715565b80840191505092915050565b610517816106d0565b82525050565b600061052a601b83610679565b9150610535826107cd565b602082019050919050565b600061054d601383610679565b9150610558826107f6565b602082019050919050565b61056c816106c6565b82525050565b600061057e82846104dd565b915081905092915050565b600060408201905061059e60008301856104ce565b6105ab6020830184610563565b9392505050565b60006020820190506105c7600083018461050e565b92915050565b600060208201905081810360008301526105e68161051d565b9050919050565b6000602082019050818103600083015261060681610540565b9050919050565b6000610617610628565b90506106238282610748565b919050565b6000604051905090565b600067ffffffffffffffff82111561064d5761064c610779565b5b610656826107bc565b9050602081019050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000610695826106a6565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006106db826106e2565b9050919050565b60006106ed826106f4565b9050919050565b60006106ff826106a6565b9050919050565b82818337600083830152505050565b60005b83811015610733578082015181840152602081019050610718565b83811115610742576000848401525b50505050565b610751826107bc565b810181811067ffffffffffffffff821117156107705761076f610779565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f6e6f7420656e6f7567682067617320666f7220636f6e73756d65720000000000600082015250565b7f4d75737420757365204c494e4b20746f6b656e00000000000000000000000000600082015250565b6108288161068a565b811461083357600080fd5b50565b61083f8161069c565b811461084a57600080fd5b50565b610856816106c6565b811461086157600080fd5b5056fea2646970667358221220fa51051756dda7c536fd2c6c12ebee0f7566e576e79c2110e719e902875d72b764736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1B6B6D23 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0xA4C0ED36 EQ PUSH2 0x64 JUMPI DUP1 PUSH4 0xCF55FE97 EQ PUSH2 0x80 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E PUSH2 0x9C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x5B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x7E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x79 SWAP2 SWAP1 PUSH2 0x3CC JUMP JUMPDEST PUSH2 0xC0 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x9A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x95 SWAP2 SWAP1 PUSH2 0x47B JUMP JUMPDEST PUSH2 0x1B5 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x14E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x145 SWAP1 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x165 SWAP2 SWAP1 PUSH2 0x43B JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 DUP3 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x7A9A0A6960D95B32CDED93C30E63E7C2EB9E877230813C172110EA54DC1C915C PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH4 0x94985DDD PUSH1 0xE0 SHL DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x1D3 SWAP3 SWAP2 SWAP1 PUSH2 0x589 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP1 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH3 0x324B0 SWAP1 POP DUP1 GAS LT ISZERO PUSH2 0x27D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x274 SWAP1 PUSH2 0x5CD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH1 0x40 MLOAD PUSH2 0x2A4 SWAP2 SWAP1 PUSH2 0x572 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2E1 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2E6 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x306 PUSH2 0x301 DUP5 PUSH2 0x632 JUMP JUMPDEST PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x322 JUMPI PUSH2 0x321 PUSH2 0x7AD JUMP JUMPDEST JUMPDEST PUSH2 0x32D DUP5 DUP3 DUP6 PUSH2 0x706 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x344 DUP2 PUSH2 0x81F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x359 DUP2 PUSH2 0x836 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x36E DUP2 PUSH2 0x836 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x389 JUMPI PUSH2 0x388 PUSH2 0x7A8 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x399 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2F3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x3B1 DUP2 PUSH2 0x84D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3C6 DUP2 PUSH2 0x84D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x3E5 JUMPI PUSH2 0x3E4 PUSH2 0x7B7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x3F3 DUP7 DUP3 DUP8 ADD PUSH2 0x335 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x404 DUP7 DUP3 DUP8 ADD PUSH2 0x3A2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x425 JUMPI PUSH2 0x424 PUSH2 0x7B2 JUMP JUMPDEST JUMPDEST PUSH2 0x431 DUP7 DUP3 DUP8 ADD PUSH2 0x374 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x452 JUMPI PUSH2 0x451 PUSH2 0x7B7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x460 DUP6 DUP3 DUP7 ADD PUSH2 0x35F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x471 DUP6 DUP3 DUP7 ADD PUSH2 0x3B7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x494 JUMPI PUSH2 0x493 PUSH2 0x7B7 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x4A2 DUP7 DUP3 DUP8 ADD PUSH2 0x34A JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x4B3 DUP7 DUP3 DUP8 ADD PUSH2 0x3A2 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x4C4 DUP7 DUP3 DUP8 ADD PUSH2 0x335 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x4D7 DUP2 PUSH2 0x69C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4E8 DUP3 PUSH2 0x663 JUMP JUMPDEST PUSH2 0x4F2 DUP2 DUP6 PUSH2 0x66E JUMP JUMPDEST SWAP4 POP PUSH2 0x502 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x715 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x517 DUP2 PUSH2 0x6D0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x52A PUSH1 0x1B DUP4 PUSH2 0x679 JUMP JUMPDEST SWAP2 POP PUSH2 0x535 DUP3 PUSH2 0x7CD JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x54D PUSH1 0x13 DUP4 PUSH2 0x679 JUMP JUMPDEST SWAP2 POP PUSH2 0x558 DUP3 PUSH2 0x7F6 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x56C DUP2 PUSH2 0x6C6 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x57E DUP3 DUP5 PUSH2 0x4DD JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x59E PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x4CE JUMP JUMPDEST PUSH2 0x5AB PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x563 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x5C7 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x50E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x5E6 DUP2 PUSH2 0x51D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x606 DUP2 PUSH2 0x540 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x617 PUSH2 0x628 JUMP JUMPDEST SWAP1 POP PUSH2 0x623 DUP3 DUP3 PUSH2 0x748 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x64D JUMPI PUSH2 0x64C PUSH2 0x779 JUMP JUMPDEST JUMPDEST PUSH2 0x656 DUP3 PUSH2 0x7BC JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x695 DUP3 PUSH2 0x6A6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6DB DUP3 PUSH2 0x6E2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6ED DUP3 PUSH2 0x6F4 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6FF DUP3 PUSH2 0x6A6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x733 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x718 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x742 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x751 DUP3 PUSH2 0x7BC JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x770 JUMPI PUSH2 0x76F PUSH2 0x779 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x6E6F7420656E6F7567682067617320666F7220636F6E73756D65720000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 0x4D75737420757365204C494E4B20746F6B656E00000000000000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 0x828 DUP2 PUSH2 0x68A JUMP JUMPDEST DUP2 EQ PUSH2 0x833 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x83F DUP2 PUSH2 0x69C JUMP JUMPDEST DUP2 EQ PUSH2 0x84A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 0x856 DUP2 PUSH2 0x6C6 JUMP JUMPDEST DUP2 EQ PUSH2 0x861 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STATICCALL MLOAD SDIV OR JUMP 0xDD 0xA7 0xC5 CALLDATASIZE REVERT 0x2C PUSH13 0x12EBEE0F7566E576E79C2110E7 NOT 0xE9 MUL DUP8 0x5D PUSH19 0xB764736F6C6343000807003300000000000000 ","sourceMap":"138:993:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;170:30;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;397:239;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;640:388;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;170:30;;;;;;;;;;;;:::o;397:239::-;1088:4;;;;;;;;;;1066:27;;:10;:27;;;1058:59;;;;;;;;;;;;:::i;:::-;;;;;;;;;510:15:::1;527:12:::0;554:5:::1;543:37;;;;;;;;;;;;:::i;:::-;509:71;;;;626:4;617:7;609:6;591:40;;;;;;;;;;;;503:133;;397:239:::0;;;:::o;640:388::-;766:17;789;832:31;;;865:9;876:10;809:78;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;789:98;;893:9;905:6;893:18;;938:1;925:9;:14;;917:54;;;;;;;;;;;;:::i;:::-;;;;;;;;;978:12;996:16;:21;;1018:4;996:27;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;977:46;;;760:268;;;;640:388;;;:::o;7:410:10:-;84:5;109:65;125:48;166:6;125:48;:::i;:::-;109:65;:::i;:::-;100:74;;197:6;190:5;183:21;235:4;228:5;224:16;273:3;264:6;259:3;255:16;252:25;249:112;;;280:79;;:::i;:::-;249:112;370:41;404:6;399:3;394;370:41;:::i;:::-;90:327;7:410;;;;;:::o;423:139::-;469:5;507:6;494:20;485:29;;523:33;550:5;523:33;:::i;:::-;423:139;;;;:::o;568:::-;614:5;652:6;639:20;630:29;;668:33;695:5;668:33;:::i;:::-;568:139;;;;:::o;713:143::-;770:5;801:6;795:13;786:22;;817:33;844:5;817:33;:::i;:::-;713:143;;;;:::o;875:338::-;930:5;979:3;972:4;964:6;960:17;956:27;946:122;;987:79;;:::i;:::-;946:122;1104:6;1091:20;1129:78;1203:3;1195:6;1188:4;1180:6;1176:17;1129:78;:::i;:::-;1120:87;;936:277;875:338;;;;:::o;1219:139::-;1265:5;1303:6;1290:20;1281:29;;1319:33;1346:5;1319:33;:::i;:::-;1219:139;;;;:::o;1364:143::-;1421:5;1452:6;1446:13;1437:22;;1468:33;1495:5;1468:33;:::i;:::-;1364:143;;;;:::o;1513:797::-;1599:6;1607;1615;1664:2;1652:9;1643:7;1639:23;1635:32;1632:119;;;1670:79;;:::i;:::-;1632:119;1790:1;1815:53;1860:7;1851:6;1840:9;1836:22;1815:53;:::i;:::-;1805:63;;1761:117;1917:2;1943:53;1988:7;1979:6;1968:9;1964:22;1943:53;:::i;:::-;1933:63;;1888:118;2073:2;2062:9;2058:18;2045:32;2104:18;2096:6;2093:30;2090:117;;;2126:79;;:::i;:::-;2090:117;2231:62;2285:7;2276:6;2265:9;2261:22;2231:62;:::i;:::-;2221:72;;2016:287;1513:797;;;;;:::o;2316:507::-;2395:6;2403;2452:2;2440:9;2431:7;2427:23;2423:32;2420:119;;;2458:79;;:::i;:::-;2420:119;2578:1;2603:64;2659:7;2650:6;2639:9;2635:22;2603:64;:::i;:::-;2593:74;;2549:128;2716:2;2742:64;2798:7;2789:6;2778:9;2774:22;2742:64;:::i;:::-;2732:74;;2687:129;2316:507;;;;;:::o;2829:619::-;2906:6;2914;2922;2971:2;2959:9;2950:7;2946:23;2942:32;2939:119;;;2977:79;;:::i;:::-;2939:119;3097:1;3122:53;3167:7;3158:6;3147:9;3143:22;3122:53;:::i;:::-;3112:63;;3068:117;3224:2;3250:53;3295:7;3286:6;3275:9;3271:22;3250:53;:::i;:::-;3240:63;;3195:118;3352:2;3378:53;3423:7;3414:6;3403:9;3399:22;3378:53;:::i;:::-;3368:63;;3323:118;2829:619;;;;;:::o;3454:118::-;3541:24;3559:5;3541:24;:::i;:::-;3536:3;3529:37;3454:118;;:::o;3578:373::-;3682:3;3710:38;3742:5;3710:38;:::i;:::-;3764:88;3845:6;3840:3;3764:88;:::i;:::-;3757:95;;3861:52;3906:6;3901:3;3894:4;3887:5;3883:16;3861:52;:::i;:::-;3938:6;3933:3;3929:16;3922:23;;3686:265;3578:373;;;;:::o;3957:183::-;4070:63;4127:5;4070:63;:::i;:::-;4065:3;4058:76;3957:183;;:::o;4146:366::-;4288:3;4309:67;4373:2;4368:3;4309:67;:::i;:::-;4302:74;;4385:93;4474:3;4385:93;:::i;:::-;4503:2;4498:3;4494:12;4487:19;;4146:366;;;:::o;4518:::-;4660:3;4681:67;4745:2;4740:3;4681:67;:::i;:::-;4674:74;;4757:93;4846:3;4757:93;:::i;:::-;4875:2;4870:3;4866:12;4859:19;;4518:366;;;:::o;4890:118::-;4977:24;4995:5;4977:24;:::i;:::-;4972:3;4965:37;4890:118;;:::o;5014:271::-;5144:3;5166:93;5255:3;5246:6;5166:93;:::i;:::-;5159:100;;5276:3;5269:10;;5014:271;;;;:::o;5291:332::-;5412:4;5450:2;5439:9;5435:18;5427:26;;5463:71;5531:1;5520:9;5516:17;5507:6;5463:71;:::i;:::-;5544:72;5612:2;5601:9;5597:18;5588:6;5544:72;:::i;:::-;5291:332;;;;;:::o;5629:274::-;5748:4;5786:2;5775:9;5771:18;5763:26;;5799:97;5893:1;5882:9;5878:17;5869:6;5799:97;:::i;:::-;5629:274;;;;:::o;5909:419::-;6075:4;6113:2;6102:9;6098:18;6090:26;;6162:9;6156:4;6152:20;6148:1;6137:9;6133:17;6126:47;6190:131;6316:4;6190:131;:::i;:::-;6182:139;;5909:419;;;:::o;6334:::-;6500:4;6538:2;6527:9;6523:18;6515:26;;6587:9;6581:4;6577:20;6573:1;6562:9;6558:17;6551:47;6615:131;6741:4;6615:131;:::i;:::-;6607:139;;6334:419;;;:::o;6759:129::-;6793:6;6820:20;;:::i;:::-;6810:30;;6849:33;6877:4;6869:6;6849:33;:::i;:::-;6759:129;;;:::o;6894:75::-;6927:6;6960:2;6954:9;6944:19;;6894:75;:::o;6975:307::-;7036:4;7126:18;7118:6;7115:30;7112:56;;;7148:18;;:::i;:::-;7112:56;7186:29;7208:6;7186:29;:::i;:::-;7178:37;;7270:4;7264;7260:15;7252:23;;6975:307;;;:::o;7288:98::-;7339:6;7373:5;7367:12;7357:22;;7288:98;;;:::o;7392:147::-;7493:11;7530:3;7515:18;;7392:147;;;;:::o;7545:169::-;7629:11;7663:6;7658:3;7651:19;7703:4;7698:3;7694:14;7679:29;;7545:169;;;;:::o;7720:96::-;7757:7;7786:24;7804:5;7786:24;:::i;:::-;7775:35;;7720:96;;;:::o;7822:77::-;7859:7;7888:5;7877:16;;7822:77;;;:::o;7905:126::-;7942:7;7982:42;7975:5;7971:54;7960:65;;7905:126;;;:::o;8037:77::-;8074:7;8103:5;8092:16;;8037:77;;;:::o;8120:152::-;8196:9;8229:37;8260:5;8229:37;:::i;:::-;8216:50;;8120:152;;;:::o;8278:126::-;8328:9;8361:37;8392:5;8361:37;:::i;:::-;8348:50;;8278:126;;;:::o;8410:113::-;8460:9;8493:24;8511:5;8493:24;:::i;:::-;8480:37;;8410:113;;;:::o;8529:154::-;8613:6;8608:3;8603;8590:30;8675:1;8666:6;8661:3;8657:16;8650:27;8529:154;;;:::o;8689:307::-;8757:1;8767:113;8781:6;8778:1;8775:13;8767:113;;;8866:1;8861:3;8857:11;8851:18;8847:1;8842:3;8838:11;8831:39;8803:2;8800:1;8796:10;8791:15;;8767:113;;;8898:6;8895:1;8892:13;8889:101;;;8978:1;8969:6;8964:3;8960:16;8953:27;8889:101;8738:258;8689:307;;;:::o;9002:281::-;9085:27;9107:4;9085:27;:::i;:::-;9077:6;9073:40;9215:6;9203:10;9200:22;9179:18;9167:10;9164:34;9161:62;9158:88;;;9226:18;;:::i;:::-;9158:88;9266:10;9262:2;9255:22;9045:238;9002:281;;:::o;9289:180::-;9337:77;9334:1;9327:88;9434:4;9431:1;9424:15;9458:4;9455:1;9448:15;9475:117;9584:1;9581;9574:12;9598:117;9707:1;9704;9697:12;9721:117;9830:1;9827;9820:12;9844:117;9953:1;9950;9943:12;9967:102;10008:6;10059:2;10055:7;10050:2;10043:5;10039:14;10035:28;10025:38;;9967:102;;;:::o;10075:177::-;10215:29;10211:1;10203:6;10199:14;10192:53;10075:177;:::o;10258:169::-;10398:21;10394:1;10386:6;10382:14;10375:45;10258:169;:::o;10433:122::-;10506:24;10524:5;10506:24;:::i;:::-;10499:5;10496:35;10486:63;;10545:1;10542;10535:12;10486:63;10433:122;:::o;10561:::-;10634:24;10652:5;10634:24;:::i;:::-;10627:5;10624:35;10614:63;;10673:1;10670;10663:12;10614:63;10561:122;:::o;10689:::-;10762:24;10780:5;10762:24;:::i;:::-;10755:5;10752:35;10742:63;;10801:1;10798;10791:12;10742:63;10689:122;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"440400","executionCost":"infinite","totalCost":"infinite"},"external":{"LINK()":"2575","callBackWithRandomness(bytes32,uint256,address)":"infinite","onTokenTransfer(address,uint256,bytes)":"infinite"}},"methodIdentifiers":{"LINK()":"1b6b6d23","callBackWithRandomness(bytes32,uint256,address)":"cf55fe97","onTokenTransfer(address,uint256,bytes)":"a4c0ed36"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"linkAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"RandomnessRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LINK\",\"outputs\":[{\"internalType\":\"contract LinkTokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"consumerContract\",\"type\":\"address\"}],\"name\":\"callBackWithRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol\":\"VRFCoordinatorMock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal immutable LINK;\\n  address private immutable vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\\n    private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0xff9e7d773545a1a5d73106e72bfb429da79c1cc4d893fb62051df801d2e61469\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0x2bf1168e8fe548fa990e0aeaf89ef90680f80aa31eeaf901f485df60de51d51b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"../VRFConsumerBase.sol\\\";\\n\\ncontract VRFCoordinatorMock {\\n  LinkTokenInterface public LINK;\\n\\n  event RandomnessRequest(address indexed sender, bytes32 indexed keyHash, uint256 indexed seed);\\n\\n  constructor(address linkAddress) public {\\n    LINK = LinkTokenInterface(linkAddress);\\n  }\\n\\n  function onTokenTransfer(\\n    address sender,\\n    uint256 fee,\\n    bytes memory _data\\n  ) public onlyLINK {\\n    (bytes32 keyHash, uint256 seed) = abi.decode(_data, (bytes32, uint256));\\n    emit RandomnessRequest(sender, keyHash, seed);\\n  }\\n\\n  function callBackWithRandomness(\\n    bytes32 requestId,\\n    uint256 randomness,\\n    address consumerContract\\n  ) public {\\n    VRFConsumerBase v;\\n    bytes memory resp = abi.encodeWithSelector(v.rawFulfillRandomness.selector, requestId, randomness);\\n    uint256 b = 206000;\\n    require(gasleft() >= b, \\\"not enough gas for consumer\\\");\\n    (bool success, ) = consumerContract.call(resp);\\n  }\\n\\n  modifier onlyLINK() {\\n    require(msg.sender == address(LINK), \\\"Must use LINK token\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2b543e45ccc04fc3e4735c151e726d1d279fae0346cc572d4e8fb88817c4f619\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":449,"contract":"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorMock.sol:VRFCoordinatorMock","label":"LINK","offset":0,"slot":"0","type":"t_contract(LinkTokenInterface)346"}],"types":{"t_contract(LinkTokenInterface)346":{"encoding":"inplace","label":"contract LinkTokenInterface","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/Rafle.sol":{"Raffle":{"abi":[{"inputs":[{"internalType":"address","name":"vrfCoordinatorV2","type":"address"},{"internalType":"uint256","name":"entranceFee","type":"uint256"},{"internalType":"bytes32","name":"gasLane","type":"bytes32"},{"internalType":"uint64","name":"subscriptionId","type":"uint64"},{"internalType":"uint32","name":"gasLimit","type":"uint32"},{"internalType":"uint256","name":"interval","type":"uint256"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"have","type":"address"},{"internalType":"address","name":"want","type":"address"}],"name":"OnlyCoordinatorCanFulfill","type":"error"},{"inputs":[],"name":"Raffle__NotEnoughETHEntered","type":"error"},{"inputs":[],"name":"Raffle__NotOpen","type":"error"},{"inputs":[],"name":"Raffle__TransferFailed","type":"error"},{"inputs":[{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"numPlayers","type":"uint256"},{"internalType":"uint256","name":"raffleState","type":"uint256"}],"name":"Raffle__UpkeepNotNeeded","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"player","type":"address"}],"name":"RaffleEnter","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"requestId","type":"uint256"}],"name":"requestedRaffleWinner","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"winner","type":"address"}],"name":"winnerPicked","type":"event"},{"inputs":[{"internalType":"bytes","name":"","type":"bytes"}],"name":"checkUpkeep","outputs":[{"internalType":"bool","name":"upkeepNeeded","type":"bool"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"enterRaffle","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"getEntranceFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getLastTimeStamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getNumWords","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getNumberOfPlayers","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getPlayers","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRaffleState","outputs":[{"internalType":"enum Raffle.RaffleState","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRecentWinner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRequestConfirmation","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"","type":"bytes"}],"name":"performUpkeep","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"requestId","type":"uint256"},{"internalType":"uint256[]","name":"randomWords","type":"uint256[]"}],"name":"rawFulfillRandomWords","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_142":{"entryPoint":null,"id":142,"parameterSlots":1,"returnSlots":0},"@_684":{"entryPoint":null,"id":684,"parameterSlots":6,"returnSlots":0},"abi_decode_t_address_fromMemory":{"entryPoint":314,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes32_fromMemory":{"entryPoint":337,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":360,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint32_fromMemory":{"entryPoint":383,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint64_fromMemory":{"entryPoint":406,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256t_bytes32t_uint64t_uint32t_uint256_fromMemory":{"entryPoint":429,"id":null,"parameterSlots":2,"returnSlots":6},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_address":{"entryPoint":585,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":605,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":615,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":647,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint32":{"entryPoint":657,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":673,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x21":{"entryPoint":693,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":740,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_address":{"entryPoint":745,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes32":{"entryPoint":771,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":797,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint32":{"entryPoint":823,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint64":{"entryPoint":849,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:3636:10","statements":[{"body":{"nodeType":"YulBlock","src":"70:80:10","statements":[{"nodeType":"YulAssignment","src":"80:22:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"95:6:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"89:5:10"},"nodeType":"YulFunctionCall","src":"89:13:10"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"80:5:10"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"138:5:10"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"111:26:10"},"nodeType":"YulFunctionCall","src":"111:33:10"},"nodeType":"YulExpressionStatement","src":"111:33:10"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"48:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"56:3:10","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"64:5:10","type":""}],"src":"7:143:10"},{"body":{"nodeType":"YulBlock","src":"219:80:10","statements":[{"nodeType":"YulAssignment","src":"229:22:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"244:6:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"238:5:10"},"nodeType":"YulFunctionCall","src":"238:13:10"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"229:5:10"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"287:5:10"}],"functionName":{"name":"validator_revert_t_bytes32","nodeType":"YulIdentifier","src":"260:26:10"},"nodeType":"YulFunctionCall","src":"260:33:10"},"nodeType":"YulExpressionStatement","src":"260:33:10"}]},"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"197:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"205:3:10","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"213:5:10","type":""}],"src":"156:143:10"},{"body":{"nodeType":"YulBlock","src":"368:80:10","statements":[{"nodeType":"YulAssignment","src":"378:22:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"393:6:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"387:5:10"},"nodeType":"YulFunctionCall","src":"387:13:10"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"378:5:10"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"436:5:10"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"409:26:10"},"nodeType":"YulFunctionCall","src":"409:33:10"},"nodeType":"YulExpressionStatement","src":"409:33:10"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"346:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"354:3:10","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"362:5:10","type":""}],"src":"305:143:10"},{"body":{"nodeType":"YulBlock","src":"516:79:10","statements":[{"nodeType":"YulAssignment","src":"526:22:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"541:6:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"535:5:10"},"nodeType":"YulFunctionCall","src":"535:13:10"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"526:5:10"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"583:5:10"}],"functionName":{"name":"validator_revert_t_uint32","nodeType":"YulIdentifier","src":"557:25:10"},"nodeType":"YulFunctionCall","src":"557:32:10"},"nodeType":"YulExpressionStatement","src":"557:32:10"}]},"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"494:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"502:3:10","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"510:5:10","type":""}],"src":"454:141:10"},{"body":{"nodeType":"YulBlock","src":"663:79:10","statements":[{"nodeType":"YulAssignment","src":"673:22:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"688:6:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"682:5:10"},"nodeType":"YulFunctionCall","src":"682:13:10"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"673:5:10"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"730:5:10"}],"functionName":{"name":"validator_revert_t_uint64","nodeType":"YulIdentifier","src":"704:25:10"},"nodeType":"YulFunctionCall","src":"704:32:10"},"nodeType":"YulExpressionStatement","src":"704:32:10"}]},"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"641:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"649:3:10","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"657:5:10","type":""}],"src":"601:141:10"},{"body":{"nodeType":"YulBlock","src":"908:970:10","statements":[{"body":{"nodeType":"YulBlock","src":"955:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"957:77:10"},"nodeType":"YulFunctionCall","src":"957:79:10"},"nodeType":"YulExpressionStatement","src":"957:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"929:7:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"938:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"925:3:10"},"nodeType":"YulFunctionCall","src":"925:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"950:3:10","type":"","value":"192"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"921:3:10"},"nodeType":"YulFunctionCall","src":"921:33:10"},"nodeType":"YulIf","src":"918:120:10"},{"nodeType":"YulBlock","src":"1048:128:10","statements":[{"nodeType":"YulVariableDeclaration","src":"1063:15:10","value":{"kind":"number","nodeType":"YulLiteral","src":"1077:1:10","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1067:6:10","type":""}]},{"nodeType":"YulAssignment","src":"1092:74:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1138:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"1149:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1134:3:10"},"nodeType":"YulFunctionCall","src":"1134:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1158:7:10"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"1102:31:10"},"nodeType":"YulFunctionCall","src":"1102:64:10"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1092:6:10"}]}]},{"nodeType":"YulBlock","src":"1186:129:10","statements":[{"nodeType":"YulVariableDeclaration","src":"1201:16:10","value":{"kind":"number","nodeType":"YulLiteral","src":"1215:2:10","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1205:6:10","type":""}]},{"nodeType":"YulAssignment","src":"1231:74:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1277:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"1288:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1273:3:10"},"nodeType":"YulFunctionCall","src":"1273:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1297:7:10"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"1241:31:10"},"nodeType":"YulFunctionCall","src":"1241:64:10"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1231:6:10"}]}]},{"nodeType":"YulBlock","src":"1325:129:10","statements":[{"nodeType":"YulVariableDeclaration","src":"1340:16:10","value":{"kind":"number","nodeType":"YulLiteral","src":"1354:2:10","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1344:6:10","type":""}]},{"nodeType":"YulAssignment","src":"1370:74:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"1427:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:10"},"nodeType":"YulFunctionCall","src":"1412:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1436:7:10"}],"functionName":{"name":"abi_decode_t_bytes32_fromMemory","nodeType":"YulIdentifier","src":"1380:31:10"},"nodeType":"YulFunctionCall","src":"1380:64:10"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1370:6:10"}]}]},{"nodeType":"YulBlock","src":"1464:128:10","statements":[{"nodeType":"YulVariableDeclaration","src":"1479:16:10","value":{"kind":"number","nodeType":"YulLiteral","src":"1493:2:10","type":"","value":"96"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1483:6:10","type":""}]},{"nodeType":"YulAssignment","src":"1509:73:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1554:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"1565:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1550:3:10"},"nodeType":"YulFunctionCall","src":"1550:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1574:7:10"}],"functionName":{"name":"abi_decode_t_uint64_fromMemory","nodeType":"YulIdentifier","src":"1519:30:10"},"nodeType":"YulFunctionCall","src":"1519:63:10"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1509:6:10"}]}]},{"nodeType":"YulBlock","src":"1602:129:10","statements":[{"nodeType":"YulVariableDeclaration","src":"1617:17:10","value":{"kind":"number","nodeType":"YulLiteral","src":"1631:3:10","type":"","value":"128"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1621:6:10","type":""}]},{"nodeType":"YulAssignment","src":"1648:73:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1693:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"1704:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1689:3:10"},"nodeType":"YulFunctionCall","src":"1689:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1713:7:10"}],"functionName":{"name":"abi_decode_t_uint32_fromMemory","nodeType":"YulIdentifier","src":"1658:30:10"},"nodeType":"YulFunctionCall","src":"1658:63:10"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1648:6:10"}]}]},{"nodeType":"YulBlock","src":"1741:130:10","statements":[{"nodeType":"YulVariableDeclaration","src":"1756:17:10","value":{"kind":"number","nodeType":"YulLiteral","src":"1770:3:10","type":"","value":"160"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1760:6:10","type":""}]},{"nodeType":"YulAssignment","src":"1787:74:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1833:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"1844:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1829:3:10"},"nodeType":"YulFunctionCall","src":"1829:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1853:7:10"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"1797:31:10"},"nodeType":"YulFunctionCall","src":"1797:64:10"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"1787:6:10"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_bytes32t_uint64t_uint32t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"838:9:10","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"849:7:10","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"861:6:10","type":""},{"name":"value1","nodeType":"YulTypedName","src":"869:6:10","type":""},{"name":"value2","nodeType":"YulTypedName","src":"877:6:10","type":""},{"name":"value3","nodeType":"YulTypedName","src":"885:6:10","type":""},{"name":"value4","nodeType":"YulTypedName","src":"893:6:10","type":""},{"name":"value5","nodeType":"YulTypedName","src":"901:6:10","type":""}],"src":"748:1130:10"},{"body":{"nodeType":"YulBlock","src":"1924:35:10","statements":[{"nodeType":"YulAssignment","src":"1934:19:10","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1950:2:10","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1944:5:10"},"nodeType":"YulFunctionCall","src":"1944:9:10"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1934:6:10"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1917:6:10","type":""}],"src":"1884:75:10"},{"body":{"nodeType":"YulBlock","src":"2010:51:10","statements":[{"nodeType":"YulAssignment","src":"2020:35:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2049:5:10"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"2031:17:10"},"nodeType":"YulFunctionCall","src":"2031:24:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2020:7:10"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1992:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2002:7:10","type":""}],"src":"1965:96:10"},{"body":{"nodeType":"YulBlock","src":"2112:32:10","statements":[{"nodeType":"YulAssignment","src":"2122:16:10","value":{"name":"value","nodeType":"YulIdentifier","src":"2133:5:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2122:7:10"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2094:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2104:7:10","type":""}],"src":"2067:77:10"},{"body":{"nodeType":"YulBlock","src":"2195:81:10","statements":[{"nodeType":"YulAssignment","src":"2205:65:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2220:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"2227:42:10","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2216:3:10"},"nodeType":"YulFunctionCall","src":"2216:54:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2205:7:10"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2177:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2187:7:10","type":""}],"src":"2150:126:10"},{"body":{"nodeType":"YulBlock","src":"2327:32:10","statements":[{"nodeType":"YulAssignment","src":"2337:16:10","value":{"name":"value","nodeType":"YulIdentifier","src":"2348:5:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2337:7:10"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2309:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2319:7:10","type":""}],"src":"2282:77:10"},{"body":{"nodeType":"YulBlock","src":"2409:49:10","statements":[{"nodeType":"YulAssignment","src":"2419:33:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2434:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"2441:10:10","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2430:3:10"},"nodeType":"YulFunctionCall","src":"2430:22:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2419:7:10"}]}]},"name":"cleanup_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2391:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2401:7:10","type":""}],"src":"2365:93:10"},{"body":{"nodeType":"YulBlock","src":"2508:57:10","statements":[{"nodeType":"YulAssignment","src":"2518:41:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2533:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"2540:18:10","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2529:3:10"},"nodeType":"YulFunctionCall","src":"2529:30:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2518:7:10"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2490:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2500:7:10","type":""}],"src":"2464:101:10"},{"body":{"nodeType":"YulBlock","src":"2599:152:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2616:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2619:77:10","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2609:6:10"},"nodeType":"YulFunctionCall","src":"2609:88:10"},"nodeType":"YulExpressionStatement","src":"2609:88:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2713:1:10","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2716:4:10","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2706:6:10"},"nodeType":"YulFunctionCall","src":"2706:15:10"},"nodeType":"YulExpressionStatement","src":"2706:15:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2737:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2740:4:10","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2730:6:10"},"nodeType":"YulFunctionCall","src":"2730:15:10"},"nodeType":"YulExpressionStatement","src":"2730:15:10"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"2571:180:10"},{"body":{"nodeType":"YulBlock","src":"2846:28:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2863:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2866:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2856:6:10"},"nodeType":"YulFunctionCall","src":"2856:12:10"},"nodeType":"YulExpressionStatement","src":"2856:12:10"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"2757:117:10"},{"body":{"nodeType":"YulBlock","src":"2969:28:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2986:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2989:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2979:6:10"},"nodeType":"YulFunctionCall","src":"2979:12:10"},"nodeType":"YulExpressionStatement","src":"2979:12:10"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"2880:117:10"},{"body":{"nodeType":"YulBlock","src":"3046:79:10","statements":[{"body":{"nodeType":"YulBlock","src":"3103:16:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3112:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3115:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3105:6:10"},"nodeType":"YulFunctionCall","src":"3105:12:10"},"nodeType":"YulExpressionStatement","src":"3105:12:10"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3069:5:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3094:5:10"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3076:17:10"},"nodeType":"YulFunctionCall","src":"3076:24:10"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3066:2:10"},"nodeType":"YulFunctionCall","src":"3066:35:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3059:6:10"},"nodeType":"YulFunctionCall","src":"3059:43:10"},"nodeType":"YulIf","src":"3056:63:10"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3039:5:10","type":""}],"src":"3003:122:10"},{"body":{"nodeType":"YulBlock","src":"3174:79:10","statements":[{"body":{"nodeType":"YulBlock","src":"3231:16:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3240:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3243:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3233:6:10"},"nodeType":"YulFunctionCall","src":"3233:12:10"},"nodeType":"YulExpressionStatement","src":"3233:12:10"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3197:5:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3222:5:10"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"3204:17:10"},"nodeType":"YulFunctionCall","src":"3204:24:10"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3194:2:10"},"nodeType":"YulFunctionCall","src":"3194:35:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3187:6:10"},"nodeType":"YulFunctionCall","src":"3187:43:10"},"nodeType":"YulIf","src":"3184:63:10"}]},"name":"validator_revert_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3167:5:10","type":""}],"src":"3131:122:10"},{"body":{"nodeType":"YulBlock","src":"3302:79:10","statements":[{"body":{"nodeType":"YulBlock","src":"3359:16:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3368:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3371:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3361:6:10"},"nodeType":"YulFunctionCall","src":"3361:12:10"},"nodeType":"YulExpressionStatement","src":"3361:12:10"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3325:5:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3350:5:10"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3332:17:10"},"nodeType":"YulFunctionCall","src":"3332:24:10"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3322:2:10"},"nodeType":"YulFunctionCall","src":"3322:35:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3315:6:10"},"nodeType":"YulFunctionCall","src":"3315:43:10"},"nodeType":"YulIf","src":"3312:63:10"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3295:5:10","type":""}],"src":"3259:122:10"},{"body":{"nodeType":"YulBlock","src":"3429:78:10","statements":[{"body":{"nodeType":"YulBlock","src":"3485:16:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3494:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3497:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3487:6:10"},"nodeType":"YulFunctionCall","src":"3487:12:10"},"nodeType":"YulExpressionStatement","src":"3487:12:10"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3452:5:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3476:5:10"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"3459:16:10"},"nodeType":"YulFunctionCall","src":"3459:23:10"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3449:2:10"},"nodeType":"YulFunctionCall","src":"3449:34:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3442:6:10"},"nodeType":"YulFunctionCall","src":"3442:42:10"},"nodeType":"YulIf","src":"3439:62:10"}]},"name":"validator_revert_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3422:5:10","type":""}],"src":"3387:120:10"},{"body":{"nodeType":"YulBlock","src":"3555:78:10","statements":[{"body":{"nodeType":"YulBlock","src":"3611:16:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3620:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3623:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3613:6:10"},"nodeType":"YulFunctionCall","src":"3613:12:10"},"nodeType":"YulExpressionStatement","src":"3613:12:10"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3578:5:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3602:5:10"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"3585:16:10"},"nodeType":"YulFunctionCall","src":"3585:23:10"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3575:2:10"},"nodeType":"YulFunctionCall","src":"3575:34:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3568:6:10"},"nodeType":"YulFunctionCall","src":"3568:42:10"},"nodeType":"YulIf","src":"3565:62:10"}]},"name":"validator_revert_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3548:5:10","type":""}],"src":"3513:120:10"}]},"contents":"{\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_t_bytes32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_t_uint32_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint32(value)\n    }\n\n    function abi_decode_t_uint64_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint64(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_bytes32t_uint64t_uint32t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5 {\n        if slt(sub(dataEnd, headStart), 192) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_bytes32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint64_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_uint32_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint32(value) {\n        if iszero(eq(value, cleanup_t_uint32(value))) { revert(0, 0) }\n    }\n\n    function validator_revert_t_uint64(value) {\n        if iszero(eq(value, cleanup_t_uint64(value))) { revert(0, 0) }\n    }\n\n}\n","id":10,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6101606040523480156200001257600080fd5b50604051620017c4380380620017c48339818101604052810190620000389190620001ad565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250506000600160146101000a81548160ff02191690836001811115620001195762000118620002b5565b5b0217905550426002819055508061014081815250505050505050506200036b565b6000815190506200014b81620002e9565b92915050565b600081519050620001628162000303565b92915050565b60008151905062000179816200031d565b92915050565b600081519050620001908162000337565b92915050565b600081519050620001a78162000351565b92915050565b60008060008060008060c08789031215620001cd57620001cc620002e4565b5b6000620001dd89828a016200013a565b9650506020620001f089828a0162000168565b95505060406200020389828a0162000151565b94505060606200021689828a0162000196565b93505060806200022989828a016200017f565b92505060a06200023c89828a0162000168565b9150509295509295509295565b6000620002568262000267565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002f48162000249565b81146200030057600080fd5b50565b6200030e816200025d565b81146200031a57600080fd5b50565b620003288162000287565b81146200033457600080fd5b50565b620003428162000291565b81146200034e57600080fd5b50565b6200035c81620002a1565b81146200036857600080fd5b50565b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c610140516113e4620003e060003960006107e0015260006106550152600061063201526000610611015260006105d50152600081816102b401526103b10152600081816102f1015261034501526113e46000f3fe6080604052600436106100a75760003560e01c8063473f1ddc11610064578063473f1ddc1461019b57806353a2c19a146101c65780636e04ff0d146101f1578063c1c244e81461022f578063ca6a9ef81461025a578063fd6673f514610285576100a7565b806309bc33a7146100ac578063115cbaf5146100d75780631fe543e3146101025780632cfcc5391461012b5780634585e33b14610135578063460e20491461015e575b600080fd5b3480156100b857600080fd5b506100c16102b0565b6040516100ce9190610fea565b60405180910390f35b3480156100e357600080fd5b506100ec6102d8565b6040516100f99190610fcf565b60405180910390f35b34801561010e57600080fd5b5061012960048036038101906101249190610dc3565b6102ef565b005b6101336103af565b005b34801561014157600080fd5b5061015c60048036038101906101579190610cd3565b61051e565b005b34801561016a57600080fd5b5061018560048036038101906101809190610d69565b61071d565b6040516101929190610f08565b60405180910390f35b3480156101a757600080fd5b506101b0610764565b6040516101bd9190610f08565b60405180910390f35b3480156101d257600080fd5b506101db61078e565b6040516101e89190610fea565b60405180910390f35b3480156101fd57600080fd5b5061021860048036038101906102139190610d20565b61079d565b604051610226929190610f4c565b60405180910390f35b34801561023b57600080fd5b5061024461084a565b6040516102519190610fea565b60405180910390f35b34801561026657600080fd5b5061026f610854565b60405161027c9190610fea565b60405180910390f35b34801561029157600080fd5b5061029a610861565b6040516102a79190610fea565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610398929190610f23565b60405180910390fd5b6103ab828261086d565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610409576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561041d5761041c6112c4565b5b600160149054906101000a900460ff16600181111561043f5761043e6112c4565b5b14610476576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006105386040518060200160405280600081525061079d565b509050806105a75747600080549050600160149054906101000a900460ff166001811115610569576105686112c4565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161059e93929190611005565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156105cc576105cb6112c4565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610696959493929190610f7c565b602060405180830381600087803b1580156106b057600080fd5b505af11580156106c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e89190610d96565b9050807fe0abfa81226f1e2ce09ba287cbb4c241e89b2b891a389274bb7d9c46e344daf060405160405180910390a250505050565b6000808281548110610732576107316112f3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b600060606000600160149054906101000a900460ff1660018111156107c5576107c46112c4565b5b600060018111156107d9576107d86112c4565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261080d91906110e5565b1190506000806000805490501190506000804711905083801561082d5750825b80156108365750815b801561083f5750805b955050505050915091565b6000600254905090565b6000600361ffff16905090565b60008080549050905090565b6000808054905082600081518110610888576108876112f3565b5b602002602001015161089a9190611235565b905060008082815481106108b1576108b06112f3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610945576109446112c4565b5b0217905550600067ffffffffffffffff81111561096557610964611322565b5b6040519080825280602002602001820160405280156109935781602001602082028036833780820191505090505b50600090805190602001906109a9929190610a9e565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff16476040516109d790610ef3565b60006040518083038185875af1925050503d8060008114610a14576040519150601f19603f3d011682016040523d82523d6000602084013e610a19565b606091505b5050905080610a54576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d160405160405180910390a25050505050565b828054828255906000526020600020908101928215610b17579160200282015b82811115610b165782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610abe565b5b509050610b249190610b28565b5090565b5b80821115610b41576000816000905550600101610b29565b5090565b6000610b58610b5384611061565b61103c565b90508083825260208201905082856020860282011115610b7b57610b7a61135b565b5b60005b85811015610bab5781610b918882610ca9565b845260208401935060208301925050600181019050610b7e565b5050509392505050565b6000610bc8610bc38461108d565b61103c565b905082815260208101848484011115610be457610be3611360565b5b610bef8482856111c2565b509392505050565b600082601f830112610c0c57610c0b611356565b5b8135610c1c848260208601610b45565b91505092915050565b60008083601f840112610c3b57610c3a611356565b5b8235905067ffffffffffffffff811115610c5857610c57611351565b5b602083019150836001820283011115610c7457610c7361135b565b5b9250929050565b600082601f830112610c9057610c8f611356565b5b8135610ca0848260208601610bb5565b91505092915050565b600081359050610cb881611397565b92915050565b600081519050610ccd81611397565b92915050565b60008060208385031215610cea57610ce961136a565b5b600083013567ffffffffffffffff811115610d0857610d07611365565b5b610d1485828601610c25565b92509250509250929050565b600060208284031215610d3657610d3561136a565b5b600082013567ffffffffffffffff811115610d5457610d53611365565b5b610d6084828501610c7b565b91505092915050565b600060208284031215610d7f57610d7e61136a565b5b6000610d8d84828501610ca9565b91505092915050565b600060208284031215610dac57610dab61136a565b5b6000610dba84828501610cbe565b91505092915050565b60008060408385031215610dda57610dd961136a565b5b6000610de885828601610ca9565b925050602083013567ffffffffffffffff811115610e0957610e08611365565b5b610e1585828601610bf7565b9150509250929050565b610e2881611119565b82525050565b610e378161112b565b82525050565b610e4681611137565b82525050565b6000610e57826110be565b610e6181856110c9565b9350610e718185602086016111d1565b610e7a8161136f565b840191505092915050565b610e8e816111b0565b82525050565b6000610ea16000836110da565b9150610eac82611380565b600082019050919050565b610ec081611154565b82525050565b610ecf81611182565b82525050565b610ede8161118c565b82525050565b610eed8161119c565b82525050565b6000610efe82610e94565b9150819050919050565b6000602082019050610f1d6000830184610e1f565b92915050565b6000604082019050610f386000830185610e1f565b610f456020830184610e1f565b9392505050565b6000604082019050610f616000830185610e2e565b8181036020830152610f738184610e4c565b90509392505050565b600060a082019050610f916000830188610e3d565b610f9e6020830187610ee4565b610fab6040830186610eb7565b610fb86060830185610ed5565b610fc56080830184610ed5565b9695505050505050565b6000602082019050610fe46000830184610e85565b92915050565b6000602082019050610fff6000830184610ec6565b92915050565b600060608201905061101a6000830186610ec6565b6110276020830185610ec6565b6110346040830184610ec6565b949350505050565b6000611046611057565b90506110528282611204565b919050565b6000604051905090565b600067ffffffffffffffff82111561107c5761107b611322565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156110a8576110a7611322565b5b6110b18261136f565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006110f082611182565b91506110fb83611182565b92508282101561110e5761110d611266565b5b828203905092915050565b600061112482611162565b9050919050565b60008115159050919050565b6000819050919050565b600081905061114f82611383565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006111bb82611141565b9050919050565b82818337600083830152505050565b60005b838110156111ef5780820151818401526020810190506111d4565b838111156111fe576000848401525b50505050565b61120d8261136f565b810181811067ffffffffffffffff8211171561122c5761122b611322565b5b80604052505050565b600061124082611182565b915061124b83611182565b92508261125b5761125a611295565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b60028110611394576113936112c4565b5b50565b6113a081611182565b81146113ab57600080fd5b5056fea2646970667358221220ed906d716b1563899c20f928ba0a31f2a0a0d1191f4cd7d278682fa832048d0664736f6c63430008070033","opcodes":"PUSH2 0x160 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x17C4 CODESIZE SUB DUP1 PUSH3 0x17C4 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x38 SWAP2 SWAP1 PUSH3 0x1AD JUMP JUMPDEST DUP6 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP POP DUP5 PUSH1 0xA0 DUP2 DUP2 MSTORE POP POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SHL DUP2 MSTORE POP POP DUP4 PUSH1 0xE0 DUP2 DUP2 MSTORE POP POP DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH2 0x100 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xC0 SHL DUP2 MSTORE POP POP DUP2 PUSH4 0xFFFFFFFF AND PUSH2 0x120 DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE POP POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH3 0x119 JUMPI PUSH3 0x118 PUSH3 0x2B5 JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP TIMESTAMP PUSH1 0x2 DUP2 SWAP1 SSTORE POP DUP1 PUSH2 0x140 DUP2 DUP2 MSTORE POP POP POP POP POP POP POP POP PUSH3 0x36B JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x14B DUP2 PUSH3 0x2E9 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x162 DUP2 PUSH3 0x303 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x179 DUP2 PUSH3 0x31D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x190 DUP2 PUSH3 0x337 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH3 0x1A7 DUP2 PUSH3 0x351 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x1CD JUMPI PUSH3 0x1CC PUSH3 0x2E4 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x1DD DUP10 DUP3 DUP11 ADD PUSH3 0x13A JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH3 0x1F0 DUP10 DUP3 DUP11 ADD PUSH3 0x168 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH3 0x203 DUP10 DUP3 DUP11 ADD PUSH3 0x151 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH3 0x216 DUP10 DUP3 DUP11 ADD PUSH3 0x196 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH3 0x229 DUP10 DUP3 DUP11 ADD PUSH3 0x17F JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH3 0x23C DUP10 DUP3 DUP11 ADD PUSH3 0x168 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x256 DUP3 PUSH3 0x267 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2F4 DUP2 PUSH3 0x249 JUMP JUMPDEST DUP2 EQ PUSH3 0x300 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x30E DUP2 PUSH3 0x25D JUMP JUMPDEST DUP2 EQ PUSH3 0x31A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x328 DUP2 PUSH3 0x287 JUMP JUMPDEST DUP2 EQ PUSH3 0x334 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x342 DUP2 PUSH3 0x291 JUMP JUMPDEST DUP2 EQ PUSH3 0x34E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH3 0x35C DUP2 PUSH3 0x2A1 JUMP JUMPDEST DUP2 EQ PUSH3 0x368 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0x60 SHR PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0x60 SHR PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH1 0xC0 SHR PUSH2 0x120 MLOAD PUSH1 0xE0 SHR PUSH2 0x140 MLOAD PUSH2 0x13E4 PUSH3 0x3E0 PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x7E0 ADD MSTORE PUSH1 0x0 PUSH2 0x655 ADD MSTORE PUSH1 0x0 PUSH2 0x632 ADD MSTORE PUSH1 0x0 PUSH2 0x611 ADD MSTORE PUSH1 0x0 PUSH2 0x5D5 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x2B4 ADD MSTORE PUSH2 0x3B1 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x2F1 ADD MSTORE PUSH2 0x345 ADD MSTORE PUSH2 0x13E4 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA7 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x473F1DDC GT PUSH2 0x64 JUMPI DUP1 PUSH4 0x473F1DDC EQ PUSH2 0x19B JUMPI DUP1 PUSH4 0x53A2C19A EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0x6E04FF0D EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0xC1C244E8 EQ PUSH2 0x22F JUMPI DUP1 PUSH4 0xCA6A9EF8 EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0xFD6673F5 EQ PUSH2 0x285 JUMPI PUSH2 0xA7 JUMP JUMPDEST DUP1 PUSH4 0x9BC33A7 EQ PUSH2 0xAC JUMPI DUP1 PUSH4 0x115CBAF5 EQ PUSH2 0xD7 JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x102 JUMPI DUP1 PUSH4 0x2CFCC539 EQ PUSH2 0x12B JUMPI DUP1 PUSH4 0x4585E33B EQ PUSH2 0x135 JUMPI DUP1 PUSH4 0x460E2049 EQ PUSH2 0x15E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0x2B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCE SWAP2 SWAP1 PUSH2 0xFEA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH2 0x2D8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF9 SWAP2 SWAP1 PUSH2 0xFCF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x129 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x124 SWAP2 SWAP1 PUSH2 0xDC3 JUMP JUMPDEST PUSH2 0x2EF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x133 PUSH2 0x3AF JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x141 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x157 SWAP2 SWAP1 PUSH2 0xCD3 JUMP JUMPDEST PUSH2 0x51E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x185 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x180 SWAP2 SWAP1 PUSH2 0xD69 JUMP JUMPDEST PUSH2 0x71D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x192 SWAP2 SWAP1 PUSH2 0xF08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH2 0x764 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BD SWAP2 SWAP1 PUSH2 0xF08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DB PUSH2 0x78E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0xFEA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x218 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x213 SWAP2 SWAP1 PUSH2 0xD20 JUMP JUMPDEST PUSH2 0x79D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x226 SWAP3 SWAP2 SWAP1 PUSH2 0xF4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x244 PUSH2 0x84A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x251 SWAP2 SWAP1 PUSH2 0xFEA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26F PUSH2 0x854 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27C SWAP2 SWAP1 PUSH2 0xFEA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x291 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29A PUSH2 0x861 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A7 SWAP2 SWAP1 PUSH2 0xFEA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3A1 JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x398 SWAP3 SWAP2 SWAP1 PUSH2 0xF23 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3AB DUP3 DUP3 PUSH2 0x86D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x0 CALLVALUE LT ISZERO PUSH2 0x409 JUMPI PUSH1 0x40 MLOAD PUSH32 0xBD4E069500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x41D JUMPI PUSH2 0x41C PUSH2 0x12C4 JUMP JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x43F JUMPI PUSH2 0x43E PUSH2 0x12C4 JUMP JUMPDEST JUMPDEST EQ PUSH2 0x476 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1425571C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x805E1D667BDDB8A95F0F09880CF94F403FB596CE79928D9F29B74203BA284D4 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x538 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x79D JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH2 0x5A7 JUMPI SELFBALANCE PUSH1 0x0 DUP1 SLOAD SWAP1 POP PUSH1 0x1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x569 JUMPI PUSH2 0x568 PUSH2 0x12C4 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x584327AA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x59E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1005 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x5CC JUMPI PUSH2 0x5CB PUSH2 0x12C4 JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D3B1D30 PUSH32 0x0 PUSH32 0x0 PUSH1 0x3 PUSH32 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x696 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xF7C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6C4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6E8 SWAP2 SWAP1 PUSH2 0xD96 JUMP JUMPDEST SWAP1 POP DUP1 PUSH32 0xE0ABFA81226F1E2CE09BA287CBB4C241E89B2B891A389274BB7D9C46E344DAF0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x732 JUMPI PUSH2 0x731 PUSH2 0x12F3 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH4 0xFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x7C5 JUMPI PUSH2 0x7C4 PUSH2 0x12C4 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x7D9 JUMPI PUSH2 0x7D8 PUSH2 0x12C4 JUMP JUMPDEST JUMPDEST EQ SWAP1 POP PUSH1 0x0 PUSH32 0x0 PUSH1 0x2 SLOAD TIMESTAMP PUSH2 0x80D SWAP2 SWAP1 PUSH2 0x10E5 JUMP JUMPDEST GT SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SLOAD SWAP1 POP GT SWAP1 POP PUSH1 0x0 DUP1 SELFBALANCE GT SWAP1 POP DUP4 DUP1 ISZERO PUSH2 0x82D JUMPI POP DUP3 JUMPDEST DUP1 ISZERO PUSH2 0x836 JUMPI POP DUP2 JUMPDEST DUP1 ISZERO PUSH2 0x83F JUMPI POP DUP1 JUMPDEST SWAP6 POP POP POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH2 0xFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 SLOAD SWAP1 POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x888 JUMPI PUSH2 0x887 PUSH2 0x12F3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x89A SWAP2 SWAP1 PUSH2 0x1235 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x8B1 JUMPI PUSH2 0x8B0 PUSH2 0x12F3 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x945 JUMPI PUSH2 0x944 PUSH2 0x12C4 JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x965 JUMPI PUSH2 0x964 PUSH2 0x1322 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x993 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x9A9 SWAP3 SWAP2 SWAP1 PUSH2 0xA9E JUMP JUMPDEST POP TIMESTAMP PUSH1 0x2 DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SELFBALANCE PUSH1 0x40 MLOAD PUSH2 0x9D7 SWAP1 PUSH2 0xEF3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xA14 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA19 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xA54 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA1D04B3900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x794919B0F484B8E90B1B817AC7F880F846FBD8A9813DEE2A378E820DB094E3D1 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0xB17 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xB16 JUMPI DUP3 MLOAD DUP3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xABE JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0xB24 SWAP2 SWAP1 PUSH2 0xB28 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xB41 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0xB29 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB58 PUSH2 0xB53 DUP5 PUSH2 0x1061 JUMP JUMPDEST PUSH2 0x103C JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x20 DUP7 MUL DUP3 ADD GT ISZERO PUSH2 0xB7B JUMPI PUSH2 0xB7A PUSH2 0x135B JUMP JUMPDEST JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xBAB JUMPI DUP2 PUSH2 0xB91 DUP9 DUP3 PUSH2 0xCA9 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xB7E JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBC8 PUSH2 0xBC3 DUP5 PUSH2 0x108D JUMP JUMPDEST PUSH2 0x103C JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0xBE4 JUMPI PUSH2 0xBE3 PUSH2 0x1360 JUMP JUMPDEST JUMPDEST PUSH2 0xBEF DUP5 DUP3 DUP6 PUSH2 0x11C2 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xC0C JUMPI PUSH2 0xC0B PUSH2 0x1356 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xC1C DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xB45 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xC3B JUMPI PUSH2 0xC3A PUSH2 0x1356 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC58 JUMPI PUSH2 0xC57 PUSH2 0x1351 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0xC74 JUMPI PUSH2 0xC73 PUSH2 0x135B JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xC90 JUMPI PUSH2 0xC8F PUSH2 0x1356 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xCA0 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xBB5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xCB8 DUP2 PUSH2 0x1397 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xCCD DUP2 PUSH2 0x1397 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCEA JUMPI PUSH2 0xCE9 PUSH2 0x136A JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD08 JUMPI PUSH2 0xD07 PUSH2 0x1365 JUMP JUMPDEST JUMPDEST PUSH2 0xD14 DUP6 DUP3 DUP7 ADD PUSH2 0xC25 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD36 JUMPI PUSH2 0xD35 PUSH2 0x136A JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD54 JUMPI PUSH2 0xD53 PUSH2 0x1365 JUMP JUMPDEST JUMPDEST PUSH2 0xD60 DUP5 DUP3 DUP6 ADD PUSH2 0xC7B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD7F JUMPI PUSH2 0xD7E PUSH2 0x136A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD8D DUP5 DUP3 DUP6 ADD PUSH2 0xCA9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDAC JUMPI PUSH2 0xDAB PUSH2 0x136A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xDBA DUP5 DUP3 DUP6 ADD PUSH2 0xCBE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDDA JUMPI PUSH2 0xDD9 PUSH2 0x136A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xDE8 DUP6 DUP3 DUP7 ADD PUSH2 0xCA9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE09 JUMPI PUSH2 0xE08 PUSH2 0x1365 JUMP JUMPDEST JUMPDEST PUSH2 0xE15 DUP6 DUP3 DUP7 ADD PUSH2 0xBF7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xE28 DUP2 PUSH2 0x1119 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xE37 DUP2 PUSH2 0x112B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xE46 DUP2 PUSH2 0x1137 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE57 DUP3 PUSH2 0x10BE JUMP JUMPDEST PUSH2 0xE61 DUP2 DUP6 PUSH2 0x10C9 JUMP JUMPDEST SWAP4 POP PUSH2 0xE71 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x11D1 JUMP JUMPDEST PUSH2 0xE7A DUP2 PUSH2 0x136F JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xE8E DUP2 PUSH2 0x11B0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEA1 PUSH1 0x0 DUP4 PUSH2 0x10DA JUMP JUMPDEST SWAP2 POP PUSH2 0xEAC DUP3 PUSH2 0x1380 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xEC0 DUP2 PUSH2 0x1154 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xECF DUP2 PUSH2 0x1182 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xEDE DUP2 PUSH2 0x118C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xEED DUP2 PUSH2 0x119C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEFE DUP3 PUSH2 0xE94 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xF1D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xE1F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xF38 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xE1F JUMP JUMPDEST PUSH2 0xF45 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xE1F JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xF61 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xE2E JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xF73 DUP2 DUP5 PUSH2 0xE4C JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0xF91 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0xE3D JUMP JUMPDEST PUSH2 0xF9E PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0xEE4 JUMP JUMPDEST PUSH2 0xFAB PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0xEB7 JUMP JUMPDEST PUSH2 0xFB8 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0xED5 JUMP JUMPDEST PUSH2 0xFC5 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0xED5 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xFE4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xE85 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xFFF PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xEC6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x101A PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xEC6 JUMP JUMPDEST PUSH2 0x1027 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xEC6 JUMP JUMPDEST PUSH2 0x1034 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xEC6 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1046 PUSH2 0x1057 JUMP JUMPDEST SWAP1 POP PUSH2 0x1052 DUP3 DUP3 PUSH2 0x1204 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x107C JUMPI PUSH2 0x107B PUSH2 0x1322 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x10A8 JUMPI PUSH2 0x10A7 PUSH2 0x1322 JUMP JUMPDEST JUMPDEST PUSH2 0x10B1 DUP3 PUSH2 0x136F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10F0 DUP3 PUSH2 0x1182 JUMP JUMPDEST SWAP2 POP PUSH2 0x10FB DUP4 PUSH2 0x1182 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x110E JUMPI PUSH2 0x110D PUSH2 0x1266 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1124 DUP3 PUSH2 0x1162 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x114F DUP3 PUSH2 0x1383 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11BB DUP3 PUSH2 0x1141 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x11EF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x11D4 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x11FE JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x120D DUP3 PUSH2 0x136F JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x122C JUMPI PUSH2 0x122B PUSH2 0x1322 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1240 DUP3 PUSH2 0x1182 JUMP JUMPDEST SWAP2 POP PUSH2 0x124B DUP4 PUSH2 0x1182 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x125B JUMPI PUSH2 0x125A PUSH2 0x1295 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0x1394 JUMPI PUSH2 0x1393 PUSH2 0x12C4 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH2 0x13A0 DUP2 PUSH2 0x1182 JUMP JUMPDEST DUP2 EQ PUSH2 0x13AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xED SWAP1 PUSH14 0x716B1563899C20F928BA0A31F2A0 LOG0 0xD1 NOT 0x1F 0x4C 0xD7 0xD2 PUSH25 0x682FA832048D0664736F6C6343000807003300000000000000 ","sourceMap":"467:4255:8:-:0;;;1317:565;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1527:16;5616:15:1;5599:32;;;;;;;;;;;;5556:80;1571:11:8::1;1555:27;;;;::::0;::::1;1638:16;1593:62;;;;;;;;;;::::0;::::1;1677:7;1665:19;;;;::::0;::::1;1713:14;1694:33;;;;;;;;;;::::0;::::1;1750:8;1737:21;;;;;;;;;;::::0;::::1;1784:16;1768:13;;:32;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;1828:15;1810;:33;;;;1866:8;1853:21;;;;::::0;::::1;1317:565:::0;;;;;;467:4255;;7:143:10;64:5;95:6;89:13;80:22;;111:33;138:5;111:33;:::i;:::-;7:143;;;;:::o;156:::-;213:5;244:6;238:13;229:22;;260:33;287:5;260:33;:::i;:::-;156:143;;;;:::o;305:::-;362:5;393:6;387:13;378:22;;409:33;436:5;409:33;:::i;:::-;305:143;;;;:::o;454:141::-;510:5;541:6;535:13;526:22;;557:32;583:5;557:32;:::i;:::-;454:141;;;;:::o;601:::-;657:5;688:6;682:13;673:22;;704:32;730:5;704:32;:::i;:::-;601:141;;;;:::o;748:1130::-;861:6;869;877;885;893;901;950:3;938:9;929:7;925:23;921:33;918:120;;;957:79;;:::i;:::-;918:120;1077:1;1102:64;1158:7;1149:6;1138:9;1134:22;1102:64;:::i;:::-;1092:74;;1048:128;1215:2;1241:64;1297:7;1288:6;1277:9;1273:22;1241:64;:::i;:::-;1231:74;;1186:129;1354:2;1380:64;1436:7;1427:6;1416:9;1412:22;1380:64;:::i;:::-;1370:74;;1325:129;1493:2;1519:63;1574:7;1565:6;1554:9;1550:22;1519:63;:::i;:::-;1509:73;;1464:128;1631:3;1658:63;1713:7;1704:6;1693:9;1689:22;1658:63;:::i;:::-;1648:73;;1602:129;1770:3;1797:64;1853:7;1844:6;1833:9;1829:22;1797:64;:::i;:::-;1787:74;;1741:130;748:1130;;;;;;;;:::o;1965:96::-;2002:7;2031:24;2049:5;2031:24;:::i;:::-;2020:35;;1965:96;;;:::o;2067:77::-;2104:7;2133:5;2122:16;;2067:77;;;:::o;2150:126::-;2187:7;2227:42;2220:5;2216:54;2205:65;;2150:126;;;:::o;2282:77::-;2319:7;2348:5;2337:16;;2282:77;;;:::o;2365:93::-;2401:7;2441:10;2434:5;2430:22;2419:33;;2365:93;;;:::o;2464:101::-;2500:7;2540:18;2533:5;2529:30;2518:41;;2464:101;;;:::o;2571:180::-;2619:77;2616:1;2609:88;2716:4;2713:1;2706:15;2740:4;2737:1;2730:15;2880:117;2989:1;2986;2979:12;3003:122;3076:24;3094:5;3076:24;:::i;:::-;3069:5;3066:35;3056:63;;3115:1;3112;3105:12;3056:63;3003:122;:::o;3131:::-;3204:24;3222:5;3204:24;:::i;:::-;3197:5;3194:35;3184:63;;3243:1;3240;3233:12;3184:63;3131:122;:::o;3259:::-;3332:24;3350:5;3332:24;:::i;:::-;3325:5;3322:35;3312:63;;3371:1;3368;3361:12;3312:63;3259:122;:::o;3387:120::-;3459:23;3476:5;3459:23;:::i;:::-;3452:5;3449:34;3439:62;;3497:1;3494;3487:12;3439:62;3387:120;:::o;3513:::-;3585:23;3602:5;3585:23;:::i;:::-;3578:5;3575:34;3565:62;;3623:1;3620;3613:12;3565:62;3513:120;:::o;467:4255:8:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@checkUpkeep_829":{"entryPoint":1949,"id":829,"parameterSlots":1,"returnSlots":2},"@enterRaffle_721":{"entryPoint":943,"id":721,"parameterSlots":0,"returnSlots":0},"@fulfillRandomWords_900":{"entryPoint":2157,"id":900,"parameterSlots":2,"returnSlots":0},"@getEntranceFee_908":{"entryPoint":688,"id":908,"parameterSlots":0,"returnSlots":1},"@getLastTimeStamp_962":{"entryPoint":2122,"id":962,"parameterSlots":0,"returnSlots":1},"@getNumWords_945":{"entryPoint":1934,"id":945,"parameterSlots":0,"returnSlots":1},"@getNumberOfPlayers_954":{"entryPoint":2145,"id":954,"parameterSlots":0,"returnSlots":1},"@getPlayers_920":{"entryPoint":1821,"id":920,"parameterSlots":1,"returnSlots":1},"@getRaffleState_937":{"entryPoint":728,"id":937,"parameterSlots":0,"returnSlots":1},"@getRecentWinner_928":{"entryPoint":1892,"id":928,"parameterSlots":0,"returnSlots":1},"@getRequestConfirmation_970":{"entryPoint":2132,"id":970,"parameterSlots":0,"returnSlots":1},"@performUpkeep_772":{"entryPoint":1310,"id":772,"parameterSlots":2,"returnSlots":0},"@rawFulfillRandomWords_177":{"entryPoint":751,"id":177,"parameterSlots":2,"returnSlots":0},"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":2885,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":2997,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":3063,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_calldata_ptr":{"entryPoint":3109,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_t_bytes_memory_ptr":{"entryPoint":3195,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":3241,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256_fromMemory":{"entryPoint":3262,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes_calldata_ptr":{"entryPoint":3283,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes_memory_ptr":{"entryPoint":3360,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":3433,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":3478,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":3523,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":3615,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":3630,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":3645,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":3660,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_enum$_RaffleState_$587_to_t_uint8_fromStack":{"entryPoint":3717,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":3732,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint16_to_t_uint16_fromStack":{"entryPoint":3767,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":3782,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint32_to_t_uint32_fromStack":{"entryPoint":3797,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_uint64_to_t_uint64_fromStack":{"entryPoint":3812,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":3827,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":3848,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":3875,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":3916,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed":{"entryPoint":3964,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_enum$_RaffleState_$587__to_t_uint8__fromStack_reversed":{"entryPoint":4047,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":4074,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":4101,"id":null,"parameterSlots":4,"returnSlots":1},"allocate_memory":{"entryPoint":4156,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":4183,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":4193,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":4237,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":4286,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":4297,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":4314,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":4325,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":4377,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":4395,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":4407,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_enum$_RaffleState_$587":{"entryPoint":4417,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint16":{"entryPoint":4436,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":4450,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":4482,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint32":{"entryPoint":4492,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint64":{"entryPoint":4508,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_enum$_RaffleState_$587_to_t_uint8":{"entryPoint":4528,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory":{"entryPoint":4546,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory":{"entryPoint":4561,"id":null,"parameterSlots":3,"returnSlots":0},"finalize_allocation":{"entryPoint":4612,"id":null,"parameterSlots":2,"returnSlots":0},"mod_t_uint256":{"entryPoint":4661,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":4710,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":4757,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":4804,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4851,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":4898,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490":{"entryPoint":4945,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":4950,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef":{"entryPoint":4955,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":4960,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":4965,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":4970,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":4975,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470":{"entryPoint":4992,"id":null,"parameterSlots":1,"returnSlots":0},"validator_assert_t_enum$_RaffleState_$587":{"entryPoint":4995,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":5015,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:15596:10","statements":[{"body":{"nodeType":"YulBlock","src":"126:620:10","statements":[{"nodeType":"YulAssignment","src":"136:90:10","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"218:6:10"}],"functionName":{"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"161:56:10"},"nodeType":"YulFunctionCall","src":"161:64:10"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"145:15:10"},"nodeType":"YulFunctionCall","src":"145:81:10"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"136:5:10"}]},{"nodeType":"YulVariableDeclaration","src":"235:16:10","value":{"name":"array","nodeType":"YulIdentifier","src":"246:5:10"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"239:3:10","type":""}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"268:5:10"},{"name":"length","nodeType":"YulIdentifier","src":"275:6:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"261:6:10"},"nodeType":"YulFunctionCall","src":"261:21:10"},"nodeType":"YulExpressionStatement","src":"261:21:10"},{"nodeType":"YulAssignment","src":"291:23:10","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"302:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"309:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"298:3:10"},"nodeType":"YulFunctionCall","src":"298:16:10"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"291:3:10"}]},{"nodeType":"YulVariableDeclaration","src":"324:17:10","value":{"name":"offset","nodeType":"YulIdentifier","src":"335:6:10"},"variables":[{"name":"src","nodeType":"YulTypedName","src":"328:3:10","type":""}]},{"body":{"nodeType":"YulBlock","src":"390:103:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"404:77:10"},"nodeType":"YulFunctionCall","src":"404:79:10"},"nodeType":"YulExpressionStatement","src":"404:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"360:3:10"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"369:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"377:4:10","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"365:3:10"},"nodeType":"YulFunctionCall","src":"365:17:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"356:3:10"},"nodeType":"YulFunctionCall","src":"356:27:10"},{"name":"end","nodeType":"YulIdentifier","src":"385:3:10"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"353:2:10"},"nodeType":"YulFunctionCall","src":"353:36:10"},"nodeType":"YulIf","src":"350:143:10"},{"body":{"nodeType":"YulBlock","src":"562:178:10","statements":[{"nodeType":"YulVariableDeclaration","src":"577:21:10","value":{"name":"src","nodeType":"YulIdentifier","src":"595:3:10"},"variables":[{"name":"elementPos","nodeType":"YulTypedName","src":"581:10:10","type":""}]},{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"619:3:10"},{"arguments":[{"name":"elementPos","nodeType":"YulIdentifier","src":"645:10:10"},{"name":"end","nodeType":"YulIdentifier","src":"657:3:10"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"624:20:10"},"nodeType":"YulFunctionCall","src":"624:37:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"612:6:10"},"nodeType":"YulFunctionCall","src":"612:50:10"},"nodeType":"YulExpressionStatement","src":"612:50:10"},{"nodeType":"YulAssignment","src":"675:21:10","value":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"686:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"691:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"682:3:10"},"nodeType":"YulFunctionCall","src":"682:14:10"},"variableNames":[{"name":"dst","nodeType":"YulIdentifier","src":"675:3:10"}]},{"nodeType":"YulAssignment","src":"709:21:10","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"720:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"725:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"716:3:10"},"nodeType":"YulFunctionCall","src":"716:14:10"},"variableNames":[{"name":"src","nodeType":"YulIdentifier","src":"709:3:10"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"524:1:10"},{"name":"length","nodeType":"YulIdentifier","src":"527:6:10"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"521:2:10"},"nodeType":"YulFunctionCall","src":"521:13:10"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"535:18:10","statements":[{"nodeType":"YulAssignment","src":"537:14:10","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"546:1:10"},{"kind":"number","nodeType":"YulLiteral","src":"549:1:10","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"542:3:10"},"nodeType":"YulFunctionCall","src":"542:9:10"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"537:1:10"}]}]},"pre":{"nodeType":"YulBlock","src":"506:14:10","statements":[{"nodeType":"YulVariableDeclaration","src":"508:10:10","value":{"kind":"number","nodeType":"YulLiteral","src":"517:1:10","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"512:1:10","type":""}]}]},"src":"502:238:10"}]},"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"96:6:10","type":""},{"name":"length","nodeType":"YulTypedName","src":"104:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"112:3:10","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"120:5:10","type":""}],"src":"24:722:10"},{"body":{"nodeType":"YulBlock","src":"835:327:10","statements":[{"nodeType":"YulAssignment","src":"845:74:10","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"911:6:10"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"870:40:10"},"nodeType":"YulFunctionCall","src":"870:48:10"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"854:15:10"},"nodeType":"YulFunctionCall","src":"854:65:10"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"845:5:10"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"935:5:10"},{"name":"length","nodeType":"YulIdentifier","src":"942:6:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"928:6:10"},"nodeType":"YulFunctionCall","src":"928:21:10"},"nodeType":"YulExpressionStatement","src":"928:21:10"},{"nodeType":"YulVariableDeclaration","src":"958:27:10","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"973:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"980:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"969:3:10"},"nodeType":"YulFunctionCall","src":"969:16:10"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"962:3:10","type":""}]},{"body":{"nodeType":"YulBlock","src":"1023:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"1025:77:10"},"nodeType":"YulFunctionCall","src":"1025:79:10"},"nodeType":"YulExpressionStatement","src":"1025:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1004:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"1009:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1000:3:10"},"nodeType":"YulFunctionCall","src":"1000:16:10"},{"name":"end","nodeType":"YulIdentifier","src":"1018:3:10"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"997:2:10"},"nodeType":"YulFunctionCall","src":"997:25:10"},"nodeType":"YulIf","src":"994:112:10"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1139:3:10"},{"name":"dst","nodeType":"YulIdentifier","src":"1144:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"1149:6:10"}],"functionName":{"name":"copy_calldata_to_memory","nodeType":"YulIdentifier","src":"1115:23:10"},"nodeType":"YulFunctionCall","src":"1115:41:10"},"nodeType":"YulExpressionStatement","src":"1115:41:10"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"808:3:10","type":""},{"name":"length","nodeType":"YulTypedName","src":"813:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"821:3:10","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"829:5:10","type":""}],"src":"752:410:10"},{"body":{"nodeType":"YulBlock","src":"1262:293:10","statements":[{"body":{"nodeType":"YulBlock","src":"1311:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"1313:77:10"},"nodeType":"YulFunctionCall","src":"1313:79:10"},"nodeType":"YulExpressionStatement","src":"1313:79:10"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1290:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"1298:4:10","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1286:3:10"},"nodeType":"YulFunctionCall","src":"1286:17:10"},{"name":"end","nodeType":"YulIdentifier","src":"1305:3:10"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1282:3:10"},"nodeType":"YulFunctionCall","src":"1282:27:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1275:6:10"},"nodeType":"YulFunctionCall","src":"1275:35:10"},"nodeType":"YulIf","src":"1272:122:10"},{"nodeType":"YulVariableDeclaration","src":"1403:34:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1430:6:10"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1417:12:10"},"nodeType":"YulFunctionCall","src":"1417:20:10"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"1407:6:10","type":""}]},{"nodeType":"YulAssignment","src":"1446:103:10","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1522:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"1530:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1518:3:10"},"nodeType":"YulFunctionCall","src":"1518:17:10"},{"name":"length","nodeType":"YulIdentifier","src":"1537:6:10"},{"name":"end","nodeType":"YulIdentifier","src":"1545:3:10"}],"functionName":{"name":"abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"1455:62:10"},"nodeType":"YulFunctionCall","src":"1455:94:10"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1446:5:10"}]}]},"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1240:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"1248:3:10","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1256:5:10","type":""}],"src":"1185:370:10"},{"body":{"nodeType":"YulBlock","src":"1648:478:10","statements":[{"body":{"nodeType":"YulBlock","src":"1697:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"1699:77:10"},"nodeType":"YulFunctionCall","src":"1699:79:10"},"nodeType":"YulExpressionStatement","src":"1699:79:10"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1676:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"1684:4:10","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1672:3:10"},"nodeType":"YulFunctionCall","src":"1672:17:10"},{"name":"end","nodeType":"YulIdentifier","src":"1691:3:10"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1668:3:10"},"nodeType":"YulFunctionCall","src":"1668:27:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1661:6:10"},"nodeType":"YulFunctionCall","src":"1661:35:10"},"nodeType":"YulIf","src":"1658:122:10"},{"nodeType":"YulAssignment","src":"1789:30:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1812:6:10"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1799:12:10"},"nodeType":"YulFunctionCall","src":"1799:20:10"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1789:6:10"}]},{"body":{"nodeType":"YulBlock","src":"1862:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulIdentifier","src":"1864:77:10"},"nodeType":"YulFunctionCall","src":"1864:79:10"},"nodeType":"YulExpressionStatement","src":"1864:79:10"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1834:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"1842:18:10","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1831:2:10"},"nodeType":"YulFunctionCall","src":"1831:30:10"},"nodeType":"YulIf","src":"1828:117:10"},{"nodeType":"YulAssignment","src":"1954:29:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1970:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"1978:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1966:3:10"},"nodeType":"YulFunctionCall","src":"1966:17:10"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"1954:8:10"}]},{"body":{"nodeType":"YulBlock","src":"2037:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulIdentifier","src":"2039:77:10"},"nodeType":"YulFunctionCall","src":"2039:79:10"},"nodeType":"YulExpressionStatement","src":"2039:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"2002:8:10"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2016:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"2024:4:10","type":"","value":"0x01"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2012:3:10"},"nodeType":"YulFunctionCall","src":"2012:17:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1998:3:10"},"nodeType":"YulFunctionCall","src":"1998:32:10"},{"name":"end","nodeType":"YulIdentifier","src":"2032:3:10"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1995:2:10"},"nodeType":"YulFunctionCall","src":"1995:41:10"},"nodeType":"YulIf","src":"1992:128:10"}]},"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1615:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"1623:3:10","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"1631:8:10","type":""},{"name":"length","nodeType":"YulTypedName","src":"1641:6:10","type":""}],"src":"1574:552:10"},{"body":{"nodeType":"YulBlock","src":"2206:277:10","statements":[{"body":{"nodeType":"YulBlock","src":"2255:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"2257:77:10"},"nodeType":"YulFunctionCall","src":"2257:79:10"},"nodeType":"YulExpressionStatement","src":"2257:79:10"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2234:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"2242:4:10","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2230:3:10"},"nodeType":"YulFunctionCall","src":"2230:17:10"},{"name":"end","nodeType":"YulIdentifier","src":"2249:3:10"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2226:3:10"},"nodeType":"YulFunctionCall","src":"2226:27:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2219:6:10"},"nodeType":"YulFunctionCall","src":"2219:35:10"},"nodeType":"YulIf","src":"2216:122:10"},{"nodeType":"YulVariableDeclaration","src":"2347:34:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2374:6:10"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2361:12:10"},"nodeType":"YulFunctionCall","src":"2361:20:10"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2351:6:10","type":""}]},{"nodeType":"YulAssignment","src":"2390:87:10","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2450:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"2458:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2446:3:10"},"nodeType":"YulFunctionCall","src":"2446:17:10"},{"name":"length","nodeType":"YulIdentifier","src":"2465:6:10"},{"name":"end","nodeType":"YulIdentifier","src":"2473:3:10"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"2399:46:10"},"nodeType":"YulFunctionCall","src":"2399:78:10"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2390:5:10"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2184:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"2192:3:10","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2200:5:10","type":""}],"src":"2145:338:10"},{"body":{"nodeType":"YulBlock","src":"2541:87:10","statements":[{"nodeType":"YulAssignment","src":"2551:29:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2573:6:10"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2560:12:10"},"nodeType":"YulFunctionCall","src":"2560:20:10"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2551:5:10"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2616:5:10"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2589:26:10"},"nodeType":"YulFunctionCall","src":"2589:33:10"},"nodeType":"YulExpressionStatement","src":"2589:33:10"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2519:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"2527:3:10","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2535:5:10","type":""}],"src":"2489:139:10"},{"body":{"nodeType":"YulBlock","src":"2697:80:10","statements":[{"nodeType":"YulAssignment","src":"2707:22:10","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2722:6:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2716:5:10"},"nodeType":"YulFunctionCall","src":"2716:13:10"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2707:5:10"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2765:5:10"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"2738:26:10"},"nodeType":"YulFunctionCall","src":"2738:33:10"},"nodeType":"YulExpressionStatement","src":"2738:33:10"}]},"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2675:6:10","type":""},{"name":"end","nodeType":"YulTypedName","src":"2683:3:10","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2691:5:10","type":""}],"src":"2634:143:10"},{"body":{"nodeType":"YulBlock","src":"2868:442:10","statements":[{"body":{"nodeType":"YulBlock","src":"2914:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2916:77:10"},"nodeType":"YulFunctionCall","src":"2916:79:10"},"nodeType":"YulExpressionStatement","src":"2916:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2889:7:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"2898:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2885:3:10"},"nodeType":"YulFunctionCall","src":"2885:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"2910:2:10","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2881:3:10"},"nodeType":"YulFunctionCall","src":"2881:32:10"},"nodeType":"YulIf","src":"2878:119:10"},{"nodeType":"YulBlock","src":"3007:296:10","statements":[{"nodeType":"YulVariableDeclaration","src":"3022:45:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3053:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"3064:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3049:3:10"},"nodeType":"YulFunctionCall","src":"3049:17:10"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3036:12:10"},"nodeType":"YulFunctionCall","src":"3036:31:10"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3026:6:10","type":""}]},{"body":{"nodeType":"YulBlock","src":"3114:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3116:77:10"},"nodeType":"YulFunctionCall","src":"3116:79:10"},"nodeType":"YulExpressionStatement","src":"3116:79:10"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3086:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"3094:18:10","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3083:2:10"},"nodeType":"YulFunctionCall","src":"3083:30:10"},"nodeType":"YulIf","src":"3080:117:10"},{"nodeType":"YulAssignment","src":"3211:82:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3265:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"3276:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3261:3:10"},"nodeType":"YulFunctionCall","src":"3261:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3285:7:10"}],"functionName":{"name":"abi_decode_t_bytes_calldata_ptr","nodeType":"YulIdentifier","src":"3229:31:10"},"nodeType":"YulFunctionCall","src":"3229:64:10"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3211:6:10"},{"name":"value1","nodeType":"YulIdentifier","src":"3219:6:10"}]}]}]},"name":"abi_decode_tuple_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2830:9:10","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2841:7:10","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2853:6:10","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2861:6:10","type":""}],"src":"2783:527:10"},{"body":{"nodeType":"YulBlock","src":"3391:432:10","statements":[{"body":{"nodeType":"YulBlock","src":"3437:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3439:77:10"},"nodeType":"YulFunctionCall","src":"3439:79:10"},"nodeType":"YulExpressionStatement","src":"3439:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3412:7:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"3421:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3408:3:10"},"nodeType":"YulFunctionCall","src":"3408:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"3433:2:10","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3404:3:10"},"nodeType":"YulFunctionCall","src":"3404:32:10"},"nodeType":"YulIf","src":"3401:119:10"},{"nodeType":"YulBlock","src":"3530:286:10","statements":[{"nodeType":"YulVariableDeclaration","src":"3545:45:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3576:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"3587:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3572:3:10"},"nodeType":"YulFunctionCall","src":"3572:17:10"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3559:12:10"},"nodeType":"YulFunctionCall","src":"3559:31:10"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3549:6:10","type":""}]},{"body":{"nodeType":"YulBlock","src":"3637:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3639:77:10"},"nodeType":"YulFunctionCall","src":"3639:79:10"},"nodeType":"YulExpressionStatement","src":"3639:79:10"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3609:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"3617:18:10","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3606:2:10"},"nodeType":"YulFunctionCall","src":"3606:30:10"},"nodeType":"YulIf","src":"3603:117:10"},{"nodeType":"YulAssignment","src":"3734:72:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3778:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"3789:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3774:3:10"},"nodeType":"YulFunctionCall","src":"3774:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3798:7:10"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"3744:29:10"},"nodeType":"YulFunctionCall","src":"3744:62:10"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3734:6:10"}]}]}]},"name":"abi_decode_tuple_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3361:9:10","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3372:7:10","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3384:6:10","type":""}],"src":"3316:507:10"},{"body":{"nodeType":"YulBlock","src":"3895:263:10","statements":[{"body":{"nodeType":"YulBlock","src":"3941:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3943:77:10"},"nodeType":"YulFunctionCall","src":"3943:79:10"},"nodeType":"YulExpressionStatement","src":"3943:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3916:7:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"3925:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3912:3:10"},"nodeType":"YulFunctionCall","src":"3912:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"3937:2:10","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3908:3:10"},"nodeType":"YulFunctionCall","src":"3908:32:10"},"nodeType":"YulIf","src":"3905:119:10"},{"nodeType":"YulBlock","src":"4034:117:10","statements":[{"nodeType":"YulVariableDeclaration","src":"4049:15:10","value":{"kind":"number","nodeType":"YulLiteral","src":"4063:1:10","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4053:6:10","type":""}]},{"nodeType":"YulAssignment","src":"4078:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4113:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"4124:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4109:3:10"},"nodeType":"YulFunctionCall","src":"4109:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4133:7:10"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4088:20:10"},"nodeType":"YulFunctionCall","src":"4088:53:10"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4078:6:10"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3865:9:10","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3876:7:10","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3888:6:10","type":""}],"src":"3829:329:10"},{"body":{"nodeType":"YulBlock","src":"4241:274:10","statements":[{"body":{"nodeType":"YulBlock","src":"4287:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4289:77:10"},"nodeType":"YulFunctionCall","src":"4289:79:10"},"nodeType":"YulExpressionStatement","src":"4289:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4262:7:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"4271:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4258:3:10"},"nodeType":"YulFunctionCall","src":"4258:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"4283:2:10","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4254:3:10"},"nodeType":"YulFunctionCall","src":"4254:32:10"},"nodeType":"YulIf","src":"4251:119:10"},{"nodeType":"YulBlock","src":"4380:128:10","statements":[{"nodeType":"YulVariableDeclaration","src":"4395:15:10","value":{"kind":"number","nodeType":"YulLiteral","src":"4409:1:10","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4399:6:10","type":""}]},{"nodeType":"YulAssignment","src":"4424:74:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4470:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"4481:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4466:3:10"},"nodeType":"YulFunctionCall","src":"4466:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4490:7:10"}],"functionName":{"name":"abi_decode_t_uint256_fromMemory","nodeType":"YulIdentifier","src":"4434:31:10"},"nodeType":"YulFunctionCall","src":"4434:64:10"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4424:6:10"}]}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4211:9:10","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4222:7:10","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4234:6:10","type":""}],"src":"4164:351:10"},{"body":{"nodeType":"YulBlock","src":"4629:576:10","statements":[{"body":{"nodeType":"YulBlock","src":"4675:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4677:77:10"},"nodeType":"YulFunctionCall","src":"4677:79:10"},"nodeType":"YulExpressionStatement","src":"4677:79:10"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4650:7:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"4659:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4646:3:10"},"nodeType":"YulFunctionCall","src":"4646:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"4671:2:10","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4642:3:10"},"nodeType":"YulFunctionCall","src":"4642:32:10"},"nodeType":"YulIf","src":"4639:119:10"},{"nodeType":"YulBlock","src":"4768:117:10","statements":[{"nodeType":"YulVariableDeclaration","src":"4783:15:10","value":{"kind":"number","nodeType":"YulLiteral","src":"4797:1:10","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4787:6:10","type":""}]},{"nodeType":"YulAssignment","src":"4812:63:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4847:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"4858:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4843:3:10"},"nodeType":"YulFunctionCall","src":"4843:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4867:7:10"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4822:20:10"},"nodeType":"YulFunctionCall","src":"4822:53:10"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4812:6:10"}]}]},{"nodeType":"YulBlock","src":"4895:303:10","statements":[{"nodeType":"YulVariableDeclaration","src":"4910:46:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4941:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"4952:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4937:3:10"},"nodeType":"YulFunctionCall","src":"4937:18:10"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4924:12:10"},"nodeType":"YulFunctionCall","src":"4924:32:10"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4914:6:10","type":""}]},{"body":{"nodeType":"YulBlock","src":"5003:83:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"5005:77:10"},"nodeType":"YulFunctionCall","src":"5005:79:10"},"nodeType":"YulExpressionStatement","src":"5005:79:10"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4975:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"4983:18:10","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4972:2:10"},"nodeType":"YulFunctionCall","src":"4972:30:10"},"nodeType":"YulIf","src":"4969:117:10"},{"nodeType":"YulAssignment","src":"5100:88:10","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5160:9:10"},{"name":"offset","nodeType":"YulIdentifier","src":"5171:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5156:3:10"},"nodeType":"YulFunctionCall","src":"5156:22:10"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5180:7:10"}],"functionName":{"name":"abi_decode_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"5110:45:10"},"nodeType":"YulFunctionCall","src":"5110:78:10"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5100:6:10"}]}]}]},"name":"abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4591:9:10","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4602:7:10","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4614:6:10","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4622:6:10","type":""}],"src":"4521:684:10"},{"body":{"nodeType":"YulBlock","src":"5276:53:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5293:3:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5316:5:10"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"5298:17:10"},"nodeType":"YulFunctionCall","src":"5298:24:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5286:6:10"},"nodeType":"YulFunctionCall","src":"5286:37:10"},"nodeType":"YulExpressionStatement","src":"5286:37:10"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5264:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5271:3:10","type":""}],"src":"5211:118:10"},{"body":{"nodeType":"YulBlock","src":"5394:50:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5411:3:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5431:5:10"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"5416:14:10"},"nodeType":"YulFunctionCall","src":"5416:21:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5404:6:10"},"nodeType":"YulFunctionCall","src":"5404:34:10"},"nodeType":"YulExpressionStatement","src":"5404:34:10"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5382:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5389:3:10","type":""}],"src":"5335:109:10"},{"body":{"nodeType":"YulBlock","src":"5515:53:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5532:3:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5555:5:10"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"5537:17:10"},"nodeType":"YulFunctionCall","src":"5537:24:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5525:6:10"},"nodeType":"YulFunctionCall","src":"5525:37:10"},"nodeType":"YulExpressionStatement","src":"5525:37:10"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5503:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5510:3:10","type":""}],"src":"5450:118:10"},{"body":{"nodeType":"YulBlock","src":"5664:270:10","statements":[{"nodeType":"YulVariableDeclaration","src":"5674:52:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5720:5:10"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"5688:31:10"},"nodeType":"YulFunctionCall","src":"5688:38:10"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5678:6:10","type":""}]},{"nodeType":"YulAssignment","src":"5735:77:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5800:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"5805:6:10"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"5742:57:10"},"nodeType":"YulFunctionCall","src":"5742:70:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5735:3:10"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5847:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"5854:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5843:3:10"},"nodeType":"YulFunctionCall","src":"5843:16:10"},{"name":"pos","nodeType":"YulIdentifier","src":"5861:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"5866:6:10"}],"functionName":{"name":"copy_memory_to_memory","nodeType":"YulIdentifier","src":"5821:21:10"},"nodeType":"YulFunctionCall","src":"5821:52:10"},"nodeType":"YulExpressionStatement","src":"5821:52:10"},{"nodeType":"YulAssignment","src":"5882:46:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5893:3:10"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"5920:6:10"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"5898:21:10"},"nodeType":"YulFunctionCall","src":"5898:29:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5889:3:10"},"nodeType":"YulFunctionCall","src":"5889:39:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5882:3:10"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5645:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5652:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5660:3:10","type":""}],"src":"5574:360:10"},{"body":{"nodeType":"YulBlock","src":"6018:79:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6035:3:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6084:5:10"}],"functionName":{"name":"convert_t_enum$_RaffleState_$587_to_t_uint8","nodeType":"YulIdentifier","src":"6040:43:10"},"nodeType":"YulFunctionCall","src":"6040:50:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6028:6:10"},"nodeType":"YulFunctionCall","src":"6028:63:10"},"nodeType":"YulExpressionStatement","src":"6028:63:10"}]},"name":"abi_encode_t_enum$_RaffleState_$587_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6006:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6013:3:10","type":""}],"src":"5940:157:10"},{"body":{"nodeType":"YulBlock","src":"6266:235:10","statements":[{"nodeType":"YulAssignment","src":"6276:90:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6359:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"6364:1:10","type":"","value":"0"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"6283:75:10"},"nodeType":"YulFunctionCall","src":"6283:83:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6276:3:10"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6464:3:10"}],"functionName":{"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nodeType":"YulIdentifier","src":"6375:88:10"},"nodeType":"YulFunctionCall","src":"6375:93:10"},"nodeType":"YulExpressionStatement","src":"6375:93:10"},{"nodeType":"YulAssignment","src":"6477:18:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6488:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"6493:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6484:3:10"},"nodeType":"YulFunctionCall","src":"6484:11:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6477:3:10"}]}]},"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6254:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6262:3:10","type":""}],"src":"6103:398:10"},{"body":{"nodeType":"YulBlock","src":"6570:52:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6587:3:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6609:5:10"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"6592:16:10"},"nodeType":"YulFunctionCall","src":"6592:23:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6580:6:10"},"nodeType":"YulFunctionCall","src":"6580:36:10"},"nodeType":"YulExpressionStatement","src":"6580:36:10"}]},"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6558:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6565:3:10","type":""}],"src":"6507:115:10"},{"body":{"nodeType":"YulBlock","src":"6693:53:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6710:3:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6733:5:10"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"6715:17:10"},"nodeType":"YulFunctionCall","src":"6715:24:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6703:6:10"},"nodeType":"YulFunctionCall","src":"6703:37:10"},"nodeType":"YulExpressionStatement","src":"6703:37:10"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6681:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6688:3:10","type":""}],"src":"6628:118:10"},{"body":{"nodeType":"YulBlock","src":"6815:52:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6832:3:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6854:5:10"}],"functionName":{"name":"cleanup_t_uint32","nodeType":"YulIdentifier","src":"6837:16:10"},"nodeType":"YulFunctionCall","src":"6837:23:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6825:6:10"},"nodeType":"YulFunctionCall","src":"6825:36:10"},"nodeType":"YulExpressionStatement","src":"6825:36:10"}]},"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6803:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6810:3:10","type":""}],"src":"6752:115:10"},{"body":{"nodeType":"YulBlock","src":"6936:52:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6953:3:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6975:5:10"}],"functionName":{"name":"cleanup_t_uint64","nodeType":"YulIdentifier","src":"6958:16:10"},"nodeType":"YulFunctionCall","src":"6958:23:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6946:6:10"},"nodeType":"YulFunctionCall","src":"6946:36:10"},"nodeType":"YulExpressionStatement","src":"6946:36:10"}]},"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6924:5:10","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6931:3:10","type":""}],"src":"6873:115:10"},{"body":{"nodeType":"YulBlock","src":"7182:191:10","statements":[{"nodeType":"YulAssignment","src":"7193:154:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7343:3:10"}],"functionName":{"name":"abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"7200:141:10"},"nodeType":"YulFunctionCall","src":"7200:147:10"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7193:3:10"}]},{"nodeType":"YulAssignment","src":"7357:10:10","value":{"name":"pos","nodeType":"YulIdentifier","src":"7364:3:10"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7357:3:10"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"7169:3:10","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7178:3:10","type":""}],"src":"6994:379:10"},{"body":{"nodeType":"YulBlock","src":"7477:124:10","statements":[{"nodeType":"YulAssignment","src":"7487:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7499:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"7510:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7495:3:10"},"nodeType":"YulFunctionCall","src":"7495:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7487:4:10"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7567:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7580:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"7591:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7576:3:10"},"nodeType":"YulFunctionCall","src":"7576:17:10"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"7523:43:10"},"nodeType":"YulFunctionCall","src":"7523:71:10"},"nodeType":"YulExpressionStatement","src":"7523:71:10"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7449:9:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7461:6:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7472:4:10","type":""}],"src":"7379:222:10"},{"body":{"nodeType":"YulBlock","src":"7733:206:10","statements":[{"nodeType":"YulAssignment","src":"7743:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7755:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"7766:2:10","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7751:3:10"},"nodeType":"YulFunctionCall","src":"7751:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7743:4:10"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7823:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7836:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"7847:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7832:3:10"},"nodeType":"YulFunctionCall","src":"7832:17:10"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"7779:43:10"},"nodeType":"YulFunctionCall","src":"7779:71:10"},"nodeType":"YulExpressionStatement","src":"7779:71:10"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7904:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7917:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"7928:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7913:3:10"},"nodeType":"YulFunctionCall","src":"7913:18:10"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"7860:43:10"},"nodeType":"YulFunctionCall","src":"7860:72:10"},"nodeType":"YulExpressionStatement","src":"7860:72:10"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7697:9:10","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7709:6:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7717:6:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7728:4:10","type":""}],"src":"7607:332:10"},{"body":{"nodeType":"YulBlock","src":"8083:269:10","statements":[{"nodeType":"YulAssignment","src":"8093:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8105:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"8116:2:10","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8101:3:10"},"nodeType":"YulFunctionCall","src":"8101:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8093:4:10"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8167:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8180:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"8191:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8176:3:10"},"nodeType":"YulFunctionCall","src":"8176:17:10"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"8129:37:10"},"nodeType":"YulFunctionCall","src":"8129:65:10"},"nodeType":"YulExpressionStatement","src":"8129:65:10"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8215:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"8226:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8211:3:10"},"nodeType":"YulFunctionCall","src":"8211:18:10"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8235:4:10"},{"name":"headStart","nodeType":"YulIdentifier","src":"8241:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8231:3:10"},"nodeType":"YulFunctionCall","src":"8231:20:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8204:6:10"},"nodeType":"YulFunctionCall","src":"8204:48:10"},"nodeType":"YulExpressionStatement","src":"8204:48:10"},{"nodeType":"YulAssignment","src":"8261:84:10","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"8331:6:10"},{"name":"tail","nodeType":"YulIdentifier","src":"8340:4:10"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8269:61:10"},"nodeType":"YulFunctionCall","src":"8269:76:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8261:4:10"}]}]},"name":"abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8047:9:10","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8059:6:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8067:6:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8078:4:10","type":""}],"src":"7945:407:10"},{"body":{"nodeType":"YulBlock","src":"8560:446:10","statements":[{"nodeType":"YulAssignment","src":"8570:27:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8582:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"8593:3:10","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8578:3:10"},"nodeType":"YulFunctionCall","src":"8578:19:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8570:4:10"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8651:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8664:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"8675:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8660:3:10"},"nodeType":"YulFunctionCall","src":"8660:17:10"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"8607:43:10"},"nodeType":"YulFunctionCall","src":"8607:71:10"},"nodeType":"YulExpressionStatement","src":"8607:71:10"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"8730:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8743:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"8754:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8739:3:10"},"nodeType":"YulFunctionCall","src":"8739:18:10"}],"functionName":{"name":"abi_encode_t_uint64_to_t_uint64_fromStack","nodeType":"YulIdentifier","src":"8688:41:10"},"nodeType":"YulFunctionCall","src":"8688:70:10"},"nodeType":"YulExpressionStatement","src":"8688:70:10"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"8810:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8823:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"8834:2:10","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8819:3:10"},"nodeType":"YulFunctionCall","src":"8819:18:10"}],"functionName":{"name":"abi_encode_t_uint16_to_t_uint16_fromStack","nodeType":"YulIdentifier","src":"8768:41:10"},"nodeType":"YulFunctionCall","src":"8768:70:10"},"nodeType":"YulExpressionStatement","src":"8768:70:10"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"8890:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8903:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"8914:2:10","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8899:3:10"},"nodeType":"YulFunctionCall","src":"8899:18:10"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"8848:41:10"},"nodeType":"YulFunctionCall","src":"8848:70:10"},"nodeType":"YulExpressionStatement","src":"8848:70:10"},{"expression":{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"8970:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8983:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"8994:3:10","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8979:3:10"},"nodeType":"YulFunctionCall","src":"8979:19:10"}],"functionName":{"name":"abi_encode_t_uint32_to_t_uint32_fromStack","nodeType":"YulIdentifier","src":"8928:41:10"},"nodeType":"YulFunctionCall","src":"8928:71:10"},"nodeType":"YulExpressionStatement","src":"8928:71:10"}]},"name":"abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8500:9:10","type":""},{"name":"value4","nodeType":"YulTypedName","src":"8512:6:10","type":""},{"name":"value3","nodeType":"YulTypedName","src":"8520:6:10","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8528:6:10","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8536:6:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8544:6:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8555:4:10","type":""}],"src":"8358:648:10"},{"body":{"nodeType":"YulBlock","src":"9123:137:10","statements":[{"nodeType":"YulAssignment","src":"9133:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9145:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"9156:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9141:3:10"},"nodeType":"YulFunctionCall","src":"9141:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9133:4:10"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9226:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9239:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"9250:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9235:3:10"},"nodeType":"YulFunctionCall","src":"9235:17:10"}],"functionName":{"name":"abi_encode_t_enum$_RaffleState_$587_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"9169:56:10"},"nodeType":"YulFunctionCall","src":"9169:84:10"},"nodeType":"YulExpressionStatement","src":"9169:84:10"}]},"name":"abi_encode_tuple_t_enum$_RaffleState_$587__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9095:9:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9107:6:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9118:4:10","type":""}],"src":"9012:248:10"},{"body":{"nodeType":"YulBlock","src":"9364:124:10","statements":[{"nodeType":"YulAssignment","src":"9374:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9386:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"9397:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9382:3:10"},"nodeType":"YulFunctionCall","src":"9382:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9374:4:10"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9454:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9467:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"9478:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9463:3:10"},"nodeType":"YulFunctionCall","src":"9463:17:10"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"9410:43:10"},"nodeType":"YulFunctionCall","src":"9410:71:10"},"nodeType":"YulExpressionStatement","src":"9410:71:10"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9336:9:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9348:6:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9359:4:10","type":""}],"src":"9266:222:10"},{"body":{"nodeType":"YulBlock","src":"9648:288:10","statements":[{"nodeType":"YulAssignment","src":"9658:26:10","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9670:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"9681:2:10","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9666:3:10"},"nodeType":"YulFunctionCall","src":"9666:18:10"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9658:4:10"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9738:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9751:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"9762:1:10","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9747:3:10"},"nodeType":"YulFunctionCall","src":"9747:17:10"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"9694:43:10"},"nodeType":"YulFunctionCall","src":"9694:71:10"},"nodeType":"YulExpressionStatement","src":"9694:71:10"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"9819:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9832:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"9843:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9828:3:10"},"nodeType":"YulFunctionCall","src":"9828:18:10"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"9775:43:10"},"nodeType":"YulFunctionCall","src":"9775:72:10"},"nodeType":"YulExpressionStatement","src":"9775:72:10"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"9901:6:10"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9914:9:10"},{"kind":"number","nodeType":"YulLiteral","src":"9925:2:10","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9910:3:10"},"nodeType":"YulFunctionCall","src":"9910:18:10"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"9857:43:10"},"nodeType":"YulFunctionCall","src":"9857:72:10"},"nodeType":"YulExpressionStatement","src":"9857:72:10"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9604:9:10","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9616:6:10","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9624:6:10","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9632:6:10","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9643:4:10","type":""}],"src":"9494:442:10"},{"body":{"nodeType":"YulBlock","src":"9983:88:10","statements":[{"nodeType":"YulAssignment","src":"9993:30:10","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"10003:18:10"},"nodeType":"YulFunctionCall","src":"10003:20:10"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"9993:6:10"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10052:6:10"},{"name":"size","nodeType":"YulIdentifier","src":"10060:4:10"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"10032:19:10"},"nodeType":"YulFunctionCall","src":"10032:33:10"},"nodeType":"YulExpressionStatement","src":"10032:33:10"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"9967:4:10","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"9976:6:10","type":""}],"src":"9942:129:10"},{"body":{"nodeType":"YulBlock","src":"10117:35:10","statements":[{"nodeType":"YulAssignment","src":"10127:19:10","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10143:2:10","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10137:5:10"},"nodeType":"YulFunctionCall","src":"10137:9:10"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"10127:6:10"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"10110:6:10","type":""}],"src":"10077:75:10"},{"body":{"nodeType":"YulBlock","src":"10240:229:10","statements":[{"body":{"nodeType":"YulBlock","src":"10345:22:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"10347:16:10"},"nodeType":"YulFunctionCall","src":"10347:18:10"},"nodeType":"YulExpressionStatement","src":"10347:18:10"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10317:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"10325:18:10","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10314:2:10"},"nodeType":"YulFunctionCall","src":"10314:30:10"},"nodeType":"YulIf","src":"10311:56:10"},{"nodeType":"YulAssignment","src":"10377:25:10","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10389:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"10397:4:10","type":"","value":"0x20"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"10385:3:10"},"nodeType":"YulFunctionCall","src":"10385:17:10"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"10377:4:10"}]},{"nodeType":"YulAssignment","src":"10439:23:10","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"10451:4:10"},{"kind":"number","nodeType":"YulLiteral","src":"10457:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10447:3:10"},"nodeType":"YulFunctionCall","src":"10447:15:10"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"10439:4:10"}]}]},"name":"array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"10224:6:10","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"10235:4:10","type":""}],"src":"10158:311:10"},{"body":{"nodeType":"YulBlock","src":"10541:241:10","statements":[{"body":{"nodeType":"YulBlock","src":"10646:22:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"10648:16:10"},"nodeType":"YulFunctionCall","src":"10648:18:10"},"nodeType":"YulExpressionStatement","src":"10648:18:10"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10618:6:10"},{"kind":"number","nodeType":"YulLiteral","src":"10626:18:10","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10615:2:10"},"nodeType":"YulFunctionCall","src":"10615:30:10"},"nodeType":"YulIf","src":"10612:56:10"},{"nodeType":"YulAssignment","src":"10678:37:10","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10708:6:10"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"10686:21:10"},"nodeType":"YulFunctionCall","src":"10686:29:10"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"10678:4:10"}]},{"nodeType":"YulAssignment","src":"10752:23:10","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"10764:4:10"},{"kind":"number","nodeType":"YulLiteral","src":"10770:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10760:3:10"},"nodeType":"YulFunctionCall","src":"10760:15:10"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"10752:4:10"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"10525:6:10","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"10536:4:10","type":""}],"src":"10475:307:10"},{"body":{"nodeType":"YulBlock","src":"10846:40:10","statements":[{"nodeType":"YulAssignment","src":"10857:22:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10873:5:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10867:5:10"},"nodeType":"YulFunctionCall","src":"10867:12:10"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10857:6:10"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10829:5:10","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"10839:6:10","type":""}],"src":"10788:98:10"},{"body":{"nodeType":"YulBlock","src":"10987:73:10","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11004:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"11009:6:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10997:6:10"},"nodeType":"YulFunctionCall","src":"10997:19:10"},"nodeType":"YulExpressionStatement","src":"10997:19:10"},{"nodeType":"YulAssignment","src":"11025:29:10","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11044:3:10"},{"kind":"number","nodeType":"YulLiteral","src":"11049:4:10","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11040:3:10"},"nodeType":"YulFunctionCall","src":"11040:14:10"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"11025:11:10"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10959:3:10","type":""},{"name":"length","nodeType":"YulTypedName","src":"10964:6:10","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"10975:11:10","type":""}],"src":"10892:168:10"},{"body":{"nodeType":"YulBlock","src":"11179:34:10","statements":[{"nodeType":"YulAssignment","src":"11189:18:10","value":{"name":"pos","nodeType":"YulIdentifier","src":"11204:3:10"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"11189:11:10"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11151:3:10","type":""},{"name":"length","nodeType":"YulTypedName","src":"11156:6:10","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"11167:11:10","type":""}],"src":"11066:147:10"},{"body":{"nodeType":"YulBlock","src":"11264:146:10","statements":[{"nodeType":"YulAssignment","src":"11274:25:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11297:1:10"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11279:17:10"},"nodeType":"YulFunctionCall","src":"11279:20:10"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"11274:1:10"}]},{"nodeType":"YulAssignment","src":"11308:25:10","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11331:1:10"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"11313:17:10"},"nodeType":"YulFunctionCall","src":"11313:20:10"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"11308:1:10"}]},{"body":{"nodeType":"YulBlock","src":"11355:22:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11357:16:10"},"nodeType":"YulFunctionCall","src":"11357:18:10"},"nodeType":"YulExpressionStatement","src":"11357:18:10"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11349:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"11352:1:10"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"11346:2:10"},"nodeType":"YulFunctionCall","src":"11346:8:10"},"nodeType":"YulIf","src":"11343:34:10"},{"nodeType":"YulAssignment","src":"11387:17:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11399:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"11402:1:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11395:3:10"},"nodeType":"YulFunctionCall","src":"11395:9:10"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"11387:4:10"}]}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11250:1:10","type":""},{"name":"y","nodeType":"YulTypedName","src":"11253:1:10","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"11259:4:10","type":""}],"src":"11219:191:10"},{"body":{"nodeType":"YulBlock","src":"11461:51:10","statements":[{"nodeType":"YulAssignment","src":"11471:35:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11500:5:10"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"11482:17:10"},"nodeType":"YulFunctionCall","src":"11482:24:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"11471:7:10"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11443:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"11453:7:10","type":""}],"src":"11416:96:10"},{"body":{"nodeType":"YulBlock","src":"11560:48:10","statements":[{"nodeType":"YulAssignment","src":"11570:32:10","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11595:5:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11588:6:10"},"nodeType":"YulFunctionCall","src":"11588:13:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11581:6:10"},"nodeType":"YulFunctionCall","src":"11581:21:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"11570:7:10"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11542:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"11552:7:10","type":""}],"src":"11518:90:10"},{"body":{"nodeType":"YulBlock","src":"11659:32:10","statements":[{"nodeType":"YulAssignment","src":"11669:16:10","value":{"name":"value","nodeType":"YulIdentifier","src":"11680:5:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"11669:7:10"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11641:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"11651:7:10","type":""}],"src":"11614:77:10"},{"body":{"nodeType":"YulBlock","src":"11757:81:10","statements":[{"nodeType":"YulAssignment","src":"11767:16:10","value":{"name":"value","nodeType":"YulIdentifier","src":"11778:5:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"11767:7:10"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11826:5:10"}],"functionName":{"name":"validator_assert_t_enum$_RaffleState_$587","nodeType":"YulIdentifier","src":"11784:41:10"},"nodeType":"YulFunctionCall","src":"11784:48:10"},"nodeType":"YulExpressionStatement","src":"11784:48:10"}]},"name":"cleanup_t_enum$_RaffleState_$587","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11739:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"11749:7:10","type":""}],"src":"11697:141:10"},{"body":{"nodeType":"YulBlock","src":"11888:45:10","statements":[{"nodeType":"YulAssignment","src":"11898:29:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11913:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"11920:6:10","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"11909:3:10"},"nodeType":"YulFunctionCall","src":"11909:18:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"11898:7:10"}]}]},"name":"cleanup_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11870:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"11880:7:10","type":""}],"src":"11844:89:10"},{"body":{"nodeType":"YulBlock","src":"11984:81:10","statements":[{"nodeType":"YulAssignment","src":"11994:65:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12009:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"12016:42:10","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12005:3:10"},"nodeType":"YulFunctionCall","src":"12005:54:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"11994:7:10"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11966:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"11976:7:10","type":""}],"src":"11939:126:10"},{"body":{"nodeType":"YulBlock","src":"12116:32:10","statements":[{"nodeType":"YulAssignment","src":"12126:16:10","value":{"name":"value","nodeType":"YulIdentifier","src":"12137:5:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"12126:7:10"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12098:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"12108:7:10","type":""}],"src":"12071:77:10"},{"body":{"nodeType":"YulBlock","src":"12198:49:10","statements":[{"nodeType":"YulAssignment","src":"12208:33:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12223:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"12230:10:10","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12219:3:10"},"nodeType":"YulFunctionCall","src":"12219:22:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"12208:7:10"}]}]},"name":"cleanup_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12180:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"12190:7:10","type":""}],"src":"12154:93:10"},{"body":{"nodeType":"YulBlock","src":"12297:57:10","statements":[{"nodeType":"YulAssignment","src":"12307:41:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12322:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"12329:18:10","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"12318:3:10"},"nodeType":"YulFunctionCall","src":"12318:30:10"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"12307:7:10"}]}]},"name":"cleanup_t_uint64","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12279:5:10","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"12289:7:10","type":""}],"src":"12253:101:10"},{"body":{"nodeType":"YulBlock","src":"12433:68:10","statements":[{"nodeType":"YulAssignment","src":"12443:52:10","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12489:5:10"}],"functionName":{"name":"cleanup_t_enum$_RaffleState_$587","nodeType":"YulIdentifier","src":"12456:32:10"},"nodeType":"YulFunctionCall","src":"12456:39:10"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"12443:9:10"}]}]},"name":"convert_t_enum$_RaffleState_$587_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12413:5:10","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"12423:9:10","type":""}],"src":"12360:141:10"},{"body":{"nodeType":"YulBlock","src":"12558:103:10","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"12581:3:10"},{"name":"src","nodeType":"YulIdentifier","src":"12586:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"12591:6:10"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"12568:12:10"},"nodeType":"YulFunctionCall","src":"12568:30:10"},"nodeType":"YulExpressionStatement","src":"12568:30:10"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"12639:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"12644:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12635:3:10"},"nodeType":"YulFunctionCall","src":"12635:16:10"},{"kind":"number","nodeType":"YulLiteral","src":"12653:1:10","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12628:6:10"},"nodeType":"YulFunctionCall","src":"12628:27:10"},"nodeType":"YulExpressionStatement","src":"12628:27:10"}]},"name":"copy_calldata_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"12540:3:10","type":""},{"name":"dst","nodeType":"YulTypedName","src":"12545:3:10","type":""},{"name":"length","nodeType":"YulTypedName","src":"12550:6:10","type":""}],"src":"12507:154:10"},{"body":{"nodeType":"YulBlock","src":"12716:258:10","statements":[{"nodeType":"YulVariableDeclaration","src":"12726:10:10","value":{"kind":"number","nodeType":"YulLiteral","src":"12735:1:10","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"12730:1:10","type":""}]},{"body":{"nodeType":"YulBlock","src":"12795:63:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"12820:3:10"},{"name":"i","nodeType":"YulIdentifier","src":"12825:1:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12816:3:10"},"nodeType":"YulFunctionCall","src":"12816:11:10"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"12839:3:10"},{"name":"i","nodeType":"YulIdentifier","src":"12844:1:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12835:3:10"},"nodeType":"YulFunctionCall","src":"12835:11:10"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"12829:5:10"},"nodeType":"YulFunctionCall","src":"12829:18:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12809:6:10"},"nodeType":"YulFunctionCall","src":"12809:39:10"},"nodeType":"YulExpressionStatement","src":"12809:39:10"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"12756:1:10"},{"name":"length","nodeType":"YulIdentifier","src":"12759:6:10"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"12753:2:10"},"nodeType":"YulFunctionCall","src":"12753:13:10"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"12767:19:10","statements":[{"nodeType":"YulAssignment","src":"12769:15:10","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"12778:1:10"},{"kind":"number","nodeType":"YulLiteral","src":"12781:2:10","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12774:3:10"},"nodeType":"YulFunctionCall","src":"12774:10:10"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"12769:1:10"}]}]},"pre":{"nodeType":"YulBlock","src":"12749:3:10","statements":[]},"src":"12745:113:10"},{"body":{"nodeType":"YulBlock","src":"12892:76:10","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"12942:3:10"},{"name":"length","nodeType":"YulIdentifier","src":"12947:6:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12938:3:10"},"nodeType":"YulFunctionCall","src":"12938:16:10"},{"kind":"number","nodeType":"YulLiteral","src":"12956:1:10","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12931:6:10"},"nodeType":"YulFunctionCall","src":"12931:27:10"},"nodeType":"YulExpressionStatement","src":"12931:27:10"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"12873:1:10"},{"name":"length","nodeType":"YulIdentifier","src":"12876:6:10"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12870:2:10"},"nodeType":"YulFunctionCall","src":"12870:13:10"},"nodeType":"YulIf","src":"12867:101:10"}]},"name":"copy_memory_to_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"12698:3:10","type":""},{"name":"dst","nodeType":"YulTypedName","src":"12703:3:10","type":""},{"name":"length","nodeType":"YulTypedName","src":"12708:6:10","type":""}],"src":"12667:307:10"},{"body":{"nodeType":"YulBlock","src":"13023:238:10","statements":[{"nodeType":"YulVariableDeclaration","src":"13033:58:10","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13055:6:10"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"13085:4:10"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"13063:21:10"},"nodeType":"YulFunctionCall","src":"13063:27:10"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13051:3:10"},"nodeType":"YulFunctionCall","src":"13051:40:10"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"13037:10:10","type":""}]},{"body":{"nodeType":"YulBlock","src":"13202:22:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"13204:16:10"},"nodeType":"YulFunctionCall","src":"13204:18:10"},"nodeType":"YulExpressionStatement","src":"13204:18:10"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"13145:10:10"},{"kind":"number","nodeType":"YulLiteral","src":"13157:18:10","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"13142:2:10"},"nodeType":"YulFunctionCall","src":"13142:34:10"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"13181:10:10"},{"name":"memPtr","nodeType":"YulIdentifier","src":"13193:6:10"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13178:2:10"},"nodeType":"YulFunctionCall","src":"13178:22:10"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"13139:2:10"},"nodeType":"YulFunctionCall","src":"13139:62:10"},"nodeType":"YulIf","src":"13136:88:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13240:2:10","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"13244:10:10"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13233:6:10"},"nodeType":"YulFunctionCall","src":"13233:22:10"},"nodeType":"YulExpressionStatement","src":"13233:22:10"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"13009:6:10","type":""},{"name":"size","nodeType":"YulTypedName","src":"13017:4:10","type":""}],"src":"12980:281:10"},{"body":{"nodeType":"YulBlock","src":"13301:142:10","statements":[{"nodeType":"YulAssignment","src":"13311:25:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"13334:1:10"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"13316:17:10"},"nodeType":"YulFunctionCall","src":"13316:20:10"},"variableNames":[{"name":"x","nodeType":"YulIdentifier","src":"13311:1:10"}]},{"nodeType":"YulAssignment","src":"13345:25:10","value":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"13368:1:10"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"13350:17:10"},"nodeType":"YulFunctionCall","src":"13350:20:10"},"variableNames":[{"name":"y","nodeType":"YulIdentifier","src":"13345:1:10"}]},{"body":{"nodeType":"YulBlock","src":"13392:22:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nodeType":"YulIdentifier","src":"13394:16:10"},"nodeType":"YulFunctionCall","src":"13394:18:10"},"nodeType":"YulExpressionStatement","src":"13394:18:10"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"13389:1:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"13382:6:10"},"nodeType":"YulFunctionCall","src":"13382:9:10"},"nodeType":"YulIf","src":"13379:35:10"},{"nodeType":"YulAssignment","src":"13423:14:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"13432:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"13435:1:10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"13428:3:10"},"nodeType":"YulFunctionCall","src":"13428:9:10"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"13423:1:10"}]}]},"name":"mod_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"13290:1:10","type":""},{"name":"y","nodeType":"YulTypedName","src":"13293:1:10","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"13299:1:10","type":""}],"src":"13267:176:10"},{"body":{"nodeType":"YulBlock","src":"13477:152:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13494:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13497:77:10","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13487:6:10"},"nodeType":"YulFunctionCall","src":"13487:88:10"},"nodeType":"YulExpressionStatement","src":"13487:88:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13591:1:10","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13594:4:10","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13584:6:10"},"nodeType":"YulFunctionCall","src":"13584:15:10"},"nodeType":"YulExpressionStatement","src":"13584:15:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13615:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13618:4:10","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13608:6:10"},"nodeType":"YulFunctionCall","src":"13608:15:10"},"nodeType":"YulExpressionStatement","src":"13608:15:10"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"13449:180:10"},{"body":{"nodeType":"YulBlock","src":"13663:152:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13680:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13683:77:10","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13673:6:10"},"nodeType":"YulFunctionCall","src":"13673:88:10"},"nodeType":"YulExpressionStatement","src":"13673:88:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13777:1:10","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13780:4:10","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13770:6:10"},"nodeType":"YulFunctionCall","src":"13770:15:10"},"nodeType":"YulExpressionStatement","src":"13770:15:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13801:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13804:4:10","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13794:6:10"},"nodeType":"YulFunctionCall","src":"13794:15:10"},"nodeType":"YulExpressionStatement","src":"13794:15:10"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"13635:180:10"},{"body":{"nodeType":"YulBlock","src":"13849:152:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13866:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13869:77:10","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13859:6:10"},"nodeType":"YulFunctionCall","src":"13859:88:10"},"nodeType":"YulExpressionStatement","src":"13859:88:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13963:1:10","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"13966:4:10","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13956:6:10"},"nodeType":"YulFunctionCall","src":"13956:15:10"},"nodeType":"YulExpressionStatement","src":"13956:15:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"13987:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"13990:4:10","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"13980:6:10"},"nodeType":"YulFunctionCall","src":"13980:15:10"},"nodeType":"YulExpressionStatement","src":"13980:15:10"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"13821:180:10"},{"body":{"nodeType":"YulBlock","src":"14035:152:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14052:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14055:77:10","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14045:6:10"},"nodeType":"YulFunctionCall","src":"14045:88:10"},"nodeType":"YulExpressionStatement","src":"14045:88:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14149:1:10","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"14152:4:10","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14142:6:10"},"nodeType":"YulFunctionCall","src":"14142:15:10"},"nodeType":"YulExpressionStatement","src":"14142:15:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14173:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14176:4:10","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14166:6:10"},"nodeType":"YulFunctionCall","src":"14166:15:10"},"nodeType":"YulExpressionStatement","src":"14166:15:10"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"14007:180:10"},{"body":{"nodeType":"YulBlock","src":"14221:152:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14238:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14241:77:10","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14231:6:10"},"nodeType":"YulFunctionCall","src":"14231:88:10"},"nodeType":"YulExpressionStatement","src":"14231:88:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14335:1:10","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"14338:4:10","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14328:6:10"},"nodeType":"YulFunctionCall","src":"14328:15:10"},"nodeType":"YulExpressionStatement","src":"14328:15:10"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14359:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14362:4:10","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14352:6:10"},"nodeType":"YulFunctionCall","src":"14352:15:10"},"nodeType":"YulExpressionStatement","src":"14352:15:10"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14193:180:10"},{"body":{"nodeType":"YulBlock","src":"14468:28:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14485:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14488:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14478:6:10"},"nodeType":"YulFunctionCall","src":"14478:12:10"},"nodeType":"YulExpressionStatement","src":"14478:12:10"}]},"name":"revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490","nodeType":"YulFunctionDefinition","src":"14379:117:10"},{"body":{"nodeType":"YulBlock","src":"14591:28:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14608:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14611:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14601:6:10"},"nodeType":"YulFunctionCall","src":"14601:12:10"},"nodeType":"YulExpressionStatement","src":"14601:12:10"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"14502:117:10"},{"body":{"nodeType":"YulBlock","src":"14714:28:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14731:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14734:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14724:6:10"},"nodeType":"YulFunctionCall","src":"14724:12:10"},"nodeType":"YulExpressionStatement","src":"14724:12:10"}]},"name":"revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef","nodeType":"YulFunctionDefinition","src":"14625:117:10"},{"body":{"nodeType":"YulBlock","src":"14837:28:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14854:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14857:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14847:6:10"},"nodeType":"YulFunctionCall","src":"14847:12:10"},"nodeType":"YulExpressionStatement","src":"14847:12:10"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"14748:117:10"},{"body":{"nodeType":"YulBlock","src":"14960:28:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14977:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14980:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14970:6:10"},"nodeType":"YulFunctionCall","src":"14970:12:10"},"nodeType":"YulExpressionStatement","src":"14970:12:10"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"14871:117:10"},{"body":{"nodeType":"YulBlock","src":"15083:28:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15100:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15103:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15093:6:10"},"nodeType":"YulFunctionCall","src":"15093:12:10"},"nodeType":"YulExpressionStatement","src":"15093:12:10"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"14994:117:10"},{"body":{"nodeType":"YulBlock","src":"15165:54:10","statements":[{"nodeType":"YulAssignment","src":"15175:38:10","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15193:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"15200:2:10","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15189:3:10"},"nodeType":"YulFunctionCall","src":"15189:14:10"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15209:2:10","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"15205:3:10"},"nodeType":"YulFunctionCall","src":"15205:7:10"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"15185:3:10"},"nodeType":"YulFunctionCall","src":"15185:28:10"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"15175:6:10"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15148:5:10","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"15158:6:10","type":""}],"src":"15117:102:10"},{"body":{"nodeType":"YulBlock","src":"15331:8:10","statements":[]},"name":"store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15323:6:10","type":""}],"src":"15225:114:10"},{"body":{"nodeType":"YulBlock","src":"15403:62:10","statements":[{"body":{"nodeType":"YulBlock","src":"15437:22:10","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x21","nodeType":"YulIdentifier","src":"15439:16:10"},"nodeType":"YulFunctionCall","src":"15439:18:10"},"nodeType":"YulExpressionStatement","src":"15439:18:10"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15426:5:10"},{"kind":"number","nodeType":"YulLiteral","src":"15433:1:10","type":"","value":"2"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15423:2:10"},"nodeType":"YulFunctionCall","src":"15423:12:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15416:6:10"},"nodeType":"YulFunctionCall","src":"15416:20:10"},"nodeType":"YulIf","src":"15413:46:10"}]},"name":"validator_assert_t_enum$_RaffleState_$587","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15396:5:10","type":""}],"src":"15345:120:10"},{"body":{"nodeType":"YulBlock","src":"15514:79:10","statements":[{"body":{"nodeType":"YulBlock","src":"15571:16:10","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15580:1:10","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15583:1:10","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15573:6:10"},"nodeType":"YulFunctionCall","src":"15573:12:10"},"nodeType":"YulExpressionStatement","src":"15573:12:10"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15537:5:10"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"15562:5:10"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"15544:17:10"},"nodeType":"YulFunctionCall","src":"15544:24:10"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"15534:2:10"},"nodeType":"YulFunctionCall","src":"15534:35:10"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"15527:6:10"},"nodeType":"YulFunctionCall","src":"15527:43:10"},"nodeType":"YulIf","src":"15524:63:10"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"15507:5:10","type":""}],"src":"15471:122:10"}]},"contents":"{\n\n    // uint256[]\n    function abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let src := offset\n        if gt(add(src, mul(length, 0x20)), end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_uint256(elementPos, end))\n            dst := add(dst, 0x20)\n            src := add(src, 0x20)\n        }\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory(src, dst, length)\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0, value1 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_bytes_memory_ptr(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := calldataload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_uint256t_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_t_enum$_RaffleState_$587_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_enum$_RaffleState_$587_to_t_uint8(value))\n    }\n\n    function abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, 0)\n        store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(pos)\n        end := add(pos, 0)\n    }\n\n    function abi_encode_t_uint16_to_t_uint16_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint16(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_uint32_to_t_uint32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint32(value))\n    }\n\n    function abi_encode_t_uint64_to_t_uint64_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint64(value))\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos ) -> end {\n\n        pos := abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value1,  tail)\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__to_t_bytes32_t_uint64_t_uint16_t_uint32_t_uint32__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint64_to_t_uint64_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint16_to_t_uint16_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_uint32_to_t_uint32_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function abi_encode_tuple_t_enum$_RaffleState_$587__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_enum$_RaffleState_$587_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_enum$_RaffleState_$587(value) -> cleaned {\n        cleaned := value validator_assert_t_enum$_RaffleState_$587(value)\n    }\n\n    function cleanup_t_uint16(value) -> cleaned {\n        cleaned := and(value, 0xffff)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function cleanup_t_uint32(value) -> cleaned {\n        cleaned := and(value, 0xffffffff)\n    }\n\n    function cleanup_t_uint64(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffff)\n    }\n\n    function convert_t_enum$_RaffleState_$587_to_t_uint8(value) -> converted {\n        converted := cleanup_t_enum$_RaffleState_$587(value)\n    }\n\n    function copy_calldata_to_memory(src, dst, length) {\n        calldatacopy(dst, src, length)\n        // clear end\n        mstore(add(dst, length), 0)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function mod_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(memPtr) {\n\n    }\n\n    function validator_assert_t_enum$_RaffleState_$587(value) {\n        if iszero(lt(value, 2)) { panic_error_0x21() }\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n","id":10,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"131":[{"length":32,"start":753},{"length":32,"start":837}],"589":[{"length":32,"start":692},{"length":32,"start":945}],"595":[{"length":32,"start":1493}],"597":[{"length":32,"start":1553}],"599":[{"length":32,"start":1586}],"604":[{"length":32,"start":1621}],"616":[{"length":32,"start":2016}]},"linkReferences":{},"object":"6080604052600436106100a75760003560e01c8063473f1ddc11610064578063473f1ddc1461019b57806353a2c19a146101c65780636e04ff0d146101f1578063c1c244e81461022f578063ca6a9ef81461025a578063fd6673f514610285576100a7565b806309bc33a7146100ac578063115cbaf5146100d75780631fe543e3146101025780632cfcc5391461012b5780634585e33b14610135578063460e20491461015e575b600080fd5b3480156100b857600080fd5b506100c16102b0565b6040516100ce9190610fea565b60405180910390f35b3480156100e357600080fd5b506100ec6102d8565b6040516100f99190610fcf565b60405180910390f35b34801561010e57600080fd5b5061012960048036038101906101249190610dc3565b6102ef565b005b6101336103af565b005b34801561014157600080fd5b5061015c60048036038101906101579190610cd3565b61051e565b005b34801561016a57600080fd5b5061018560048036038101906101809190610d69565b61071d565b6040516101929190610f08565b60405180910390f35b3480156101a757600080fd5b506101b0610764565b6040516101bd9190610f08565b60405180910390f35b3480156101d257600080fd5b506101db61078e565b6040516101e89190610fea565b60405180910390f35b3480156101fd57600080fd5b5061021860048036038101906102139190610d20565b61079d565b604051610226929190610f4c565b60405180910390f35b34801561023b57600080fd5b5061024461084a565b6040516102519190610fea565b60405180910390f35b34801561026657600080fd5b5061026f610854565b60405161027c9190610fea565b60405180910390f35b34801561029157600080fd5b5061029a610861565b6040516102a79190610fea565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103a157337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401610398929190610f23565b60405180910390fd5b6103ab828261086d565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610409576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561041d5761041c6112c4565b5b600160149054906101000a900460ff16600181111561043f5761043e6112c4565b5b14610476576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006105386040518060200160405280600081525061079d565b509050806105a75747600080549050600160149054906101000a900460ff166001811115610569576105686112c4565b5b6040517f584327aa00000000000000000000000000000000000000000000000000000000815260040161059e93929190611005565b60405180910390fd5b60018060146101000a81548160ff021916908360018111156105cc576105cb6112c4565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610696959493929190610f7c565b602060405180830381600087803b1580156106b057600080fd5b505af11580156106c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e89190610d96565b9050807fe0abfa81226f1e2ce09ba287cbb4c241e89b2b891a389274bb7d9c46e344daf060405160405180910390a250505050565b6000808281548110610732576107316112f3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b600060606000600160149054906101000a900460ff1660018111156107c5576107c46112c4565b5b600060018111156107d9576107d86112c4565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261080d91906110e5565b1190506000806000805490501190506000804711905083801561082d5750825b80156108365750815b801561083f5750805b955050505050915091565b6000600254905090565b6000600361ffff16905090565b60008080549050905090565b6000808054905082600081518110610888576108876112f3565b5b602002602001015161089a9190611235565b905060008082815481106108b1576108b06112f3565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610945576109446112c4565b5b0217905550600067ffffffffffffffff81111561096557610964611322565b5b6040519080825280602002602001820160405280156109935781602001602082028036833780820191505090505b50600090805190602001906109a9929190610a9e565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff16476040516109d790610ef3565b60006040518083038185875af1925050503d8060008114610a14576040519150601f19603f3d011682016040523d82523d6000602084013e610a19565b606091505b5050905080610a54576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f794919b0f484b8e90b1b817ac7f880f846fbd8a9813dee2a378e820db094e3d160405160405180910390a25050505050565b828054828255906000526020600020908101928215610b17579160200282015b82811115610b165782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610abe565b5b509050610b249190610b28565b5090565b5b80821115610b41576000816000905550600101610b29565b5090565b6000610b58610b5384611061565b61103c565b90508083825260208201905082856020860282011115610b7b57610b7a61135b565b5b60005b85811015610bab5781610b918882610ca9565b845260208401935060208301925050600181019050610b7e565b5050509392505050565b6000610bc8610bc38461108d565b61103c565b905082815260208101848484011115610be457610be3611360565b5b610bef8482856111c2565b509392505050565b600082601f830112610c0c57610c0b611356565b5b8135610c1c848260208601610b45565b91505092915050565b60008083601f840112610c3b57610c3a611356565b5b8235905067ffffffffffffffff811115610c5857610c57611351565b5b602083019150836001820283011115610c7457610c7361135b565b5b9250929050565b600082601f830112610c9057610c8f611356565b5b8135610ca0848260208601610bb5565b91505092915050565b600081359050610cb881611397565b92915050565b600081519050610ccd81611397565b92915050565b60008060208385031215610cea57610ce961136a565b5b600083013567ffffffffffffffff811115610d0857610d07611365565b5b610d1485828601610c25565b92509250509250929050565b600060208284031215610d3657610d3561136a565b5b600082013567ffffffffffffffff811115610d5457610d53611365565b5b610d6084828501610c7b565b91505092915050565b600060208284031215610d7f57610d7e61136a565b5b6000610d8d84828501610ca9565b91505092915050565b600060208284031215610dac57610dab61136a565b5b6000610dba84828501610cbe565b91505092915050565b60008060408385031215610dda57610dd961136a565b5b6000610de885828601610ca9565b925050602083013567ffffffffffffffff811115610e0957610e08611365565b5b610e1585828601610bf7565b9150509250929050565b610e2881611119565b82525050565b610e378161112b565b82525050565b610e4681611137565b82525050565b6000610e57826110be565b610e6181856110c9565b9350610e718185602086016111d1565b610e7a8161136f565b840191505092915050565b610e8e816111b0565b82525050565b6000610ea16000836110da565b9150610eac82611380565b600082019050919050565b610ec081611154565b82525050565b610ecf81611182565b82525050565b610ede8161118c565b82525050565b610eed8161119c565b82525050565b6000610efe82610e94565b9150819050919050565b6000602082019050610f1d6000830184610e1f565b92915050565b6000604082019050610f386000830185610e1f565b610f456020830184610e1f565b9392505050565b6000604082019050610f616000830185610e2e565b8181036020830152610f738184610e4c565b90509392505050565b600060a082019050610f916000830188610e3d565b610f9e6020830187610ee4565b610fab6040830186610eb7565b610fb86060830185610ed5565b610fc56080830184610ed5565b9695505050505050565b6000602082019050610fe46000830184610e85565b92915050565b6000602082019050610fff6000830184610ec6565b92915050565b600060608201905061101a6000830186610ec6565b6110276020830185610ec6565b6110346040830184610ec6565b949350505050565b6000611046611057565b90506110528282611204565b919050565b6000604051905090565b600067ffffffffffffffff82111561107c5761107b611322565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156110a8576110a7611322565b5b6110b18261136f565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006110f082611182565b91506110fb83611182565b92508282101561110e5761110d611266565b5b828203905092915050565b600061112482611162565b9050919050565b60008115159050919050565b6000819050919050565b600081905061114f82611383565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006111bb82611141565b9050919050565b82818337600083830152505050565b60005b838110156111ef5780820151818401526020810190506111d4565b838111156111fe576000848401525b50505050565b61120d8261136f565b810181811067ffffffffffffffff8211171561122c5761122b611322565b5b80604052505050565b600061124082611182565b915061124b83611182565b92508261125b5761125a611295565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b60028110611394576113936112c4565b5b50565b6113a081611182565b81146113ab57600080fd5b5056fea2646970667358221220ed906d716b1563899c20f928ba0a31f2a0a0d1191f4cd7d278682fa832048d0664736f6c63430008070033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA7 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x473F1DDC GT PUSH2 0x64 JUMPI DUP1 PUSH4 0x473F1DDC EQ PUSH2 0x19B JUMPI DUP1 PUSH4 0x53A2C19A EQ PUSH2 0x1C6 JUMPI DUP1 PUSH4 0x6E04FF0D EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0xC1C244E8 EQ PUSH2 0x22F JUMPI DUP1 PUSH4 0xCA6A9EF8 EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0xFD6673F5 EQ PUSH2 0x285 JUMPI PUSH2 0xA7 JUMP JUMPDEST DUP1 PUSH4 0x9BC33A7 EQ PUSH2 0xAC JUMPI DUP1 PUSH4 0x115CBAF5 EQ PUSH2 0xD7 JUMPI DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x102 JUMPI DUP1 PUSH4 0x2CFCC539 EQ PUSH2 0x12B JUMPI DUP1 PUSH4 0x4585E33B EQ PUSH2 0x135 JUMPI DUP1 PUSH4 0x460E2049 EQ PUSH2 0x15E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xC1 PUSH2 0x2B0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCE SWAP2 SWAP1 PUSH2 0xFEA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xEC PUSH2 0x2D8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xF9 SWAP2 SWAP1 PUSH2 0xFCF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x129 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x124 SWAP2 SWAP1 PUSH2 0xDC3 JUMP JUMPDEST PUSH2 0x2EF JUMP JUMPDEST STOP JUMPDEST PUSH2 0x133 PUSH2 0x3AF JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x141 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x15C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x157 SWAP2 SWAP1 PUSH2 0xCD3 JUMP JUMPDEST PUSH2 0x51E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x185 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x180 SWAP2 SWAP1 PUSH2 0xD69 JUMP JUMPDEST PUSH2 0x71D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x192 SWAP2 SWAP1 PUSH2 0xF08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1B0 PUSH2 0x764 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BD SWAP2 SWAP1 PUSH2 0xF08 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DB PUSH2 0x78E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0xFEA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x218 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x213 SWAP2 SWAP1 PUSH2 0xD20 JUMP JUMPDEST PUSH2 0x79D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x226 SWAP3 SWAP2 SWAP1 PUSH2 0xF4C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x23B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x244 PUSH2 0x84A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x251 SWAP2 SWAP1 PUSH2 0xFEA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26F PUSH2 0x854 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x27C SWAP2 SWAP1 PUSH2 0xFEA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x291 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x29A PUSH2 0x861 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A7 SWAP2 SWAP1 PUSH2 0xFEA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x3A1 JUMPI CALLER PUSH32 0x0 PUSH1 0x40 MLOAD PUSH32 0x1CF993F400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x398 SWAP3 SWAP2 SWAP1 PUSH2 0xF23 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x3AB DUP3 DUP3 PUSH2 0x86D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH32 0x0 CALLVALUE LT ISZERO PUSH2 0x409 JUMPI PUSH1 0x40 MLOAD PUSH32 0xBD4E069500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x41D JUMPI PUSH2 0x41C PUSH2 0x12C4 JUMP JUMPDEST JUMPDEST PUSH1 0x1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x43F JUMPI PUSH2 0x43E PUSH2 0x12C4 JUMP JUMPDEST JUMPDEST EQ PUSH2 0x476 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1425571C00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 CALLER SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x805E1D667BDDB8A95F0F09880CF94F403FB596CE79928D9F29B74203BA284D4 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x538 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x79D JUMP JUMPDEST POP SWAP1 POP DUP1 PUSH2 0x5A7 JUMPI SELFBALANCE PUSH1 0x0 DUP1 SLOAD SWAP1 POP PUSH1 0x1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x569 JUMPI PUSH2 0x568 PUSH2 0x12C4 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x584327AA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x59E SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1005 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x5CC JUMPI PUSH2 0x5CB PUSH2 0x12C4 JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x5D3B1D30 PUSH32 0x0 PUSH32 0x0 PUSH1 0x3 PUSH32 0x0 PUSH1 0x1 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x696 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xF7C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x6C4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6E8 SWAP2 SWAP1 PUSH2 0xD96 JUMP JUMPDEST SWAP1 POP DUP1 PUSH32 0xE0ABFA81226F1E2CE09BA287CBB4C241E89B2B891A389274BB7D9C46E344DAF0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x732 JUMPI PUSH2 0x731 PUSH2 0x12F3 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH4 0xFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH1 0x14 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x7C5 JUMPI PUSH2 0x7C4 PUSH2 0x12C4 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x7D9 JUMPI PUSH2 0x7D8 PUSH2 0x12C4 JUMP JUMPDEST JUMPDEST EQ SWAP1 POP PUSH1 0x0 PUSH32 0x0 PUSH1 0x2 SLOAD TIMESTAMP PUSH2 0x80D SWAP2 SWAP1 PUSH2 0x10E5 JUMP JUMPDEST GT SWAP1 POP PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 SLOAD SWAP1 POP GT SWAP1 POP PUSH1 0x0 DUP1 SELFBALANCE GT SWAP1 POP DUP4 DUP1 ISZERO PUSH2 0x82D JUMPI POP DUP3 JUMPDEST DUP1 ISZERO PUSH2 0x836 JUMPI POP DUP2 JUMPDEST DUP1 ISZERO PUSH2 0x83F JUMPI POP DUP1 JUMPDEST SWAP6 POP POP POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x3 PUSH2 0xFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 SLOAD SWAP1 POP DUP3 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x888 JUMPI PUSH2 0x887 PUSH2 0x12F3 JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x89A SWAP2 SWAP1 PUSH2 0x1235 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x8B1 JUMPI PUSH2 0x8B0 PUSH2 0x12F3 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP1 PUSH1 0x1 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH1 0x1 PUSH1 0x14 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x945 JUMPI PUSH2 0x944 PUSH2 0x12C4 JUMP JUMPDEST JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x965 JUMPI PUSH2 0x964 PUSH2 0x1322 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x993 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP PUSH1 0x0 SWAP1 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 PUSH2 0x9A9 SWAP3 SWAP2 SWAP1 PUSH2 0xA9E JUMP JUMPDEST POP TIMESTAMP PUSH1 0x2 DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SELFBALANCE PUSH1 0x40 MLOAD PUSH2 0x9D7 SWAP1 PUSH2 0xEF3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xA14 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xA19 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0xA54 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA1D04B3900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x794919B0F484B8E90B1B817AC7F880F846FBD8A9813DEE2A378E820DB094E3D1 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0xB17 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0xB16 JUMPI DUP3 MLOAD DUP3 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0xABE JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 0xB24 SWAP2 SWAP1 PUSH2 0xB28 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0xB41 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 SWAP1 SSTORE POP PUSH1 0x1 ADD PUSH2 0xB29 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xB58 PUSH2 0xB53 DUP5 PUSH2 0x1061 JUMP JUMPDEST PUSH2 0x103C JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 0x20 DUP7 MUL DUP3 ADD GT ISZERO PUSH2 0xB7B JUMPI PUSH2 0xB7A PUSH2 0x135B JUMP JUMPDEST JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xBAB JUMPI DUP2 PUSH2 0xB91 DUP9 DUP3 PUSH2 0xCA9 JUMP JUMPDEST DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xB7E JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBC8 PUSH2 0xBC3 DUP5 PUSH2 0x108D JUMP JUMPDEST PUSH2 0x103C JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0xBE4 JUMPI PUSH2 0xBE3 PUSH2 0x1360 JUMP JUMPDEST JUMPDEST PUSH2 0xBEF DUP5 DUP3 DUP6 PUSH2 0x11C2 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xC0C JUMPI PUSH2 0xC0B PUSH2 0x1356 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xC1C DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xB45 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xC3B JUMPI PUSH2 0xC3A PUSH2 0x1356 JUMP JUMPDEST JUMPDEST DUP3 CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xC58 JUMPI PUSH2 0xC57 PUSH2 0x1351 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0xC74 JUMPI PUSH2 0xC73 PUSH2 0x135B JUMP JUMPDEST JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xC90 JUMPI PUSH2 0xC8F PUSH2 0x1356 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0xCA0 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0xBB5 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0xCB8 DUP2 PUSH2 0x1397 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0xCCD DUP2 PUSH2 0x1397 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCEA JUMPI PUSH2 0xCE9 PUSH2 0x136A JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD08 JUMPI PUSH2 0xD07 PUSH2 0x1365 JUMP JUMPDEST JUMPDEST PUSH2 0xD14 DUP6 DUP3 DUP7 ADD PUSH2 0xC25 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD36 JUMPI PUSH2 0xD35 PUSH2 0x136A JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP3 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xD54 JUMPI PUSH2 0xD53 PUSH2 0x1365 JUMP JUMPDEST JUMPDEST PUSH2 0xD60 DUP5 DUP3 DUP6 ADD PUSH2 0xC7B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD7F JUMPI PUSH2 0xD7E PUSH2 0x136A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xD8D DUP5 DUP3 DUP6 ADD PUSH2 0xCA9 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDAC JUMPI PUSH2 0xDAB PUSH2 0x136A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xDBA DUP5 DUP3 DUP6 ADD PUSH2 0xCBE JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDDA JUMPI PUSH2 0xDD9 PUSH2 0x136A JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0xDE8 DUP6 DUP3 DUP7 ADD PUSH2 0xCA9 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE09 JUMPI PUSH2 0xE08 PUSH2 0x1365 JUMP JUMPDEST JUMPDEST PUSH2 0xE15 DUP6 DUP3 DUP7 ADD PUSH2 0xBF7 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xE28 DUP2 PUSH2 0x1119 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xE37 DUP2 PUSH2 0x112B JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xE46 DUP2 PUSH2 0x1137 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE57 DUP3 PUSH2 0x10BE JUMP JUMPDEST PUSH2 0xE61 DUP2 DUP6 PUSH2 0x10C9 JUMP JUMPDEST SWAP4 POP PUSH2 0xE71 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x11D1 JUMP JUMPDEST PUSH2 0xE7A DUP2 PUSH2 0x136F JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xE8E DUP2 PUSH2 0x11B0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEA1 PUSH1 0x0 DUP4 PUSH2 0x10DA JUMP JUMPDEST SWAP2 POP PUSH2 0xEAC DUP3 PUSH2 0x1380 JUMP JUMPDEST PUSH1 0x0 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xEC0 DUP2 PUSH2 0x1154 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xECF DUP2 PUSH2 0x1182 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xEDE DUP2 PUSH2 0x118C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xEED DUP2 PUSH2 0x119C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEFE DUP3 PUSH2 0xE94 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xF1D PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xE1F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xF38 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xE1F JUMP JUMPDEST PUSH2 0xF45 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xE1F JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0xF61 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0xE2E JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0xF73 DUP2 DUP5 PUSH2 0xE4C JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 DUP3 ADD SWAP1 POP PUSH2 0xF91 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0xE3D JUMP JUMPDEST PUSH2 0xF9E PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0xEE4 JUMP JUMPDEST PUSH2 0xFAB PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0xEB7 JUMP JUMPDEST PUSH2 0xFB8 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0xED5 JUMP JUMPDEST PUSH2 0xFC5 PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0xED5 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xFE4 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xE85 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0xFFF PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0xEC6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x101A PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0xEC6 JUMP JUMPDEST PUSH2 0x1027 PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0xEC6 JUMP JUMPDEST PUSH2 0x1034 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0xEC6 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1046 PUSH2 0x1057 JUMP JUMPDEST SWAP1 POP PUSH2 0x1052 DUP3 DUP3 PUSH2 0x1204 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x107C JUMPI PUSH2 0x107B PUSH2 0x1322 JUMP JUMPDEST JUMPDEST PUSH1 0x20 DUP3 MUL SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x10A8 JUMPI PUSH2 0x10A7 PUSH2 0x1322 JUMP JUMPDEST JUMPDEST PUSH2 0x10B1 DUP3 PUSH2 0x136F JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x10F0 DUP3 PUSH2 0x1182 JUMP JUMPDEST SWAP2 POP PUSH2 0x10FB DUP4 PUSH2 0x1182 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 0x110E JUMPI PUSH2 0x110D PUSH2 0x1266 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1124 DUP3 PUSH2 0x1162 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x114F DUP3 PUSH2 0x1383 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0xFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11BB DUP3 PUSH2 0x1141 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x11EF JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x11D4 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x11FE JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x120D DUP3 PUSH2 0x136F JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x122C JUMPI PUSH2 0x122B PUSH2 0x1322 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1240 DUP3 PUSH2 0x1182 JUMP JUMPDEST SWAP2 POP PUSH2 0x124B DUP4 PUSH2 0x1182 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 0x125B JUMPI PUSH2 0x125A PUSH2 0x1295 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x2 DUP2 LT PUSH2 0x1394 JUMPI PUSH2 0x1393 PUSH2 0x12C4 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH2 0x13A0 DUP2 PUSH2 0x1182 JUMP JUMPDEST DUP2 EQ PUSH2 0x13AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xED SWAP1 PUSH14 0x716B1563899C20F928BA0A31F2A0 LOG0 0xD1 NOT 0x1F 0x4C 0xD7 0xD2 PUSH25 0x682FA832048D0664736F6C6343000807003300000000000000 ","sourceMap":"467:4255:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3897:93;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4208:97;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;6618:256:1;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1888:328:8;;;:::i;:::-;;2222:611;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;3996:105;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4107:95;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4311:85;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2839:433;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;4508:97;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4611:108;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4402:100;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3897:93;3944:7;3970:13;3963:20;;3897:93;:::o;4208:97::-;4255:11;4285:13;;;;;;;;;;;4278:20;;4208:97;:::o;6618:256:1:-;6731:14;6717:28;;:10;:28;;;6713:109;;6788:10;6800:14;6762:53;;;;;;;;;;;;:::i;:::-;;;;;;;;6713:109;6827:42;6846:9;6857:11;6827:18;:42::i;:::-;6618:256;;:::o;1888:328:8:-;1952:13;1940:9;:25;1936:92;;;1988:29;;;;;;;;;;;;;;1936:92;2059:16;2042:33;;;;;;;;:::i;:::-;;:13;;;;;;;;;;;:33;;;;;;;;:::i;:::-;;;2038:88;;2098:17;;;;;;;;;;;;;;2038:88;2136:9;2159:10;2136:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2198:10;2186:23;;;;;;;;;;;;1888:328::o;2222:611::-;2297:17;2320:15;;;;;;;;;;;;;:11;:15::i;:::-;2296:39;;;2349:12;2344:180;;2417:21;2452:9;:16;;;;2490:13;;;;;;;;;;;2482:22;;;;;;;;:::i;:::-;;2380:134;;;;;;;;;;;;;:::i;:::-;;;;;;;;2344:180;2548:23;2532:13;;:39;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;2580:17;2601:16;:35;;;2650:9;2673:16;890:1;2737:10;973:1;2601:178;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2580:199;;2816:9;2794:32;;;;;;;;;;2287:546;;2222:611;;:::o;3996:105::-;4052:7;4078:9;4088:5;4078:16;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4071:23;;3996:105;;;:::o;4107:95::-;4155:7;4181:14;;;;;;;;;;;4174:21;;4107:95;:::o;4311:85::-;4355:7;973:1;4374:15;;;;4311:85;:::o;2839:433::-;2915:17;2934:12;2963:11;2997:13;;;;;;;;;;;2977:33;;;;;;;;:::i;:::-;;:16;:33;;;;;;;;:::i;:::-;;;2963:47;;3020:15;3077:10;3058:15;;3040;:33;;;;:::i;:::-;3039:48;3020:68;;3098:15;3135:1;3116:9;:16;;;;:20;3098:38;;3146:15;3188:1;3164:21;:25;3146:43;;3215:6;:20;;;;;3225:10;3215:20;:34;;;;;3239:10;3215:34;:48;;;;;3253:10;3215:48;3199:65;;2953:319;;;;2839:433;;;:::o;4508:97::-;4557:7;4583:15;;4576:22;;4508:97;:::o;4611:108::-;4666:7;890:1;4685:27;;;;4611:108;:::o;4402:100::-;4453:7;4479:9;:16;;;;4472:23;;4402:100;:::o;3278:613::-;3390:21;3431:9;:16;;;;3414:11;3426:1;3414:14;;;;;;;;:::i;:::-;;;;;;;;:33;;;;:::i;:::-;3390:57;;3457:28;3488:9;3498:13;3488:24;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3457:55;;3539:12;3522:14;;:29;;;;;;;;;;;;;;;;;;3577:16;3561:13;;:32;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;3637:1;3615:24;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3603:9;:36;;;;;;;;;;;;:::i;:::-;;3667:15;3649;:33;;;;3693:12;3711;:17;;3737:21;3711:53;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3692:72;;;3779:7;3774:70;;3809:24;;;;;;;;;;;;;;3774:70;3871:12;3858:26;;;;;;;;;;;;3380:511;;;3278:613;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;24:722:10:-;120:5;145:81;161:64;218:6;161:64;:::i;:::-;145:81;:::i;:::-;136:90;;246:5;275:6;268:5;261:21;309:4;302:5;298:16;291:23;;335:6;385:3;377:4;369:6;365:17;360:3;356:27;353:36;350:143;;;404:79;;:::i;:::-;350:143;517:1;502:238;527:6;524:1;521:13;502:238;;;595:3;624:37;657:3;645:10;624:37;:::i;:::-;619:3;612:50;691:4;686:3;682:14;675:21;;725:4;720:3;716:14;709:21;;562:178;549:1;546;542:9;537:14;;502:238;;;506:14;126:620;;24:722;;;;;:::o;752:410::-;829:5;854:65;870:48;911:6;870:48;:::i;:::-;854:65;:::i;:::-;845:74;;942:6;935:5;928:21;980:4;973:5;969:16;1018:3;1009:6;1004:3;1000:16;997:25;994:112;;;1025:79;;:::i;:::-;994:112;1115:41;1149:6;1144:3;1139;1115:41;:::i;:::-;835:327;752:410;;;;;:::o;1185:370::-;1256:5;1305:3;1298:4;1290:6;1286:17;1282:27;1272:122;;1313:79;;:::i;:::-;1272:122;1430:6;1417:20;1455:94;1545:3;1537:6;1530:4;1522:6;1518:17;1455:94;:::i;:::-;1446:103;;1262:293;1185:370;;;;:::o;1574:552::-;1631:8;1641:6;1691:3;1684:4;1676:6;1672:17;1668:27;1658:122;;1699:79;;:::i;:::-;1658:122;1812:6;1799:20;1789:30;;1842:18;1834:6;1831:30;1828:117;;;1864:79;;:::i;:::-;1828:117;1978:4;1970:6;1966:17;1954:29;;2032:3;2024:4;2016:6;2012:17;2002:8;1998:32;1995:41;1992:128;;;2039:79;;:::i;:::-;1992:128;1574:552;;;;;:::o;2145:338::-;2200:5;2249:3;2242:4;2234:6;2230:17;2226:27;2216:122;;2257:79;;:::i;:::-;2216:122;2374:6;2361:20;2399:78;2473:3;2465:6;2458:4;2450:6;2446:17;2399:78;:::i;:::-;2390:87;;2206:277;2145:338;;;;:::o;2489:139::-;2535:5;2573:6;2560:20;2551:29;;2589:33;2616:5;2589:33;:::i;:::-;2489:139;;;;:::o;2634:143::-;2691:5;2722:6;2716:13;2707:22;;2738:33;2765:5;2738:33;:::i;:::-;2634:143;;;;:::o;2783:527::-;2853:6;2861;2910:2;2898:9;2889:7;2885:23;2881:32;2878:119;;;2916:79;;:::i;:::-;2878:119;3064:1;3053:9;3049:17;3036:31;3094:18;3086:6;3083:30;3080:117;;;3116:79;;:::i;:::-;3080:117;3229:64;3285:7;3276:6;3265:9;3261:22;3229:64;:::i;:::-;3211:82;;;;3007:296;2783:527;;;;;:::o;3316:507::-;3384:6;3433:2;3421:9;3412:7;3408:23;3404:32;3401:119;;;3439:79;;:::i;:::-;3401:119;3587:1;3576:9;3572:17;3559:31;3617:18;3609:6;3606:30;3603:117;;;3639:79;;:::i;:::-;3603:117;3744:62;3798:7;3789:6;3778:9;3774:22;3744:62;:::i;:::-;3734:72;;3530:286;3316:507;;;;:::o;3829:329::-;3888:6;3937:2;3925:9;3916:7;3912:23;3908:32;3905:119;;;3943:79;;:::i;:::-;3905:119;4063:1;4088:53;4133:7;4124:6;4113:9;4109:22;4088:53;:::i;:::-;4078:63;;4034:117;3829:329;;;;:::o;4164:351::-;4234:6;4283:2;4271:9;4262:7;4258:23;4254:32;4251:119;;;4289:79;;:::i;:::-;4251:119;4409:1;4434:64;4490:7;4481:6;4470:9;4466:22;4434:64;:::i;:::-;4424:74;;4380:128;4164:351;;;;:::o;4521:684::-;4614:6;4622;4671:2;4659:9;4650:7;4646:23;4642:32;4639:119;;;4677:79;;:::i;:::-;4639:119;4797:1;4822:53;4867:7;4858:6;4847:9;4843:22;4822:53;:::i;:::-;4812:63;;4768:117;4952:2;4941:9;4937:18;4924:32;4983:18;4975:6;4972:30;4969:117;;;5005:79;;:::i;:::-;4969:117;5110:78;5180:7;5171:6;5160:9;5156:22;5110:78;:::i;:::-;5100:88;;4895:303;4521:684;;;;;:::o;5211:118::-;5298:24;5316:5;5298:24;:::i;:::-;5293:3;5286:37;5211:118;;:::o;5335:109::-;5416:21;5431:5;5416:21;:::i;:::-;5411:3;5404:34;5335:109;;:::o;5450:118::-;5537:24;5555:5;5537:24;:::i;:::-;5532:3;5525:37;5450:118;;:::o;5574:360::-;5660:3;5688:38;5720:5;5688:38;:::i;:::-;5742:70;5805:6;5800:3;5742:70;:::i;:::-;5735:77;;5821:52;5866:6;5861:3;5854:4;5847:5;5843:16;5821:52;:::i;:::-;5898:29;5920:6;5898:29;:::i;:::-;5893:3;5889:39;5882:46;;5664:270;5574:360;;;;:::o;5940:157::-;6040:50;6084:5;6040:50;:::i;:::-;6035:3;6028:63;5940:157;;:::o;6103:398::-;6262:3;6283:83;6364:1;6359:3;6283:83;:::i;:::-;6276:90;;6375:93;6464:3;6375:93;:::i;:::-;6493:1;6488:3;6484:11;6477:18;;6103:398;;;:::o;6507:115::-;6592:23;6609:5;6592:23;:::i;:::-;6587:3;6580:36;6507:115;;:::o;6628:118::-;6715:24;6733:5;6715:24;:::i;:::-;6710:3;6703:37;6628:118;;:::o;6752:115::-;6837:23;6854:5;6837:23;:::i;:::-;6832:3;6825:36;6752:115;;:::o;6873:::-;6958:23;6975:5;6958:23;:::i;:::-;6953:3;6946:36;6873:115;;:::o;6994:379::-;7178:3;7200:147;7343:3;7200:147;:::i;:::-;7193:154;;7364:3;7357:10;;6994:379;;;:::o;7379:222::-;7472:4;7510:2;7499:9;7495:18;7487:26;;7523:71;7591:1;7580:9;7576:17;7567:6;7523:71;:::i;:::-;7379:222;;;;:::o;7607:332::-;7728:4;7766:2;7755:9;7751:18;7743:26;;7779:71;7847:1;7836:9;7832:17;7823:6;7779:71;:::i;:::-;7860:72;7928:2;7917:9;7913:18;7904:6;7860:72;:::i;:::-;7607:332;;;;;:::o;7945:407::-;8078:4;8116:2;8105:9;8101:18;8093:26;;8129:65;8191:1;8180:9;8176:17;8167:6;8129:65;:::i;:::-;8241:9;8235:4;8231:20;8226:2;8215:9;8211:18;8204:48;8269:76;8340:4;8331:6;8269:76;:::i;:::-;8261:84;;7945:407;;;;;:::o;8358:648::-;8555:4;8593:3;8582:9;8578:19;8570:27;;8607:71;8675:1;8664:9;8660:17;8651:6;8607:71;:::i;:::-;8688:70;8754:2;8743:9;8739:18;8730:6;8688:70;:::i;:::-;8768;8834:2;8823:9;8819:18;8810:6;8768:70;:::i;:::-;8848;8914:2;8903:9;8899:18;8890:6;8848:70;:::i;:::-;8928:71;8994:3;8983:9;8979:19;8970:6;8928:71;:::i;:::-;8358:648;;;;;;;;:::o;9012:248::-;9118:4;9156:2;9145:9;9141:18;9133:26;;9169:84;9250:1;9239:9;9235:17;9226:6;9169:84;:::i;:::-;9012:248;;;;:::o;9266:222::-;9359:4;9397:2;9386:9;9382:18;9374:26;;9410:71;9478:1;9467:9;9463:17;9454:6;9410:71;:::i;:::-;9266:222;;;;:::o;9494:442::-;9643:4;9681:2;9670:9;9666:18;9658:26;;9694:71;9762:1;9751:9;9747:17;9738:6;9694:71;:::i;:::-;9775:72;9843:2;9832:9;9828:18;9819:6;9775:72;:::i;:::-;9857;9925:2;9914:9;9910:18;9901:6;9857:72;:::i;:::-;9494:442;;;;;;:::o;9942:129::-;9976:6;10003:20;;:::i;:::-;9993:30;;10032:33;10060:4;10052:6;10032:33;:::i;:::-;9942:129;;;:::o;10077:75::-;10110:6;10143:2;10137:9;10127:19;;10077:75;:::o;10158:311::-;10235:4;10325:18;10317:6;10314:30;10311:56;;;10347:18;;:::i;:::-;10311:56;10397:4;10389:6;10385:17;10377:25;;10457:4;10451;10447:15;10439:23;;10158:311;;;:::o;10475:307::-;10536:4;10626:18;10618:6;10615:30;10612:56;;;10648:18;;:::i;:::-;10612:56;10686:29;10708:6;10686:29;:::i;:::-;10678:37;;10770:4;10764;10760:15;10752:23;;10475:307;;;:::o;10788:98::-;10839:6;10873:5;10867:12;10857:22;;10788:98;;;:::o;10892:168::-;10975:11;11009:6;11004:3;10997:19;11049:4;11044:3;11040:14;11025:29;;10892:168;;;;:::o;11066:147::-;11167:11;11204:3;11189:18;;11066:147;;;;:::o;11219:191::-;11259:4;11279:20;11297:1;11279:20;:::i;:::-;11274:25;;11313:20;11331:1;11313:20;:::i;:::-;11308:25;;11352:1;11349;11346:8;11343:34;;;11357:18;;:::i;:::-;11343:34;11402:1;11399;11395:9;11387:17;;11219:191;;;;:::o;11416:96::-;11453:7;11482:24;11500:5;11482:24;:::i;:::-;11471:35;;11416:96;;;:::o;11518:90::-;11552:7;11595:5;11588:13;11581:21;11570:32;;11518:90;;;:::o;11614:77::-;11651:7;11680:5;11669:16;;11614:77;;;:::o;11697:141::-;11749:7;11778:5;11767:16;;11784:48;11826:5;11784:48;:::i;:::-;11697:141;;;:::o;11844:89::-;11880:7;11920:6;11913:5;11909:18;11898:29;;11844:89;;;:::o;11939:126::-;11976:7;12016:42;12009:5;12005:54;11994:65;;11939:126;;;:::o;12071:77::-;12108:7;12137:5;12126:16;;12071:77;;;:::o;12154:93::-;12190:7;12230:10;12223:5;12219:22;12208:33;;12154:93;;;:::o;12253:101::-;12289:7;12329:18;12322:5;12318:30;12307:41;;12253:101;;;:::o;12360:141::-;12423:9;12456:39;12489:5;12456:39;:::i;:::-;12443:52;;12360:141;;;:::o;12507:154::-;12591:6;12586:3;12581;12568:30;12653:1;12644:6;12639:3;12635:16;12628:27;12507:154;;;:::o;12667:307::-;12735:1;12745:113;12759:6;12756:1;12753:13;12745:113;;;12844:1;12839:3;12835:11;12829:18;12825:1;12820:3;12816:11;12809:39;12781:2;12778:1;12774:10;12769:15;;12745:113;;;12876:6;12873:1;12870:13;12867:101;;;12956:1;12947:6;12942:3;12938:16;12931:27;12867:101;12716:258;12667:307;;;:::o;12980:281::-;13063:27;13085:4;13063:27;:::i;:::-;13055:6;13051:40;13193:6;13181:10;13178:22;13157:18;13145:10;13142:34;13139:62;13136:88;;;13204:18;;:::i;:::-;13136:88;13244:10;13240:2;13233:22;13023:238;12980:281;;:::o;13267:176::-;13299:1;13316:20;13334:1;13316:20;:::i;:::-;13311:25;;13350:20;13368:1;13350:20;:::i;:::-;13345:25;;13389:1;13379:35;;13394:18;;:::i;:::-;13379:35;13435:1;13432;13428:9;13423:14;;13267:176;;;;:::o;13449:180::-;13497:77;13494:1;13487:88;13594:4;13591:1;13584:15;13618:4;13615:1;13608:15;13635:180;13683:77;13680:1;13673:88;13780:4;13777:1;13770:15;13804:4;13801:1;13794:15;13821:180;13869:77;13866:1;13859:88;13966:4;13963:1;13956:15;13990:4;13987:1;13980:15;14007:180;14055:77;14052:1;14045:88;14152:4;14149:1;14142:15;14176:4;14173:1;14166:15;14193:180;14241:77;14238:1;14231:88;14338:4;14335:1;14328:15;14362:4;14359:1;14352:15;14379:117;14488:1;14485;14478:12;14502:117;14611:1;14608;14601:12;14625:117;14734:1;14731;14724:12;14748:117;14857:1;14854;14847:12;14871:117;14980:1;14977;14970:12;14994:117;15103:1;15100;15093:12;15117:102;15158:6;15209:2;15205:7;15200:2;15193:5;15189:14;15185:28;15175:38;;15117:102;;;:::o;15225:114::-;;:::o;15345:120::-;15433:1;15426:5;15423:12;15413:46;;15439:18;;:::i;:::-;15413:46;15345:120;:::o;15471:122::-;15544:24;15562:5;15544:24;:::i;:::-;15537:5;15534:35;15524:63;;15583:1;15580;15573:12;15524:63;15471:122;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1018400","executionCost":"infinite","totalCost":"infinite"},"external":{"checkUpkeep(bytes)":"infinite","enterRaffle()":"infinite","getEntranceFee()":"infinite","getLastTimeStamp()":"2503","getNumWords()":"365","getNumberOfPlayers()":"2555","getPlayers(uint256)":"5078","getRaffleState()":"2641","getRecentWinner()":"2522","getRequestConfirmation()":"431","performUpkeep(bytes)":"infinite","rawFulfillRandomWords(uint256,uint256[])":"infinite"},"internal":{"fulfillRandomWords(uint256,uint256[] memory)":"infinite"}},"methodIdentifiers":{"checkUpkeep(bytes)":"6e04ff0d","enterRaffle()":"2cfcc539","getEntranceFee()":"09bc33a7","getLastTimeStamp()":"c1c244e8","getNumWords()":"53a2c19a","getNumberOfPlayers()":"fd6673f5","getPlayers(uint256)":"460e2049","getRaffleState()":"115cbaf5","getRecentWinner()":"473f1ddc","getRequestConfirmation()":"ca6a9ef8","performUpkeep(bytes)":"4585e33b","rawFulfillRandomWords(uint256,uint256[])":"1fe543e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"requestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"winnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"RaffleEnter(address)\":{\"notice\":\"Events  \"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Rafle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xac76a31c20c6d66196247376d113a0f19229569ab8c123989649d50be3333e0a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Rafle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror Raffle__NotEnoughETHEntered();\\nerror Raffle__TransferFailed();\\nerror Raffle__NotOpen();\\nerror Raffle__UpkeepNotNeeded(uint256 balance, uint256 numPlayers, uint256 raffleState);\\n\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n\\n    enum RaffleState {\\n        OPEN, \\n        CALCULATING\\n    }\\n\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gaslane;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATION = 3;\\n    uint32 private immutable i_gasLimit;\\n    uint32 private constant NUM_WORD = 1;\\n\\n\\n    address private s_recentWinner; \\n    RaffleState private s_raffleState;\\n    uint256 private s_lastTimeStamp;\\n    uint256 private immutable i_interval;\\n    \\n    /** Events  */\\n    event RaffleEnter(address indexed player);\\n    event requestedRaffleWinner(uint256 indexed requestId);\\n    event winnerPicked(address indexed winner);\\n\\n    constructor (address vrfCoordinatorV2,\\n        uint256 entranceFee, \\n        bytes32 gasLane, \\n        uint64 subscriptionId, \\n        uint32 gasLimit,\\n        uint256 interval\\n        ) \\n    VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entranceFee = entranceFee; \\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gaslane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_gasLimit = gasLimit;\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = interval; \\n    }\\n\\n    function enterRaffle() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Raffle__NotEnoughETHEntered();\\n        }\\n\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Raffle__NotOpen();\\n        }\\n\\n        s_players.push(payable(msg.sender));\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    function performUpkeep(bytes calldata /** */) external override  {\\n       (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n       if (!upkeepNeeded) {\\n        revert Raffle__UpkeepNotNeeded(\\n            address(this).balance,\\n            s_players.length,\\n            uint256(s_raffleState)\\n        );\\n       }\\n       s_raffleState = RaffleState.CALCULATING;\\n       uint256 requestID =  i_vrfCoordinator.requestRandomWords(\\n            i_gaslane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATION,\\n            i_gasLimit,\\n            NUM_WORD\\n        );\\n        emit requestedRaffleWinner(requestID);\\n    }\\n\\n    function checkUpkeep(bytes memory /* checkData */) public override returns (bool upkeepNeeded, bytes memory /**/) {\\n        bool isOpen = RaffleState.OPEN == s_raffleState;\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasPlayers = s_players.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\n\\n    }\\n\\n    function fulfillRandomWords( uint256 /**requestId*/, uint256[] memory randomWords ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_raffleState = RaffleState.OPEN;\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n        (bool success, ) = recentWinner.call{ value: address(this).balance }(\\\"\\\");\\n        if (!success) {\\n            revert Raffle__TransferFailed();\\n        }\\n        emit winnerPicked(recentWinner);\\n    }\\n\\n    function getEntranceFee() public view returns (uint256) {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayers(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORD;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return s_players.length;\\n    }\\n\\n    function getLastTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getRequestConfirmation() public pure returns (uint256) {\\n        return REQUEST_CONFIRMATION;\\n    }\\n\\n}\",\"keccak256\":\"0x238ca7099c9e40f07f5c7d07486b1d54e4ab1d266d88858718d12f8e32eb8404\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":592,"contract":"contracts/Rafle.sol:Raffle","label":"s_players","offset":0,"slot":"0","type":"t_array(t_address_payable)dyn_storage"},{"astId":609,"contract":"contracts/Rafle.sol:Raffle","label":"s_recentWinner","offset":0,"slot":"1","type":"t_address"},{"astId":612,"contract":"contracts/Rafle.sol:Raffle","label":"s_raffleState","offset":20,"slot":"1","type":"t_enum(RaffleState)587"},{"astId":614,"contract":"contracts/Rafle.sol:Raffle","label":"s_lastTimeStamp","offset":0,"slot":"2","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_address_payable":{"encoding":"inplace","label":"address payable","numberOfBytes":"20"},"t_array(t_address_payable)dyn_storage":{"base":"t_address_payable","encoding":"dynamic_array","label":"address payable[]","numberOfBytes":"32"},"t_enum(RaffleState)587":{"encoding":"inplace","label":"enum Raffle.RaffleState","numberOfBytes":"1"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"events":{"RaffleEnter(address)":{"notice":"Events  "}},"kind":"user","methods":{},"version":1}}}}}}